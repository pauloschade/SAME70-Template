
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e1c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402e1c  00402e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20400000  00402e24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002bc  2040043c  00403260  0002043c  2**2
                  ALLOC
  4 .stack        00002000  204006f8  0040351c  0002043c  2**0
                  ALLOC
  5 .heap         00000200  204026f8  0040551c  0002043c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001501a  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002b47  00000000  00000000  000354dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005bf0  00000000  00000000  00038024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a80  00000000  00000000  0003dc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a30  00000000  00000000  0003e694  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007a0d  00000000  00000000  0003f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d532  00000000  00000000  00046ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008fa41  00000000  00000000  00054003  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002cf0  00000000  00000000  000e3a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 26 40 20 e1 24 40 00 91 25 40 00 91 25 40 00     .&@ .$@..%@..%@.
  400010:	91 25 40 00 91 25 40 00 91 25 40 00 00 00 00 00     .%@..%@..%@.....
	...
  40002c:	91 25 40 00 91 25 40 00 00 00 00 00 91 25 40 00     .%@..%@......%@.
  40003c:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  40004c:	f9 27 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .'@..%@..%@..%@.
  40005c:	91 25 40 00 91 25 40 00 00 00 00 00 99 20 40 00     .%@..%@...... @.
  40006c:	b1 20 40 00 c9 20 40 00 91 25 40 00 91 25 40 00     . @.. @..%@..%@.
  40007c:	91 25 40 00 e1 20 40 00 f9 20 40 00 91 25 40 00     .%@.. @.. @..%@.
  40008c:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  40009c:	2d 28 40 00 51 28 40 00 91 25 40 00 91 25 40 00     -(@.Q(@..%@..%@.
  4000ac:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000bc:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000cc:	91 25 40 00 00 00 00 00 91 25 40 00 00 00 00 00     .%@......%@.....
  4000dc:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000ec:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000fc:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  40010c:	91 25 40 00 91 25 40 00 00 00 00 00 00 00 00 00     .%@..%@.........
  40011c:	00 00 00 00 91 25 40 00 91 25 40 00 91 25 40 00     .....%@..%@..%@.
  40012c:	91 25 40 00 91 25 40 00 00 00 00 00 91 25 40 00     .%@..%@......%@.
  40013c:	91 25 40 00                                         .%@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040043c 	.word	0x2040043c
  40015c:	00000000 	.word	0x00000000
  400160:	00402e24 	.word	0x00402e24

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402e24 	.word	0x00402e24
  4001a0:	20400440 	.word	0x20400440
  4001a4:	00402e24 	.word	0x00402e24
  4001a8:	00000000 	.word	0x00000000

004001ac <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	4603      	mov	r3, r0
  4001b4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4001b6:	4909      	ldr	r1, [pc, #36]	; (4001dc <NVIC_EnableIRQ+0x30>)
  4001b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4001bc:	095b      	lsrs	r3, r3, #5
  4001be:	79fa      	ldrb	r2, [r7, #7]
  4001c0:	f002 021f 	and.w	r2, r2, #31
  4001c4:	2001      	movs	r0, #1
  4001c6:	fa00 f202 	lsl.w	r2, r0, r2
  4001ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4001ce:	bf00      	nop
  4001d0:	370c      	adds	r7, #12
  4001d2:	46bd      	mov	sp, r7
  4001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d8:	4770      	bx	lr
  4001da:	bf00      	nop
  4001dc:	e000e100 	.word	0xe000e100

004001e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4001e0:	b480      	push	{r7}
  4001e2:	b083      	sub	sp, #12
  4001e4:	af00      	add	r7, sp, #0
  4001e6:	4603      	mov	r3, r0
  4001e8:	6039      	str	r1, [r7, #0]
  4001ea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4001ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4001f0:	2b00      	cmp	r3, #0
  4001f2:	da0b      	bge.n	40020c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4001f4:	490d      	ldr	r1, [pc, #52]	; (40022c <NVIC_SetPriority+0x4c>)
  4001f6:	79fb      	ldrb	r3, [r7, #7]
  4001f8:	f003 030f 	and.w	r3, r3, #15
  4001fc:	3b04      	subs	r3, #4
  4001fe:	683a      	ldr	r2, [r7, #0]
  400200:	b2d2      	uxtb	r2, r2
  400202:	0152      	lsls	r2, r2, #5
  400204:	b2d2      	uxtb	r2, r2
  400206:	440b      	add	r3, r1
  400208:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  40020a:	e009      	b.n	400220 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40020c:	4908      	ldr	r1, [pc, #32]	; (400230 <NVIC_SetPriority+0x50>)
  40020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400212:	683a      	ldr	r2, [r7, #0]
  400214:	b2d2      	uxtb	r2, r2
  400216:	0152      	lsls	r2, r2, #5
  400218:	b2d2      	uxtb	r2, r2
  40021a:	440b      	add	r3, r1
  40021c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400220:	bf00      	nop
  400222:	370c      	adds	r7, #12
  400224:	46bd      	mov	sp, r7
  400226:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022a:	4770      	bx	lr
  40022c:	e000ed00 	.word	0xe000ed00
  400230:	e000e100 	.word	0xe000e100

00400234 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400234:	b480      	push	{r7}
  400236:	b083      	sub	sp, #12
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d825      	bhi.n	40028e <osc_get_rate+0x5a>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_get_rate+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026f 	.word	0x0040026f
  400250:	00400275 	.word	0x00400275
  400254:	0040027b 	.word	0x0040027b
  400258:	0040027f 	.word	0x0040027f
  40025c:	00400283 	.word	0x00400283
  400260:	00400287 	.word	0x00400287
  400264:	0040028b 	.word	0x0040028b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400268:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40026c:	e010      	b.n	400290 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40026e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400272:	e00d      	b.n	400290 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400278:	e00a      	b.n	400290 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40027a:	4b08      	ldr	r3, [pc, #32]	; (40029c <osc_get_rate+0x68>)
  40027c:	e008      	b.n	400290 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_get_rate+0x6c>)
  400280:	e006      	b.n	400290 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400282:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <osc_get_rate+0x70>)
  400284:	e004      	b.n	400290 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400286:	4b07      	ldr	r3, [pc, #28]	; (4002a4 <osc_get_rate+0x70>)
  400288:	e002      	b.n	400290 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40028a:	4b06      	ldr	r3, [pc, #24]	; (4002a4 <osc_get_rate+0x70>)
  40028c:	e000      	b.n	400290 <osc_get_rate+0x5c>
	}

	return 0;
  40028e:	2300      	movs	r3, #0
}
  400290:	4618      	mov	r0, r3
  400292:	370c      	adds	r7, #12
  400294:	46bd      	mov	sp, r7
  400296:	f85d 7b04 	ldr.w	r7, [sp], #4
  40029a:	4770      	bx	lr
  40029c:	003d0900 	.word	0x003d0900
  4002a0:	007a1200 	.word	0x007a1200
  4002a4:	00b71b00 	.word	0x00b71b00

004002a8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4002a8:	b580      	push	{r7, lr}
  4002aa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4002ac:	2006      	movs	r0, #6
  4002ae:	4b05      	ldr	r3, [pc, #20]	; (4002c4 <sysclk_get_main_hz+0x1c>)
  4002b0:	4798      	blx	r3
  4002b2:	4602      	mov	r2, r0
  4002b4:	4613      	mov	r3, r2
  4002b6:	009b      	lsls	r3, r3, #2
  4002b8:	4413      	add	r3, r2
  4002ba:	009a      	lsls	r2, r3, #2
  4002bc:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4002be:	4618      	mov	r0, r3
  4002c0:	bd80      	pop	{r7, pc}
  4002c2:	bf00      	nop
  4002c4:	00400235 	.word	0x00400235

004002c8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4002c8:	b580      	push	{r7, lr}
  4002ca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <sysclk_get_cpu_hz+0x10>)
  4002ce:	4798      	blx	r3
  4002d0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4002d2:	4618      	mov	r0, r3
  4002d4:	bd80      	pop	{r7, pc}
  4002d6:	bf00      	nop
  4002d8:	004002a9 	.word	0x004002a9

004002dc <TC_init>:
#include "helpers.h"
/************************************************************************/
/* timers                                                              */
/************************************************************************/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4002dc:	b590      	push	{r4, r7, lr}
  4002de:	b08b      	sub	sp, #44	; 0x2c
  4002e0:	af02      	add	r7, sp, #8
  4002e2:	60f8      	str	r0, [r7, #12]
  4002e4:	60b9      	str	r1, [r7, #8]
  4002e6:	607a      	str	r2, [r7, #4]
  4002e8:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  4002ea:	4b1d      	ldr	r3, [pc, #116]	; (400360 <TC_init+0x84>)
  4002ec:	4798      	blx	r3
  4002ee:	61f8      	str	r0, [r7, #28]

	pmc_enable_periph_clk(ID_TC);
  4002f0:	68bb      	ldr	r3, [r7, #8]
  4002f2:	4618      	mov	r0, r3
  4002f4:	4b1b      	ldr	r3, [pc, #108]	; (400364 <TC_init+0x88>)
  4002f6:	4798      	blx	r3

	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4002f8:	6838      	ldr	r0, [r7, #0]
  4002fa:	f107 0114 	add.w	r1, r7, #20
  4002fe:	f107 0218 	add.w	r2, r7, #24
  400302:	69fb      	ldr	r3, [r7, #28]
  400304:	9300      	str	r3, [sp, #0]
  400306:	460b      	mov	r3, r1
  400308:	69f9      	ldr	r1, [r7, #28]
  40030a:	4c17      	ldr	r4, [pc, #92]	; (400368 <TC_init+0x8c>)
  40030c:	47a0      	blx	r4
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  40030e:	6879      	ldr	r1, [r7, #4]
  400310:	697b      	ldr	r3, [r7, #20]
  400312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400316:	461a      	mov	r2, r3
  400318:	68f8      	ldr	r0, [r7, #12]
  40031a:	4b14      	ldr	r3, [pc, #80]	; (40036c <TC_init+0x90>)
  40031c:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  40031e:	6879      	ldr	r1, [r7, #4]
  400320:	69bb      	ldr	r3, [r7, #24]
  400322:	69fa      	ldr	r2, [r7, #28]
  400324:	fbb2 f2f3 	udiv	r2, r2, r3
  400328:	683b      	ldr	r3, [r7, #0]
  40032a:	fbb2 f3f3 	udiv	r3, r2, r3
  40032e:	461a      	mov	r2, r3
  400330:	68f8      	ldr	r0, [r7, #12]
  400332:	4b0f      	ldr	r3, [pc, #60]	; (400370 <TC_init+0x94>)
  400334:	4798      	blx	r3

	NVIC_SetPriority(ID_TC, 4);
  400336:	68bb      	ldr	r3, [r7, #8]
  400338:	b25b      	sxtb	r3, r3
  40033a:	2104      	movs	r1, #4
  40033c:	4618      	mov	r0, r3
  40033e:	4b0d      	ldr	r3, [pc, #52]	; (400374 <TC_init+0x98>)
  400340:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
  400342:	68bb      	ldr	r3, [r7, #8]
  400344:	b25b      	sxtb	r3, r3
  400346:	4618      	mov	r0, r3
  400348:	4b0b      	ldr	r3, [pc, #44]	; (400378 <TC_init+0x9c>)
  40034a:	4798      	blx	r3
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	2210      	movs	r2, #16
  400350:	4619      	mov	r1, r3
  400352:	68f8      	ldr	r0, [r7, #12]
  400354:	4b09      	ldr	r3, [pc, #36]	; (40037c <TC_init+0xa0>)
  400356:	4798      	blx	r3
}
  400358:	bf00      	nop
  40035a:	3724      	adds	r7, #36	; 0x24
  40035c:	46bd      	mov	sp, r7
  40035e:	bd90      	pop	{r4, r7, pc}
  400360:	004002c9 	.word	0x004002c9
  400364:	004023d5 	.word	0x004023d5
  400368:	0040084f 	.word	0x0040084f
  40036c:	004007a3 	.word	0x004007a3
  400370:	004007dd 	.word	0x004007dd
  400374:	004001e1 	.word	0x004001e1
  400378:	004001ad 	.word	0x004001ad
  40037c:	00400803 	.word	0x00400803

00400380 <config_button>:

/************************************************************************/
/* configs                                                              */
/************************************************************************/

void config_button(Pio *p_pio, const uint32_t ul_mask, uint32_t ul_id, void (*p_handler) (uint32_t, uint32_t), int it_rise, int filter) {
  400380:	b590      	push	{r4, r7, lr}
  400382:	b089      	sub	sp, #36	; 0x24
  400384:	af02      	add	r7, sp, #8
  400386:	60f8      	str	r0, [r7, #12]
  400388:	60b9      	str	r1, [r7, #8]
  40038a:	607a      	str	r2, [r7, #4]
  40038c:	603b      	str	r3, [r7, #0]
	pmc_enable_periph_clk(ul_id);
  40038e:	6878      	ldr	r0, [r7, #4]
  400390:	4b1e      	ldr	r3, [pc, #120]	; (40040c <config_button+0x8c>)
  400392:	4798      	blx	r3
	filter ? pio_configure(p_pio, PIO_INPUT, ul_mask, PIO_PULLUP | PIO_DEBOUNCE) : pio_configure(p_pio, PIO_INPUT, ul_mask, PIO_DEFAULT);
  400394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400396:	2b00      	cmp	r3, #0
  400398:	d007      	beq.n	4003aa <config_button+0x2a>
  40039a:	2309      	movs	r3, #9
  40039c:	68ba      	ldr	r2, [r7, #8]
  40039e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4003a2:	68f8      	ldr	r0, [r7, #12]
  4003a4:	4c1a      	ldr	r4, [pc, #104]	; (400410 <config_button+0x90>)
  4003a6:	47a0      	blx	r4
  4003a8:	e006      	b.n	4003b8 <config_button+0x38>
  4003aa:	2300      	movs	r3, #0
  4003ac:	68ba      	ldr	r2, [r7, #8]
  4003ae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4003b2:	68f8      	ldr	r0, [r7, #12]
  4003b4:	4c16      	ldr	r4, [pc, #88]	; (400410 <config_button+0x90>)
  4003b6:	47a0      	blx	r4

	pio_set_debounce_filter(p_pio, ul_mask, 60);
  4003b8:	223c      	movs	r2, #60	; 0x3c
  4003ba:	68b9      	ldr	r1, [r7, #8]
  4003bc:	68f8      	ldr	r0, [r7, #12]
  4003be:	4b15      	ldr	r3, [pc, #84]	; (400414 <config_button+0x94>)
  4003c0:	4798      	blx	r3

	uint32_t but_attr = (it_rise ? PIO_IT_RISE_EDGE : PIO_IT_EDGE);
  4003c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4003c4:	2b00      	cmp	r3, #0
  4003c6:	d001      	beq.n	4003cc <config_button+0x4c>
  4003c8:	2370      	movs	r3, #112	; 0x70
  4003ca:	e000      	b.n	4003ce <config_button+0x4e>
  4003cc:	2340      	movs	r3, #64	; 0x40
  4003ce:	617b      	str	r3, [r7, #20]
	pio_handler_set(p_pio,
  4003d0:	683b      	ldr	r3, [r7, #0]
  4003d2:	9300      	str	r3, [sp, #0]
  4003d4:	697b      	ldr	r3, [r7, #20]
  4003d6:	68ba      	ldr	r2, [r7, #8]
  4003d8:	6879      	ldr	r1, [r7, #4]
  4003da:	68f8      	ldr	r0, [r7, #12]
  4003dc:	4c0e      	ldr	r4, [pc, #56]	; (400418 <config_button+0x98>)
  4003de:	47a0      	blx	r4
	ul_id,
	ul_mask,
	but_attr,
	p_handler);

	pio_enable_interrupt(p_pio, ul_mask);
  4003e0:	68b9      	ldr	r1, [r7, #8]
  4003e2:	68f8      	ldr	r0, [r7, #12]
  4003e4:	4b0d      	ldr	r3, [pc, #52]	; (40041c <config_button+0x9c>)
  4003e6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4003e8:	68f8      	ldr	r0, [r7, #12]
  4003ea:	4b0d      	ldr	r3, [pc, #52]	; (400420 <config_button+0xa0>)
  4003ec:	4798      	blx	r3
	
	NVIC_EnableIRQ(ul_id);
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	b25b      	sxtb	r3, r3
  4003f2:	4618      	mov	r0, r3
  4003f4:	4b0b      	ldr	r3, [pc, #44]	; (400424 <config_button+0xa4>)
  4003f6:	4798      	blx	r3
	NVIC_SetPriority(ul_id, 4);
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	b25b      	sxtb	r3, r3
  4003fc:	2104      	movs	r1, #4
  4003fe:	4618      	mov	r0, r3
  400400:	4b09      	ldr	r3, [pc, #36]	; (400428 <config_button+0xa8>)
  400402:	4798      	blx	r3
  400404:	bf00      	nop
  400406:	371c      	adds	r7, #28
  400408:	46bd      	mov	sp, r7
  40040a:	bd90      	pop	{r4, r7, pc}
  40040c:	004023d5 	.word	0x004023d5
  400410:	00401da5 	.word	0x00401da5
  400414:	00401b79 	.word	0x00401b79
  400418:	00401ff9 	.word	0x00401ff9
  40041c:	00401edd 	.word	0x00401edd
  400420:	00401f15 	.word	0x00401f15
  400424:	004001ad 	.word	0x004001ad
  400428:	004001e1 	.word	0x004001e1

0040042c <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  40042c:	b480      	push	{r7}
  40042e:	b083      	sub	sp, #12
  400430:	af00      	add	r7, sp, #0
  400432:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	68db      	ldr	r3, [r3, #12]
}
  400438:	4618      	mov	r0, r3
  40043a:	370c      	adds	r7, #12
  40043c:	46bd      	mov	sp, r7
  40043e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400442:	4770      	bx	lr

00400444 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  400444:	b480      	push	{r7}
  400446:	b083      	sub	sp, #12
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40044c:	687b      	ldr	r3, [r7, #4]
  40044e:	685b      	ldr	r3, [r3, #4]
  400450:	f003 0302 	and.w	r3, r3, #2
  400454:	2b00      	cmp	r3, #0
  400456:	d001      	beq.n	40045c <spi_get_peripheral_select_mode+0x18>
		return 1;
  400458:	2301      	movs	r3, #1
  40045a:	e000      	b.n	40045e <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  40045c:	2300      	movs	r3, #0
	}
}
  40045e:	4618      	mov	r0, r3
  400460:	370c      	adds	r7, #12
  400462:	46bd      	mov	sp, r7
  400464:	f85d 7b04 	ldr.w	r7, [sp], #4
  400468:	4770      	bx	lr
	...

0040046c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40046c:	b580      	push	{r7, lr}
  40046e:	b082      	sub	sp, #8
  400470:	af00      	add	r7, sp, #0
  400472:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400474:	6878      	ldr	r0, [r7, #4]
  400476:	4b03      	ldr	r3, [pc, #12]	; (400484 <sysclk_enable_peripheral_clock+0x18>)
  400478:	4798      	blx	r3
}
  40047a:	bf00      	nop
  40047c:	3708      	adds	r7, #8
  40047e:	46bd      	mov	sp, r7
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	004023d5 	.word	0x004023d5

00400488 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400488:	b580      	push	{r7, lr}
  40048a:	b082      	sub	sp, #8
  40048c:	af00      	add	r7, sp, #0
  40048e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	4a09      	ldr	r2, [pc, #36]	; (4004b8 <spi_enable_clock+0x30>)
  400494:	4293      	cmp	r3, r2
  400496:	d103      	bne.n	4004a0 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  400498:	2015      	movs	r0, #21
  40049a:	4b08      	ldr	r3, [pc, #32]	; (4004bc <spi_enable_clock+0x34>)
  40049c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40049e:	e006      	b.n	4004ae <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4004a0:	687b      	ldr	r3, [r7, #4]
  4004a2:	4a07      	ldr	r2, [pc, #28]	; (4004c0 <spi_enable_clock+0x38>)
  4004a4:	4293      	cmp	r3, r2
  4004a6:	d102      	bne.n	4004ae <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4004a8:	202a      	movs	r0, #42	; 0x2a
  4004aa:	4b04      	ldr	r3, [pc, #16]	; (4004bc <spi_enable_clock+0x34>)
  4004ac:	4798      	blx	r3
}
  4004ae:	bf00      	nop
  4004b0:	3708      	adds	r7, #8
  4004b2:	46bd      	mov	sp, r7
  4004b4:	bd80      	pop	{r7, pc}
  4004b6:	bf00      	nop
  4004b8:	40008000 	.word	0x40008000
  4004bc:	0040046d 	.word	0x0040046d
  4004c0:	40058000 	.word	0x40058000

004004c4 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4004c4:	b480      	push	{r7}
  4004c6:	b083      	sub	sp, #12
  4004c8:	af00      	add	r7, sp, #0
  4004ca:	6078      	str	r0, [r7, #4]
  4004cc:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4004ce:	687b      	ldr	r3, [r7, #4]
  4004d0:	685b      	ldr	r3, [r3, #4]
  4004d2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4004d6:	687b      	ldr	r3, [r7, #4]
  4004d8:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4004da:	687b      	ldr	r3, [r7, #4]
  4004dc:	685a      	ldr	r2, [r3, #4]
  4004de:	683b      	ldr	r3, [r7, #0]
  4004e0:	041b      	lsls	r3, r3, #16
  4004e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4004e6:	431a      	orrs	r2, r3
  4004e8:	687b      	ldr	r3, [r7, #4]
  4004ea:	605a      	str	r2, [r3, #4]
}
  4004ec:	bf00      	nop
  4004ee:	370c      	adds	r7, #12
  4004f0:	46bd      	mov	sp, r7
  4004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004f6:	4770      	bx	lr

004004f8 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4004f8:	b580      	push	{r7, lr}
  4004fa:	b084      	sub	sp, #16
  4004fc:	af00      	add	r7, sp, #0
  4004fe:	6078      	str	r0, [r7, #4]
  400500:	4608      	mov	r0, r1
  400502:	4611      	mov	r1, r2
  400504:	461a      	mov	r2, r3
  400506:	4603      	mov	r3, r0
  400508:	807b      	strh	r3, [r7, #2]
  40050a:	460b      	mov	r3, r1
  40050c:	707b      	strb	r3, [r7, #1]
  40050e:	4613      	mov	r3, r2
  400510:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  400512:	f643 2398 	movw	r3, #15000	; 0x3a98
  400516:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400518:	e006      	b.n	400528 <spi_write+0x30>
		if (!timeout--) {
  40051a:	68fb      	ldr	r3, [r7, #12]
  40051c:	1e5a      	subs	r2, r3, #1
  40051e:	60fa      	str	r2, [r7, #12]
  400520:	2b00      	cmp	r3, #0
  400522:	d101      	bne.n	400528 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  400524:	2301      	movs	r3, #1
  400526:	e020      	b.n	40056a <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400528:	687b      	ldr	r3, [r7, #4]
  40052a:	691b      	ldr	r3, [r3, #16]
  40052c:	f003 0302 	and.w	r3, r3, #2
  400530:	2b00      	cmp	r3, #0
  400532:	d0f2      	beq.n	40051a <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400534:	6878      	ldr	r0, [r7, #4]
  400536:	4b0f      	ldr	r3, [pc, #60]	; (400574 <spi_write+0x7c>)
  400538:	4798      	blx	r3
  40053a:	4603      	mov	r3, r0
  40053c:	2b00      	cmp	r3, #0
  40053e:	d00e      	beq.n	40055e <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400540:	887a      	ldrh	r2, [r7, #2]
  400542:	787b      	ldrb	r3, [r7, #1]
  400544:	041b      	lsls	r3, r3, #16
  400546:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40054a:	4313      	orrs	r3, r2
  40054c:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40054e:	783b      	ldrb	r3, [r7, #0]
  400550:	2b00      	cmp	r3, #0
  400552:	d006      	beq.n	400562 <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  400554:	68bb      	ldr	r3, [r7, #8]
  400556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40055a:	60bb      	str	r3, [r7, #8]
  40055c:	e001      	b.n	400562 <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40055e:	887b      	ldrh	r3, [r7, #2]
  400560:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  400562:	687b      	ldr	r3, [r7, #4]
  400564:	68ba      	ldr	r2, [r7, #8]
  400566:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  400568:	2300      	movs	r3, #0
}
  40056a:	4618      	mov	r0, r3
  40056c:	3710      	adds	r7, #16
  40056e:	46bd      	mov	sp, r7
  400570:	bd80      	pop	{r7, pc}
  400572:	bf00      	nop
  400574:	00400445 	.word	0x00400445

00400578 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  400578:	b480      	push	{r7}
  40057a:	b085      	sub	sp, #20
  40057c:	af00      	add	r7, sp, #0
  40057e:	60f8      	str	r0, [r7, #12]
  400580:	60b9      	str	r1, [r7, #8]
  400582:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  400584:	687b      	ldr	r3, [r7, #4]
  400586:	2b00      	cmp	r3, #0
  400588:	d00c      	beq.n	4005a4 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40058a:	68fb      	ldr	r3, [r7, #12]
  40058c:	68ba      	ldr	r2, [r7, #8]
  40058e:	320c      	adds	r2, #12
  400590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400594:	f043 0101 	orr.w	r1, r3, #1
  400598:	68fb      	ldr	r3, [r7, #12]
  40059a:	68ba      	ldr	r2, [r7, #8]
  40059c:	320c      	adds	r2, #12
  40059e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4005a2:	e00b      	b.n	4005bc <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4005a4:	68fb      	ldr	r3, [r7, #12]
  4005a6:	68ba      	ldr	r2, [r7, #8]
  4005a8:	320c      	adds	r2, #12
  4005aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005ae:	f023 0101 	bic.w	r1, r3, #1
  4005b2:	68fb      	ldr	r3, [r7, #12]
  4005b4:	68ba      	ldr	r2, [r7, #8]
  4005b6:	320c      	adds	r2, #12
  4005b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4005bc:	bf00      	nop
  4005be:	3714      	adds	r7, #20
  4005c0:	46bd      	mov	sp, r7
  4005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c6:	4770      	bx	lr

004005c8 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4005c8:	b480      	push	{r7}
  4005ca:	b085      	sub	sp, #20
  4005cc:	af00      	add	r7, sp, #0
  4005ce:	60f8      	str	r0, [r7, #12]
  4005d0:	60b9      	str	r1, [r7, #8]
  4005d2:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4005d4:	687b      	ldr	r3, [r7, #4]
  4005d6:	2b00      	cmp	r3, #0
  4005d8:	d00c      	beq.n	4005f4 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4005da:	68fb      	ldr	r3, [r7, #12]
  4005dc:	68ba      	ldr	r2, [r7, #8]
  4005de:	320c      	adds	r2, #12
  4005e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005e4:	f043 0102 	orr.w	r1, r3, #2
  4005e8:	68fb      	ldr	r3, [r7, #12]
  4005ea:	68ba      	ldr	r2, [r7, #8]
  4005ec:	320c      	adds	r2, #12
  4005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  4005f2:	e00b      	b.n	40060c <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	68ba      	ldr	r2, [r7, #8]
  4005f8:	320c      	adds	r2, #12
  4005fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005fe:	f023 0102 	bic.w	r1, r3, #2
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	68ba      	ldr	r2, [r7, #8]
  400606:	320c      	adds	r2, #12
  400608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40060c:	bf00      	nop
  40060e:	3714      	adds	r7, #20
  400610:	46bd      	mov	sp, r7
  400612:	f85d 7b04 	ldr.w	r7, [sp], #4
  400616:	4770      	bx	lr

00400618 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400618:	b480      	push	{r7}
  40061a:	b085      	sub	sp, #20
  40061c:	af00      	add	r7, sp, #0
  40061e:	60f8      	str	r0, [r7, #12]
  400620:	60b9      	str	r1, [r7, #8]
  400622:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400624:	687b      	ldr	r3, [r7, #4]
  400626:	2b04      	cmp	r3, #4
  400628:	d118      	bne.n	40065c <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40062a:	68fb      	ldr	r3, [r7, #12]
  40062c:	68ba      	ldr	r2, [r7, #8]
  40062e:	320c      	adds	r2, #12
  400630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400634:	f023 0108 	bic.w	r1, r3, #8
  400638:	68fb      	ldr	r3, [r7, #12]
  40063a:	68ba      	ldr	r2, [r7, #8]
  40063c:	320c      	adds	r2, #12
  40063e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400642:	68fb      	ldr	r3, [r7, #12]
  400644:	68ba      	ldr	r2, [r7, #8]
  400646:	320c      	adds	r2, #12
  400648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40064c:	f043 0104 	orr.w	r1, r3, #4
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	68ba      	ldr	r2, [r7, #8]
  400654:	320c      	adds	r2, #12
  400656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  40065a:	e02a      	b.n	4006b2 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40065c:	687b      	ldr	r3, [r7, #4]
  40065e:	2b00      	cmp	r3, #0
  400660:	d118      	bne.n	400694 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	68ba      	ldr	r2, [r7, #8]
  400666:	320c      	adds	r2, #12
  400668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40066c:	f023 0108 	bic.w	r1, r3, #8
  400670:	68fb      	ldr	r3, [r7, #12]
  400672:	68ba      	ldr	r2, [r7, #8]
  400674:	320c      	adds	r2, #12
  400676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	68ba      	ldr	r2, [r7, #8]
  40067e:	320c      	adds	r2, #12
  400680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400684:	f023 0104 	bic.w	r1, r3, #4
  400688:	68fb      	ldr	r3, [r7, #12]
  40068a:	68ba      	ldr	r2, [r7, #8]
  40068c:	320c      	adds	r2, #12
  40068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400692:	e00e      	b.n	4006b2 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400694:	687b      	ldr	r3, [r7, #4]
  400696:	2b08      	cmp	r3, #8
  400698:	d10b      	bne.n	4006b2 <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40069a:	68fb      	ldr	r3, [r7, #12]
  40069c:	68ba      	ldr	r2, [r7, #8]
  40069e:	320c      	adds	r2, #12
  4006a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4006a4:	f043 0108 	orr.w	r1, r3, #8
  4006a8:	68fb      	ldr	r3, [r7, #12]
  4006aa:	68ba      	ldr	r2, [r7, #8]
  4006ac:	320c      	adds	r2, #12
  4006ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4006b2:	bf00      	nop
  4006b4:	3714      	adds	r7, #20
  4006b6:	46bd      	mov	sp, r7
  4006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006bc:	4770      	bx	lr

004006be <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4006be:	b480      	push	{r7}
  4006c0:	b085      	sub	sp, #20
  4006c2:	af00      	add	r7, sp, #0
  4006c4:	60f8      	str	r0, [r7, #12]
  4006c6:	60b9      	str	r1, [r7, #8]
  4006c8:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4006ca:	68fb      	ldr	r3, [r7, #12]
  4006cc:	68ba      	ldr	r2, [r7, #8]
  4006ce:	320c      	adds	r2, #12
  4006d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4006d4:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  4006d8:	68fb      	ldr	r3, [r7, #12]
  4006da:	68ba      	ldr	r2, [r7, #8]
  4006dc:	320c      	adds	r2, #12
  4006de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	68ba      	ldr	r2, [r7, #8]
  4006e6:	320c      	adds	r2, #12
  4006e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4006ec:	687b      	ldr	r3, [r7, #4]
  4006ee:	ea42 0103 	orr.w	r1, r2, r3
  4006f2:	68fb      	ldr	r3, [r7, #12]
  4006f4:	68ba      	ldr	r2, [r7, #8]
  4006f6:	320c      	adds	r2, #12
  4006f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4006fc:	bf00      	nop
  4006fe:	3714      	adds	r7, #20
  400700:	46bd      	mov	sp, r7
  400702:	f85d 7b04 	ldr.w	r7, [sp], #4
  400706:	4770      	bx	lr

00400708 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400708:	b480      	push	{r7}
  40070a:	b085      	sub	sp, #20
  40070c:	af00      	add	r7, sp, #0
  40070e:	6078      	str	r0, [r7, #4]
  400710:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  400712:	683a      	ldr	r2, [r7, #0]
  400714:	687b      	ldr	r3, [r7, #4]
  400716:	4413      	add	r3, r2
  400718:	1e5a      	subs	r2, r3, #1
  40071a:	687b      	ldr	r3, [r7, #4]
  40071c:	fbb2 f3f3 	udiv	r3, r2, r3
  400720:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400722:	68fb      	ldr	r3, [r7, #12]
  400724:	2b00      	cmp	r3, #0
  400726:	dd02      	ble.n	40072e <spi_calc_baudrate_div+0x26>
  400728:	68fb      	ldr	r3, [r7, #12]
  40072a:	2bff      	cmp	r3, #255	; 0xff
  40072c:	dd02      	ble.n	400734 <spi_calc_baudrate_div+0x2c>
		return -1;
  40072e:	f04f 33ff 	mov.w	r3, #4294967295
  400732:	e001      	b.n	400738 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  400734:	68fb      	ldr	r3, [r7, #12]
  400736:	b21b      	sxth	r3, r3
}
  400738:	4618      	mov	r0, r3
  40073a:	3714      	adds	r7, #20
  40073c:	46bd      	mov	sp, r7
  40073e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400742:	4770      	bx	lr

00400744 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400744:	b480      	push	{r7}
  400746:	b085      	sub	sp, #20
  400748:	af00      	add	r7, sp, #0
  40074a:	60f8      	str	r0, [r7, #12]
  40074c:	60b9      	str	r1, [r7, #8]
  40074e:	4613      	mov	r3, r2
  400750:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400752:	79fb      	ldrb	r3, [r7, #7]
  400754:	2b00      	cmp	r3, #0
  400756:	d102      	bne.n	40075e <spi_set_baudrate_div+0x1a>
        return -1;
  400758:	f04f 33ff 	mov.w	r3, #4294967295
  40075c:	e01b      	b.n	400796 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40075e:	68fb      	ldr	r3, [r7, #12]
  400760:	68ba      	ldr	r2, [r7, #8]
  400762:	320c      	adds	r2, #12
  400764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400768:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  40076c:	68fb      	ldr	r3, [r7, #12]
  40076e:	68ba      	ldr	r2, [r7, #8]
  400770:	320c      	adds	r2, #12
  400772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400776:	68fb      	ldr	r3, [r7, #12]
  400778:	68ba      	ldr	r2, [r7, #8]
  40077a:	320c      	adds	r2, #12
  40077c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  400780:	79fb      	ldrb	r3, [r7, #7]
  400782:	021b      	lsls	r3, r3, #8
  400784:	b29b      	uxth	r3, r3
  400786:	ea42 0103 	orr.w	r1, r2, r3
  40078a:	68fb      	ldr	r3, [r7, #12]
  40078c:	68ba      	ldr	r2, [r7, #8]
  40078e:	320c      	adds	r2, #12
  400790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  400794:	2300      	movs	r3, #0
}
  400796:	4618      	mov	r0, r3
  400798:	3714      	adds	r7, #20
  40079a:	46bd      	mov	sp, r7
  40079c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007a0:	4770      	bx	lr

004007a2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4007a2:	b480      	push	{r7}
  4007a4:	b087      	sub	sp, #28
  4007a6:	af00      	add	r7, sp, #0
  4007a8:	60f8      	str	r0, [r7, #12]
  4007aa:	60b9      	str	r1, [r7, #8]
  4007ac:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4007ae:	68fa      	ldr	r2, [r7, #12]
  4007b0:	68bb      	ldr	r3, [r7, #8]
  4007b2:	019b      	lsls	r3, r3, #6
  4007b4:	4413      	add	r3, r2
  4007b6:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4007b8:	697b      	ldr	r3, [r7, #20]
  4007ba:	2202      	movs	r2, #2
  4007bc:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4007be:	697b      	ldr	r3, [r7, #20]
  4007c0:	f04f 32ff 	mov.w	r2, #4294967295
  4007c4:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4007c6:	697b      	ldr	r3, [r7, #20]
  4007c8:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4007ca:	697b      	ldr	r3, [r7, #20]
  4007cc:	687a      	ldr	r2, [r7, #4]
  4007ce:	605a      	str	r2, [r3, #4]
}
  4007d0:	bf00      	nop
  4007d2:	371c      	adds	r7, #28
  4007d4:	46bd      	mov	sp, r7
  4007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007da:	4770      	bx	lr

004007dc <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4007dc:	b480      	push	{r7}
  4007de:	b085      	sub	sp, #20
  4007e0:	af00      	add	r7, sp, #0
  4007e2:	60f8      	str	r0, [r7, #12]
  4007e4:	60b9      	str	r1, [r7, #8]
  4007e6:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4007e8:	68fa      	ldr	r2, [r7, #12]
  4007ea:	68bb      	ldr	r3, [r7, #8]
  4007ec:	019b      	lsls	r3, r3, #6
  4007ee:	4413      	add	r3, r2
  4007f0:	331c      	adds	r3, #28
  4007f2:	687a      	ldr	r2, [r7, #4]
  4007f4:	601a      	str	r2, [r3, #0]
}
  4007f6:	bf00      	nop
  4007f8:	3714      	adds	r7, #20
  4007fa:	46bd      	mov	sp, r7
  4007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400800:	4770      	bx	lr

00400802 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400802:	b480      	push	{r7}
  400804:	b087      	sub	sp, #28
  400806:	af00      	add	r7, sp, #0
  400808:	60f8      	str	r0, [r7, #12]
  40080a:	60b9      	str	r1, [r7, #8]
  40080c:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40080e:	68fa      	ldr	r2, [r7, #12]
  400810:	68bb      	ldr	r3, [r7, #8]
  400812:	019b      	lsls	r3, r3, #6
  400814:	4413      	add	r3, r2
  400816:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400818:	697b      	ldr	r3, [r7, #20]
  40081a:	687a      	ldr	r2, [r7, #4]
  40081c:	625a      	str	r2, [r3, #36]	; 0x24
}
  40081e:	bf00      	nop
  400820:	371c      	adds	r7, #28
  400822:	46bd      	mov	sp, r7
  400824:	f85d 7b04 	ldr.w	r7, [sp], #4
  400828:	4770      	bx	lr

0040082a <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40082a:	b480      	push	{r7}
  40082c:	b085      	sub	sp, #20
  40082e:	af00      	add	r7, sp, #0
  400830:	6078      	str	r0, [r7, #4]
  400832:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400834:	687a      	ldr	r2, [r7, #4]
  400836:	683b      	ldr	r3, [r7, #0]
  400838:	019b      	lsls	r3, r3, #6
  40083a:	4413      	add	r3, r2
  40083c:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	6a1b      	ldr	r3, [r3, #32]
}
  400842:	4618      	mov	r0, r3
  400844:	3714      	adds	r7, #20
  400846:	46bd      	mov	sp, r7
  400848:	f85d 7b04 	ldr.w	r7, [sp], #4
  40084c:	4770      	bx	lr

0040084e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40084e:	b480      	push	{r7}
  400850:	b08d      	sub	sp, #52	; 0x34
  400852:	af00      	add	r7, sp, #0
  400854:	60f8      	str	r0, [r7, #12]
  400856:	60b9      	str	r1, [r7, #8]
  400858:	607a      	str	r2, [r7, #4]
  40085a:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40085c:	2302      	movs	r3, #2
  40085e:	613b      	str	r3, [r7, #16]
  400860:	2308      	movs	r3, #8
  400862:	617b      	str	r3, [r7, #20]
  400864:	2320      	movs	r3, #32
  400866:	61bb      	str	r3, [r7, #24]
  400868:	2380      	movs	r3, #128	; 0x80
  40086a:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40086c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40086e:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400870:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400872:	2300      	movs	r3, #0
  400874:	62fb      	str	r3, [r7, #44]	; 0x2c
  400876:	e01a      	b.n	4008ae <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40087a:	009b      	lsls	r3, r3, #2
  40087c:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400880:	4413      	add	r3, r2
  400882:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400886:	68ba      	ldr	r2, [r7, #8]
  400888:	fbb2 f3f3 	udiv	r3, r2, r3
  40088c:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  40088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400890:	0c1b      	lsrs	r3, r3, #16
  400892:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400894:	68fa      	ldr	r2, [r7, #12]
  400896:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400898:	429a      	cmp	r2, r3
  40089a:	d901      	bls.n	4008a0 <tc_find_mck_divisor+0x52>
			return 0;
  40089c:	2300      	movs	r3, #0
  40089e:	e023      	b.n	4008e8 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4008a0:	68fa      	ldr	r2, [r7, #12]
  4008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008a4:	429a      	cmp	r2, r3
  4008a6:	d206      	bcs.n	4008b6 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4008a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008aa:	3301      	adds	r3, #1
  4008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  4008ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008b0:	2b04      	cmp	r3, #4
  4008b2:	d9e1      	bls.n	400878 <tc_find_mck_divisor+0x2a>
  4008b4:	e000      	b.n	4008b8 <tc_find_mck_divisor+0x6a>
			break;
  4008b6:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008ba:	2b04      	cmp	r3, #4
  4008bc:	d901      	bls.n	4008c2 <tc_find_mck_divisor+0x74>
		return 0;
  4008be:	2300      	movs	r3, #0
  4008c0:	e012      	b.n	4008e8 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  4008c2:	687b      	ldr	r3, [r7, #4]
  4008c4:	2b00      	cmp	r3, #0
  4008c6:	d008      	beq.n	4008da <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  4008c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008ca:	009b      	lsls	r3, r3, #2
  4008cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4008d0:	4413      	add	r3, r2
  4008d2:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4008d6:	687b      	ldr	r3, [r7, #4]
  4008d8:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4008da:	683b      	ldr	r3, [r7, #0]
  4008dc:	2b00      	cmp	r3, #0
  4008de:	d002      	beq.n	4008e6 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4008e0:	683b      	ldr	r3, [r7, #0]
  4008e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4008e4:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4008e6:	2301      	movs	r3, #1
}
  4008e8:	4618      	mov	r0, r3
  4008ea:	3734      	adds	r7, #52	; 0x34
  4008ec:	46bd      	mov	sp, r7
  4008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008f2:	4770      	bx	lr

004008f4 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  4008f4:	b480      	push	{r7}
  4008f6:	b083      	sub	sp, #12
  4008f8:	af00      	add	r7, sp, #0
  4008fa:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  4008fc:	4a04      	ldr	r2, [pc, #16]	; (400910 <gfx_mono_set_framebuffer+0x1c>)
  4008fe:	687b      	ldr	r3, [r7, #4]
  400900:	6013      	str	r3, [r2, #0]
}
  400902:	bf00      	nop
  400904:	370c      	adds	r7, #12
  400906:	46bd      	mov	sp, r7
  400908:	f85d 7b04 	ldr.w	r7, [sp], #4
  40090c:	4770      	bx	lr
  40090e:	bf00      	nop
  400910:	20400458 	.word	0x20400458

00400914 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  400914:	b480      	push	{r7}
  400916:	b083      	sub	sp, #12
  400918:	af00      	add	r7, sp, #0
  40091a:	4603      	mov	r3, r0
  40091c:	71fb      	strb	r3, [r7, #7]
  40091e:	460b      	mov	r3, r1
  400920:	71bb      	strb	r3, [r7, #6]
  400922:	4613      	mov	r3, r2
  400924:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400926:	4b08      	ldr	r3, [pc, #32]	; (400948 <gfx_mono_framebuffer_put_byte+0x34>)
  400928:	681a      	ldr	r2, [r3, #0]
  40092a:	79fb      	ldrb	r3, [r7, #7]
  40092c:	01db      	lsls	r3, r3, #7
  40092e:	4619      	mov	r1, r3
  400930:	79bb      	ldrb	r3, [r7, #6]
  400932:	440b      	add	r3, r1
  400934:	4413      	add	r3, r2
  400936:	797a      	ldrb	r2, [r7, #5]
  400938:	701a      	strb	r2, [r3, #0]
}
  40093a:	bf00      	nop
  40093c:	370c      	adds	r7, #12
  40093e:	46bd      	mov	sp, r7
  400940:	f85d 7b04 	ldr.w	r7, [sp], #4
  400944:	4770      	bx	lr
  400946:	bf00      	nop
  400948:	20400458 	.word	0x20400458

0040094c <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  40094c:	b480      	push	{r7}
  40094e:	b083      	sub	sp, #12
  400950:	af00      	add	r7, sp, #0
  400952:	4603      	mov	r3, r0
  400954:	460a      	mov	r2, r1
  400956:	71fb      	strb	r3, [r7, #7]
  400958:	4613      	mov	r3, r2
  40095a:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  40095c:	4b07      	ldr	r3, [pc, #28]	; (40097c <gfx_mono_framebuffer_get_byte+0x30>)
  40095e:	681a      	ldr	r2, [r3, #0]
  400960:	79fb      	ldrb	r3, [r7, #7]
  400962:	01db      	lsls	r3, r3, #7
  400964:	4619      	mov	r1, r3
  400966:	79bb      	ldrb	r3, [r7, #6]
  400968:	440b      	add	r3, r1
  40096a:	4413      	add	r3, r2
  40096c:	781b      	ldrb	r3, [r3, #0]
}
  40096e:	4618      	mov	r0, r3
  400970:	370c      	adds	r7, #12
  400972:	46bd      	mov	sp, r7
  400974:	f85d 7b04 	ldr.w	r7, [sp], #4
  400978:	4770      	bx	lr
  40097a:	bf00      	nop
  40097c:	20400458 	.word	0x20400458

00400980 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400980:	b580      	push	{r7, lr}
  400982:	b082      	sub	sp, #8
  400984:	af00      	add	r7, sp, #0
  400986:	4603      	mov	r3, r0
  400988:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40098a:	79fb      	ldrb	r3, [r7, #7]
  40098c:	f003 030f 	and.w	r3, r3, #15
  400990:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400992:	79fb      	ldrb	r3, [r7, #7]
  400994:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400998:	b2db      	uxtb	r3, r3
  40099a:	4618      	mov	r0, r3
  40099c:	4b02      	ldr	r3, [pc, #8]	; (4009a8 <ssd1306_set_page_address+0x28>)
  40099e:	4798      	blx	r3
	
}
  4009a0:	bf00      	nop
  4009a2:	3708      	adds	r7, #8
  4009a4:	46bd      	mov	sp, r7
  4009a6:	bd80      	pop	{r7, pc}
  4009a8:	004011bd 	.word	0x004011bd

004009ac <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  4009ac:	b580      	push	{r7, lr}
  4009ae:	b082      	sub	sp, #8
  4009b0:	af00      	add	r7, sp, #0
  4009b2:	4603      	mov	r3, r0
  4009b4:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  4009b6:	79fb      	ldrb	r3, [r7, #7]
  4009b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4009bc:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4009be:	79fb      	ldrb	r3, [r7, #7]
  4009c0:	091b      	lsrs	r3, r3, #4
  4009c2:	b2db      	uxtb	r3, r3
  4009c4:	f043 0310 	orr.w	r3, r3, #16
  4009c8:	b2db      	uxtb	r3, r3
  4009ca:	4618      	mov	r0, r3
  4009cc:	4b06      	ldr	r3, [pc, #24]	; (4009e8 <ssd1306_set_column_address+0x3c>)
  4009ce:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4009d0:	79fb      	ldrb	r3, [r7, #7]
  4009d2:	f003 030f 	and.w	r3, r3, #15
  4009d6:	b2db      	uxtb	r3, r3
  4009d8:	4618      	mov	r0, r3
  4009da:	4b03      	ldr	r3, [pc, #12]	; (4009e8 <ssd1306_set_column_address+0x3c>)
  4009dc:	4798      	blx	r3
}
  4009de:	bf00      	nop
  4009e0:	3708      	adds	r7, #8
  4009e2:	46bd      	mov	sp, r7
  4009e4:	bd80      	pop	{r7, pc}
  4009e6:	bf00      	nop
  4009e8:	004011bd 	.word	0x004011bd

004009ec <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  4009ec:	b580      	push	{r7, lr}
  4009ee:	b082      	sub	sp, #8
  4009f0:	af00      	add	r7, sp, #0
  4009f2:	4603      	mov	r3, r0
  4009f4:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  4009f6:	79fb      	ldrb	r3, [r7, #7]
  4009f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4009fc:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4009fe:	79fb      	ldrb	r3, [r7, #7]
  400a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400a04:	b2db      	uxtb	r3, r3
  400a06:	4618      	mov	r0, r3
  400a08:	4b02      	ldr	r3, [pc, #8]	; (400a14 <ssd1306_set_display_start_line_address+0x28>)
  400a0a:	4798      	blx	r3
}
  400a0c:	bf00      	nop
  400a0e:	3708      	adds	r7, #8
  400a10:	46bd      	mov	sp, r7
  400a12:	bd80      	pop	{r7, pc}
  400a14:	004011bd 	.word	0x004011bd

00400a18 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400a18:	b590      	push	{r4, r7, lr}
  400a1a:	b083      	sub	sp, #12
  400a1c:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400a1e:	4812      	ldr	r0, [pc, #72]	; (400a68 <gfx_mono_ssd1306_init+0x50>)
  400a20:	4b12      	ldr	r3, [pc, #72]	; (400a6c <gfx_mono_ssd1306_init+0x54>)
  400a22:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400a24:	4b12      	ldr	r3, [pc, #72]	; (400a70 <gfx_mono_ssd1306_init+0x58>)
  400a26:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400a28:	2000      	movs	r0, #0
  400a2a:	4b12      	ldr	r3, [pc, #72]	; (400a74 <gfx_mono_ssd1306_init+0x5c>)
  400a2c:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a2e:	2300      	movs	r3, #0
  400a30:	71fb      	strb	r3, [r7, #7]
  400a32:	e012      	b.n	400a5a <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400a34:	2300      	movs	r3, #0
  400a36:	71bb      	strb	r3, [r7, #6]
  400a38:	e008      	b.n	400a4c <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400a3a:	79b9      	ldrb	r1, [r7, #6]
  400a3c:	79f8      	ldrb	r0, [r7, #7]
  400a3e:	2301      	movs	r3, #1
  400a40:	2200      	movs	r2, #0
  400a42:	4c0d      	ldr	r4, [pc, #52]	; (400a78 <gfx_mono_ssd1306_init+0x60>)
  400a44:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400a46:	79bb      	ldrb	r3, [r7, #6]
  400a48:	3301      	adds	r3, #1
  400a4a:	71bb      	strb	r3, [r7, #6]
  400a4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400a50:	2b00      	cmp	r3, #0
  400a52:	daf2      	bge.n	400a3a <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a54:	79fb      	ldrb	r3, [r7, #7]
  400a56:	3301      	adds	r3, #1
  400a58:	71fb      	strb	r3, [r7, #7]
  400a5a:	79fb      	ldrb	r3, [r7, #7]
  400a5c:	2b03      	cmp	r3, #3
  400a5e:	d9e9      	bls.n	400a34 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400a60:	bf00      	nop
  400a62:	370c      	adds	r7, #12
  400a64:	46bd      	mov	sp, r7
  400a66:	bd90      	pop	{r4, r7, pc}
  400a68:	2040045c 	.word	0x2040045c
  400a6c:	004008f5 	.word	0x004008f5
  400a70:	0040110d 	.word	0x0040110d
  400a74:	004009ed 	.word	0x004009ed
  400a78:	00400a7d 	.word	0x00400a7d

00400a7c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400a7c:	b590      	push	{r4, r7, lr}
  400a7e:	b083      	sub	sp, #12
  400a80:	af00      	add	r7, sp, #0
  400a82:	4604      	mov	r4, r0
  400a84:	4608      	mov	r0, r1
  400a86:	4611      	mov	r1, r2
  400a88:	461a      	mov	r2, r3
  400a8a:	4623      	mov	r3, r4
  400a8c:	71fb      	strb	r3, [r7, #7]
  400a8e:	4603      	mov	r3, r0
  400a90:	71bb      	strb	r3, [r7, #6]
  400a92:	460b      	mov	r3, r1
  400a94:	717b      	strb	r3, [r7, #5]
  400a96:	4613      	mov	r3, r2
  400a98:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400a9a:	793b      	ldrb	r3, [r7, #4]
  400a9c:	f083 0301 	eor.w	r3, r3, #1
  400aa0:	b2db      	uxtb	r3, r3
  400aa2:	2b00      	cmp	r3, #0
  400aa4:	d00a      	beq.n	400abc <gfx_mono_ssd1306_put_byte+0x40>
  400aa6:	79ba      	ldrb	r2, [r7, #6]
  400aa8:	79fb      	ldrb	r3, [r7, #7]
  400aaa:	4611      	mov	r1, r2
  400aac:	4618      	mov	r0, r3
  400aae:	4b0f      	ldr	r3, [pc, #60]	; (400aec <gfx_mono_ssd1306_put_byte+0x70>)
  400ab0:	4798      	blx	r3
  400ab2:	4603      	mov	r3, r0
  400ab4:	461a      	mov	r2, r3
  400ab6:	797b      	ldrb	r3, [r7, #5]
  400ab8:	4293      	cmp	r3, r2
  400aba:	d012      	beq.n	400ae2 <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400abc:	797a      	ldrb	r2, [r7, #5]
  400abe:	79b9      	ldrb	r1, [r7, #6]
  400ac0:	79fb      	ldrb	r3, [r7, #7]
  400ac2:	4618      	mov	r0, r3
  400ac4:	4b0a      	ldr	r3, [pc, #40]	; (400af0 <gfx_mono_ssd1306_put_byte+0x74>)
  400ac6:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400ac8:	79fb      	ldrb	r3, [r7, #7]
  400aca:	4618      	mov	r0, r3
  400acc:	4b09      	ldr	r3, [pc, #36]	; (400af4 <gfx_mono_ssd1306_put_byte+0x78>)
  400ace:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400ad0:	79bb      	ldrb	r3, [r7, #6]
  400ad2:	4618      	mov	r0, r3
  400ad4:	4b08      	ldr	r3, [pc, #32]	; (400af8 <gfx_mono_ssd1306_put_byte+0x7c>)
  400ad6:	4798      	blx	r3

	ssd1306_write_data(data);
  400ad8:	797b      	ldrb	r3, [r7, #5]
  400ada:	4618      	mov	r0, r3
  400adc:	4b07      	ldr	r3, [pc, #28]	; (400afc <gfx_mono_ssd1306_put_byte+0x80>)
  400ade:	4798      	blx	r3
  400ae0:	e000      	b.n	400ae4 <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400ae2:	bf00      	nop
}
  400ae4:	370c      	adds	r7, #12
  400ae6:	46bd      	mov	sp, r7
  400ae8:	bd90      	pop	{r4, r7, pc}
  400aea:	bf00      	nop
  400aec:	0040094d 	.word	0x0040094d
  400af0:	00400915 	.word	0x00400915
  400af4:	00400981 	.word	0x00400981
  400af8:	004009ad 	.word	0x004009ad
  400afc:	00401261 	.word	0x00401261

00400b00 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400b00:	b480      	push	{r7}
  400b02:	b083      	sub	sp, #12
  400b04:	af00      	add	r7, sp, #0
  400b06:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	2b07      	cmp	r3, #7
  400b0c:	d825      	bhi.n	400b5a <osc_get_rate+0x5a>
  400b0e:	a201      	add	r2, pc, #4	; (adr r2, 400b14 <osc_get_rate+0x14>)
  400b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b14:	00400b35 	.word	0x00400b35
  400b18:	00400b3b 	.word	0x00400b3b
  400b1c:	00400b41 	.word	0x00400b41
  400b20:	00400b47 	.word	0x00400b47
  400b24:	00400b4b 	.word	0x00400b4b
  400b28:	00400b4f 	.word	0x00400b4f
  400b2c:	00400b53 	.word	0x00400b53
  400b30:	00400b57 	.word	0x00400b57
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400b34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400b38:	e010      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b3e:	e00d      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b44:	e00a      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400b46:	4b08      	ldr	r3, [pc, #32]	; (400b68 <osc_get_rate+0x68>)
  400b48:	e008      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400b4a:	4b08      	ldr	r3, [pc, #32]	; (400b6c <osc_get_rate+0x6c>)
  400b4c:	e006      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400b4e:	4b08      	ldr	r3, [pc, #32]	; (400b70 <osc_get_rate+0x70>)
  400b50:	e004      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400b52:	4b07      	ldr	r3, [pc, #28]	; (400b70 <osc_get_rate+0x70>)
  400b54:	e002      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400b56:	4b06      	ldr	r3, [pc, #24]	; (400b70 <osc_get_rate+0x70>)
  400b58:	e000      	b.n	400b5c <osc_get_rate+0x5c>
	}

	return 0;
  400b5a:	2300      	movs	r3, #0
}
  400b5c:	4618      	mov	r0, r3
  400b5e:	370c      	adds	r7, #12
  400b60:	46bd      	mov	sp, r7
  400b62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b66:	4770      	bx	lr
  400b68:	003d0900 	.word	0x003d0900
  400b6c:	007a1200 	.word	0x007a1200
  400b70:	00b71b00 	.word	0x00b71b00

00400b74 <sysclk_get_main_hz>:
{
  400b74:	b580      	push	{r7, lr}
  400b76:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400b78:	2006      	movs	r0, #6
  400b7a:	4b05      	ldr	r3, [pc, #20]	; (400b90 <sysclk_get_main_hz+0x1c>)
  400b7c:	4798      	blx	r3
  400b7e:	4602      	mov	r2, r0
  400b80:	4613      	mov	r3, r2
  400b82:	009b      	lsls	r3, r3, #2
  400b84:	4413      	add	r3, r2
  400b86:	009a      	lsls	r2, r3, #2
  400b88:	4413      	add	r3, r2
}
  400b8a:	4618      	mov	r0, r3
  400b8c:	bd80      	pop	{r7, pc}
  400b8e:	bf00      	nop
  400b90:	00400b01 	.word	0x00400b01

00400b94 <sysclk_get_cpu_hz>:
{
  400b94:	b580      	push	{r7, lr}
  400b96:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400b98:	4b02      	ldr	r3, [pc, #8]	; (400ba4 <sysclk_get_cpu_hz+0x10>)
  400b9a:	4798      	blx	r3
  400b9c:	4603      	mov	r3, r0
}
  400b9e:	4618      	mov	r0, r3
  400ba0:	bd80      	pop	{r7, pc}
  400ba2:	bf00      	nop
  400ba4:	00400b75 	.word	0x00400b75

00400ba8 <sysclk_get_peripheral_hz>:
{
  400ba8:	b580      	push	{r7, lr}
  400baa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400bac:	4b02      	ldr	r3, [pc, #8]	; (400bb8 <sysclk_get_peripheral_hz+0x10>)
  400bae:	4798      	blx	r3
  400bb0:	4603      	mov	r3, r0
  400bb2:	085b      	lsrs	r3, r3, #1
}
  400bb4:	4618      	mov	r0, r3
  400bb6:	bd80      	pop	{r7, pc}
  400bb8:	00400b75 	.word	0x00400b75

00400bbc <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400bbc:	b480      	push	{r7}
  400bbe:	b089      	sub	sp, #36	; 0x24
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	6078      	str	r0, [r7, #4]
  400bc4:	687b      	ldr	r3, [r7, #4]
  400bc6:	61fb      	str	r3, [r7, #28]
  400bc8:	69fb      	ldr	r3, [r7, #28]
  400bca:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400bcc:	69bb      	ldr	r3, [r7, #24]
  400bce:	095a      	lsrs	r2, r3, #5
  400bd0:	69fb      	ldr	r3, [r7, #28]
  400bd2:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400bd4:	697b      	ldr	r3, [r7, #20]
  400bd6:	f003 031f 	and.w	r3, r3, #31
  400bda:	2101      	movs	r1, #1
  400bdc:	fa01 f303 	lsl.w	r3, r1, r3
  400be0:	613a      	str	r2, [r7, #16]
  400be2:	60fb      	str	r3, [r7, #12]
  400be4:	693b      	ldr	r3, [r7, #16]
  400be6:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400be8:	68ba      	ldr	r2, [r7, #8]
  400bea:	4b06      	ldr	r3, [pc, #24]	; (400c04 <ioport_enable_pin+0x48>)
  400bec:	4413      	add	r3, r2
  400bee:	025b      	lsls	r3, r3, #9
  400bf0:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400bf2:	68fb      	ldr	r3, [r7, #12]
  400bf4:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  400bf6:	bf00      	nop
  400bf8:	3724      	adds	r7, #36	; 0x24
  400bfa:	46bd      	mov	sp, r7
  400bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c00:	4770      	bx	lr
  400c02:	bf00      	nop
  400c04:	00200707 	.word	0x00200707

00400c08 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400c08:	b480      	push	{r7}
  400c0a:	b08d      	sub	sp, #52	; 0x34
  400c0c:	af00      	add	r7, sp, #0
  400c0e:	6078      	str	r0, [r7, #4]
  400c10:	6039      	str	r1, [r7, #0]
  400c12:	687b      	ldr	r3, [r7, #4]
  400c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  400c16:	683b      	ldr	r3, [r7, #0]
  400c18:	62bb      	str	r3, [r7, #40]	; 0x28
  400c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c1c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c20:	095a      	lsrs	r2, r3, #5
  400c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c24:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400c26:	6a3b      	ldr	r3, [r7, #32]
  400c28:	f003 031f 	and.w	r3, r3, #31
  400c2c:	2101      	movs	r1, #1
  400c2e:	fa01 f303 	lsl.w	r3, r1, r3
  400c32:	61fa      	str	r2, [r7, #28]
  400c34:	61bb      	str	r3, [r7, #24]
  400c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400c38:	617b      	str	r3, [r7, #20]
  400c3a:	69fb      	ldr	r3, [r7, #28]
  400c3c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c3e:	693a      	ldr	r2, [r7, #16]
  400c40:	4b37      	ldr	r3, [pc, #220]	; (400d20 <ioport_set_pin_mode+0x118>)
  400c42:	4413      	add	r3, r2
  400c44:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400c46:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400c48:	697b      	ldr	r3, [r7, #20]
  400c4a:	f003 0308 	and.w	r3, r3, #8
  400c4e:	2b00      	cmp	r3, #0
  400c50:	d003      	beq.n	400c5a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400c52:	68fb      	ldr	r3, [r7, #12]
  400c54:	69ba      	ldr	r2, [r7, #24]
  400c56:	665a      	str	r2, [r3, #100]	; 0x64
  400c58:	e002      	b.n	400c60 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400c5a:	68fb      	ldr	r3, [r7, #12]
  400c5c:	69ba      	ldr	r2, [r7, #24]
  400c5e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400c60:	697b      	ldr	r3, [r7, #20]
  400c62:	f003 0310 	and.w	r3, r3, #16
  400c66:	2b00      	cmp	r3, #0
  400c68:	d004      	beq.n	400c74 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400c6a:	68fb      	ldr	r3, [r7, #12]
  400c6c:	69ba      	ldr	r2, [r7, #24]
  400c6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400c72:	e003      	b.n	400c7c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400c74:	68fb      	ldr	r3, [r7, #12]
  400c76:	69ba      	ldr	r2, [r7, #24]
  400c78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400c7c:	697b      	ldr	r3, [r7, #20]
  400c7e:	f003 0320 	and.w	r3, r3, #32
  400c82:	2b00      	cmp	r3, #0
  400c84:	d003      	beq.n	400c8e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400c86:	68fb      	ldr	r3, [r7, #12]
  400c88:	69ba      	ldr	r2, [r7, #24]
  400c8a:	651a      	str	r2, [r3, #80]	; 0x50
  400c8c:	e002      	b.n	400c94 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400c8e:	68fb      	ldr	r3, [r7, #12]
  400c90:	69ba      	ldr	r2, [r7, #24]
  400c92:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400c94:	697b      	ldr	r3, [r7, #20]
  400c96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400c9a:	2b00      	cmp	r3, #0
  400c9c:	d003      	beq.n	400ca6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400c9e:	68fb      	ldr	r3, [r7, #12]
  400ca0:	69ba      	ldr	r2, [r7, #24]
  400ca2:	621a      	str	r2, [r3, #32]
  400ca4:	e002      	b.n	400cac <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400ca6:	68fb      	ldr	r3, [r7, #12]
  400ca8:	69ba      	ldr	r2, [r7, #24]
  400caa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400cac:	697b      	ldr	r3, [r7, #20]
  400cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400cb2:	2b00      	cmp	r3, #0
  400cb4:	d004      	beq.n	400cc0 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400cb6:	68fb      	ldr	r3, [r7, #12]
  400cb8:	69ba      	ldr	r2, [r7, #24]
  400cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400cbe:	e003      	b.n	400cc8 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400cc0:	68fb      	ldr	r3, [r7, #12]
  400cc2:	69ba      	ldr	r2, [r7, #24]
  400cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400cc8:	697b      	ldr	r3, [r7, #20]
  400cca:	f003 0301 	and.w	r3, r3, #1
  400cce:	2b00      	cmp	r3, #0
  400cd0:	d006      	beq.n	400ce0 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400cd2:	68fb      	ldr	r3, [r7, #12]
  400cd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400cd6:	69bb      	ldr	r3, [r7, #24]
  400cd8:	431a      	orrs	r2, r3
  400cda:	68fb      	ldr	r3, [r7, #12]
  400cdc:	671a      	str	r2, [r3, #112]	; 0x70
  400cde:	e006      	b.n	400cee <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400ce0:	68fb      	ldr	r3, [r7, #12]
  400ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ce4:	69bb      	ldr	r3, [r7, #24]
  400ce6:	43db      	mvns	r3, r3
  400ce8:	401a      	ands	r2, r3
  400cea:	68fb      	ldr	r3, [r7, #12]
  400cec:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400cee:	697b      	ldr	r3, [r7, #20]
  400cf0:	f003 0302 	and.w	r3, r3, #2
  400cf4:	2b00      	cmp	r3, #0
  400cf6:	d006      	beq.n	400d06 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400cf8:	68fb      	ldr	r3, [r7, #12]
  400cfa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400cfc:	69bb      	ldr	r3, [r7, #24]
  400cfe:	431a      	orrs	r2, r3
  400d00:	68fb      	ldr	r3, [r7, #12]
  400d02:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400d04:	e006      	b.n	400d14 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400d06:	68fb      	ldr	r3, [r7, #12]
  400d08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d0a:	69bb      	ldr	r3, [r7, #24]
  400d0c:	43db      	mvns	r3, r3
  400d0e:	401a      	ands	r2, r3
  400d10:	68fb      	ldr	r3, [r7, #12]
  400d12:	675a      	str	r2, [r3, #116]	; 0x74
  400d14:	bf00      	nop
  400d16:	3734      	adds	r7, #52	; 0x34
  400d18:	46bd      	mov	sp, r7
  400d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d1e:	4770      	bx	lr
  400d20:	00200707 	.word	0x00200707

00400d24 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400d24:	b480      	push	{r7}
  400d26:	b08d      	sub	sp, #52	; 0x34
  400d28:	af00      	add	r7, sp, #0
  400d2a:	6078      	str	r0, [r7, #4]
  400d2c:	460b      	mov	r3, r1
  400d2e:	70fb      	strb	r3, [r7, #3]
  400d30:	687b      	ldr	r3, [r7, #4]
  400d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  400d34:	78fb      	ldrb	r3, [r7, #3]
  400d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d3c:	627b      	str	r3, [r7, #36]	; 0x24
  400d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400d40:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400d42:	6a3b      	ldr	r3, [r7, #32]
  400d44:	095b      	lsrs	r3, r3, #5
  400d46:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d48:	69fa      	ldr	r2, [r7, #28]
  400d4a:	4b17      	ldr	r3, [pc, #92]	; (400da8 <ioport_set_pin_dir+0x84>)
  400d4c:	4413      	add	r3, r2
  400d4e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400d50:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400d56:	2b01      	cmp	r3, #1
  400d58:	d109      	bne.n	400d6e <ioport_set_pin_dir+0x4a>
  400d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d5c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400d5e:	697b      	ldr	r3, [r7, #20]
  400d60:	f003 031f 	and.w	r3, r3, #31
  400d64:	2201      	movs	r2, #1
  400d66:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d68:	69bb      	ldr	r3, [r7, #24]
  400d6a:	611a      	str	r2, [r3, #16]
  400d6c:	e00c      	b.n	400d88 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400d72:	2b00      	cmp	r3, #0
  400d74:	d108      	bne.n	400d88 <ioport_set_pin_dir+0x64>
  400d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d78:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400d7a:	693b      	ldr	r3, [r7, #16]
  400d7c:	f003 031f 	and.w	r3, r3, #31
  400d80:	2201      	movs	r2, #1
  400d82:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d84:	69bb      	ldr	r3, [r7, #24]
  400d86:	615a      	str	r2, [r3, #20]
  400d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d8a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400d8c:	68fb      	ldr	r3, [r7, #12]
  400d8e:	f003 031f 	and.w	r3, r3, #31
  400d92:	2201      	movs	r2, #1
  400d94:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d96:	69bb      	ldr	r3, [r7, #24]
  400d98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400d9c:	bf00      	nop
  400d9e:	3734      	adds	r7, #52	; 0x34
  400da0:	46bd      	mov	sp, r7
  400da2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da6:	4770      	bx	lr
  400da8:	00200707 	.word	0x00200707

00400dac <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400dac:	b480      	push	{r7}
  400dae:	b08b      	sub	sp, #44	; 0x2c
  400db0:	af00      	add	r7, sp, #0
  400db2:	6078      	str	r0, [r7, #4]
  400db4:	460b      	mov	r3, r1
  400db6:	70fb      	strb	r3, [r7, #3]
  400db8:	687b      	ldr	r3, [r7, #4]
  400dba:	627b      	str	r3, [r7, #36]	; 0x24
  400dbc:	78fb      	ldrb	r3, [r7, #3]
  400dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400dc4:	61fb      	str	r3, [r7, #28]
  400dc6:	69fb      	ldr	r3, [r7, #28]
  400dc8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400dca:	69bb      	ldr	r3, [r7, #24]
  400dcc:	095b      	lsrs	r3, r3, #5
  400dce:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400dd0:	697a      	ldr	r2, [r7, #20]
  400dd2:	4b10      	ldr	r3, [pc, #64]	; (400e14 <ioport_set_pin_level+0x68>)
  400dd4:	4413      	add	r3, r2
  400dd6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400dd8:	613b      	str	r3, [r7, #16]

	if (level) {
  400dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400dde:	2b00      	cmp	r3, #0
  400de0:	d009      	beq.n	400df6 <ioport_set_pin_level+0x4a>
  400de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400de4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400de6:	68fb      	ldr	r3, [r7, #12]
  400de8:	f003 031f 	and.w	r3, r3, #31
  400dec:	2201      	movs	r2, #1
  400dee:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400df0:	693b      	ldr	r3, [r7, #16]
  400df2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400df4:	e008      	b.n	400e08 <ioport_set_pin_level+0x5c>
  400df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400df8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400dfa:	68bb      	ldr	r3, [r7, #8]
  400dfc:	f003 031f 	and.w	r3, r3, #31
  400e00:	2201      	movs	r2, #1
  400e02:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400e04:	693b      	ldr	r3, [r7, #16]
  400e06:	635a      	str	r2, [r3, #52]	; 0x34
  400e08:	bf00      	nop
  400e0a:	372c      	adds	r7, #44	; 0x2c
  400e0c:	46bd      	mov	sp, r7
  400e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e12:	4770      	bx	lr
  400e14:	00200707 	.word	0x00200707

00400e18 <spi_reset>:
{
  400e18:	b480      	push	{r7}
  400e1a:	b083      	sub	sp, #12
  400e1c:	af00      	add	r7, sp, #0
  400e1e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400e20:	687b      	ldr	r3, [r7, #4]
  400e22:	2280      	movs	r2, #128	; 0x80
  400e24:	601a      	str	r2, [r3, #0]
}
  400e26:	bf00      	nop
  400e28:	370c      	adds	r7, #12
  400e2a:	46bd      	mov	sp, r7
  400e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e30:	4770      	bx	lr

00400e32 <spi_enable>:
{
  400e32:	b480      	push	{r7}
  400e34:	b083      	sub	sp, #12
  400e36:	af00      	add	r7, sp, #0
  400e38:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	2201      	movs	r2, #1
  400e3e:	601a      	str	r2, [r3, #0]
}
  400e40:	bf00      	nop
  400e42:	370c      	adds	r7, #12
  400e44:	46bd      	mov	sp, r7
  400e46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e4a:	4770      	bx	lr

00400e4c <spi_disable>:
{
  400e4c:	b480      	push	{r7}
  400e4e:	b083      	sub	sp, #12
  400e50:	af00      	add	r7, sp, #0
  400e52:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400e54:	687b      	ldr	r3, [r7, #4]
  400e56:	2202      	movs	r2, #2
  400e58:	601a      	str	r2, [r3, #0]
}
  400e5a:	bf00      	nop
  400e5c:	370c      	adds	r7, #12
  400e5e:	46bd      	mov	sp, r7
  400e60:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e64:	4770      	bx	lr

00400e66 <spi_set_master_mode>:
{
  400e66:	b480      	push	{r7}
  400e68:	b083      	sub	sp, #12
  400e6a:	af00      	add	r7, sp, #0
  400e6c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400e6e:	687b      	ldr	r3, [r7, #4]
  400e70:	685b      	ldr	r3, [r3, #4]
  400e72:	f043 0201 	orr.w	r2, r3, #1
  400e76:	687b      	ldr	r3, [r7, #4]
  400e78:	605a      	str	r2, [r3, #4]
}
  400e7a:	bf00      	nop
  400e7c:	370c      	adds	r7, #12
  400e7e:	46bd      	mov	sp, r7
  400e80:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e84:	4770      	bx	lr

00400e86 <spi_set_fixed_peripheral_select>:
{
  400e86:	b480      	push	{r7}
  400e88:	b083      	sub	sp, #12
  400e8a:	af00      	add	r7, sp, #0
  400e8c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400e8e:	687b      	ldr	r3, [r7, #4]
  400e90:	685b      	ldr	r3, [r3, #4]
  400e92:	f023 0202 	bic.w	r2, r3, #2
  400e96:	687b      	ldr	r3, [r7, #4]
  400e98:	605a      	str	r2, [r3, #4]
}
  400e9a:	bf00      	nop
  400e9c:	370c      	adds	r7, #12
  400e9e:	46bd      	mov	sp, r7
  400ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ea4:	4770      	bx	lr

00400ea6 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  400ea6:	b480      	push	{r7}
  400ea8:	b083      	sub	sp, #12
  400eaa:	af00      	add	r7, sp, #0
  400eac:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	685b      	ldr	r3, [r3, #4]
  400eb2:	f043 0210 	orr.w	r2, r3, #16
  400eb6:	687b      	ldr	r3, [r7, #4]
  400eb8:	605a      	str	r2, [r3, #4]
}
  400eba:	bf00      	nop
  400ebc:	370c      	adds	r7, #12
  400ebe:	46bd      	mov	sp, r7
  400ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ec4:	4770      	bx	lr

00400ec6 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  400ec6:	b480      	push	{r7}
  400ec8:	b083      	sub	sp, #12
  400eca:	af00      	add	r7, sp, #0
  400ecc:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400ece:	687b      	ldr	r3, [r7, #4]
  400ed0:	685b      	ldr	r3, [r3, #4]
  400ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  400ed6:	687b      	ldr	r3, [r7, #4]
  400ed8:	605a      	str	r2, [r3, #4]
}
  400eda:	bf00      	nop
  400edc:	370c      	adds	r7, #12
  400ede:	46bd      	mov	sp, r7
  400ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee4:	4770      	bx	lr
	...

00400ee8 <ssd1306_hard_reset>:
{
  400ee8:	b580      	push	{r7, lr}
  400eea:	b082      	sub	sp, #8
  400eec:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  400eee:	4b0f      	ldr	r3, [pc, #60]	; (400f2c <ssd1306_hard_reset+0x44>)
  400ef0:	4798      	blx	r3
  400ef2:	4602      	mov	r2, r0
  400ef4:	4b0e      	ldr	r3, [pc, #56]	; (400f30 <ssd1306_hard_reset+0x48>)
  400ef6:	fba3 2302 	umull	r2, r3, r3, r2
  400efa:	0c9a      	lsrs	r2, r3, #18
  400efc:	4613      	mov	r3, r2
  400efe:	009b      	lsls	r3, r3, #2
  400f00:	4413      	add	r3, r2
  400f02:	005b      	lsls	r3, r3, #1
  400f04:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  400f06:	2100      	movs	r1, #0
  400f08:	2051      	movs	r0, #81	; 0x51
  400f0a:	4b0a      	ldr	r3, [pc, #40]	; (400f34 <ssd1306_hard_reset+0x4c>)
  400f0c:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  400f0e:	6878      	ldr	r0, [r7, #4]
  400f10:	4b09      	ldr	r3, [pc, #36]	; (400f38 <ssd1306_hard_reset+0x50>)
  400f12:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  400f14:	2101      	movs	r1, #1
  400f16:	2051      	movs	r0, #81	; 0x51
  400f18:	4b06      	ldr	r3, [pc, #24]	; (400f34 <ssd1306_hard_reset+0x4c>)
  400f1a:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  400f1c:	6878      	ldr	r0, [r7, #4]
  400f1e:	4b06      	ldr	r3, [pc, #24]	; (400f38 <ssd1306_hard_reset+0x50>)
  400f20:	4798      	blx	r3
}
  400f22:	bf00      	nop
  400f24:	3708      	adds	r7, #8
  400f26:	46bd      	mov	sp, r7
  400f28:	bd80      	pop	{r7, pc}
  400f2a:	bf00      	nop
  400f2c:	00400b95 	.word	0x00400b95
  400f30:	431bde83 	.word	0x431bde83
  400f34:	00400dad 	.word	0x00400dad
  400f38:	20400001 	.word	0x20400001

00400f3c <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  400f3c:	b580      	push	{r7, lr}
  400f3e:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400f40:	20af      	movs	r0, #175	; 0xaf
  400f42:	4b02      	ldr	r3, [pc, #8]	; (400f4c <ssd1306_display_on+0x10>)
  400f44:	4798      	blx	r3
}
  400f46:	bf00      	nop
  400f48:	bd80      	pop	{r7, pc}
  400f4a:	bf00      	nop
  400f4c:	004011bd 	.word	0x004011bd

00400f50 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  400f50:	b580      	push	{r7, lr}
  400f52:	b082      	sub	sp, #8
  400f54:	af00      	add	r7, sp, #0
  400f56:	4603      	mov	r3, r0
  400f58:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400f5a:	2081      	movs	r0, #129	; 0x81
  400f5c:	4b05      	ldr	r3, [pc, #20]	; (400f74 <ssd1306_set_contrast+0x24>)
  400f5e:	4798      	blx	r3
	ssd1306_write_command(contrast);
  400f60:	79fb      	ldrb	r3, [r7, #7]
  400f62:	4618      	mov	r0, r3
  400f64:	4b03      	ldr	r3, [pc, #12]	; (400f74 <ssd1306_set_contrast+0x24>)
  400f66:	4798      	blx	r3
	return contrast;
  400f68:	79fb      	ldrb	r3, [r7, #7]
}
  400f6a:	4618      	mov	r0, r3
  400f6c:	3708      	adds	r7, #8
  400f6e:	46bd      	mov	sp, r7
  400f70:	bd80      	pop	{r7, pc}
  400f72:	bf00      	nop
  400f74:	004011bd 	.word	0x004011bd

00400f78 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  400f78:	b580      	push	{r7, lr}
  400f7a:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400f7c:	20a6      	movs	r0, #166	; 0xa6
  400f7e:	4b02      	ldr	r3, [pc, #8]	; (400f88 <ssd1306_display_invert_disable+0x10>)
  400f80:	4798      	blx	r3
}
  400f82:	bf00      	nop
  400f84:	bd80      	pop	{r7, pc}
  400f86:	bf00      	nop
  400f88:	004011bd 	.word	0x004011bd

00400f8c <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  400f8c:	b590      	push	{r4, r7, lr}
  400f8e:	b083      	sub	sp, #12
  400f90:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  400f92:	2101      	movs	r1, #1
  400f94:	2051      	movs	r0, #81	; 0x51
  400f96:	4b46      	ldr	r3, [pc, #280]	; (4010b0 <ssd1306_interface_init+0x124>)
  400f98:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  400f9a:	2101      	movs	r1, #1
  400f9c:	2023      	movs	r0, #35	; 0x23
  400f9e:	4b44      	ldr	r3, [pc, #272]	; (4010b0 <ssd1306_interface_init+0x124>)
  400fa0:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  400fa2:	2108      	movs	r1, #8
  400fa4:	2051      	movs	r0, #81	; 0x51
  400fa6:	4b43      	ldr	r3, [pc, #268]	; (4010b4 <ssd1306_interface_init+0x128>)
  400fa8:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  400faa:	2108      	movs	r1, #8
  400fac:	2023      	movs	r0, #35	; 0x23
  400fae:	4b41      	ldr	r3, [pc, #260]	; (4010b4 <ssd1306_interface_init+0x128>)
  400fb0:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  400fb2:	2023      	movs	r0, #35	; 0x23
  400fb4:	4b40      	ldr	r3, [pc, #256]	; (4010b8 <ssd1306_interface_init+0x12c>)
  400fb6:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  400fb8:	2051      	movs	r0, #81	; 0x51
  400fba:	4b3f      	ldr	r3, [pc, #252]	; (4010b8 <ssd1306_interface_init+0x12c>)
  400fbc:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  400fbe:	2101      	movs	r1, #1
  400fc0:	2023      	movs	r0, #35	; 0x23
  400fc2:	4b3e      	ldr	r3, [pc, #248]	; (4010bc <ssd1306_interface_init+0x130>)
  400fc4:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  400fc6:	2101      	movs	r1, #1
  400fc8:	2051      	movs	r0, #81	; 0x51
  400fca:	4b3c      	ldr	r3, [pc, #240]	; (4010bc <ssd1306_interface_init+0x130>)
  400fcc:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400fce:	2300      	movs	r3, #0
  400fd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400fd4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fd8:	4839      	ldr	r0, [pc, #228]	; (4010c0 <ssd1306_interface_init+0x134>)
  400fda:	4c3a      	ldr	r4, [pc, #232]	; (4010c4 <ssd1306_interface_init+0x138>)
  400fdc:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400fde:	2300      	movs	r3, #0
  400fe0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400fe4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fe8:	4835      	ldr	r0, [pc, #212]	; (4010c0 <ssd1306_interface_init+0x134>)
  400fea:	4c36      	ldr	r4, [pc, #216]	; (4010c4 <ssd1306_interface_init+0x138>)
  400fec:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400fee:	2300      	movs	r3, #0
  400ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400ff4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ff8:	4831      	ldr	r0, [pc, #196]	; (4010c0 <ssd1306_interface_init+0x134>)
  400ffa:	4c32      	ldr	r4, [pc, #200]	; (4010c4 <ssd1306_interface_init+0x138>)
  400ffc:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400ffe:	2300      	movs	r3, #0
  401000:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401004:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401008:	482d      	ldr	r0, [pc, #180]	; (4010c0 <ssd1306_interface_init+0x134>)
  40100a:	4c2e      	ldr	r4, [pc, #184]	; (4010c4 <ssd1306_interface_init+0x138>)
  40100c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40100e:	2300      	movs	r3, #0
  401010:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401014:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401018:	4829      	ldr	r0, [pc, #164]	; (4010c0 <ssd1306_interface_init+0x134>)
  40101a:	4c2a      	ldr	r4, [pc, #168]	; (4010c4 <ssd1306_interface_init+0x138>)
  40101c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40101e:	2300      	movs	r3, #0
  401020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401024:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401028:	4825      	ldr	r0, [pc, #148]	; (4010c0 <ssd1306_interface_init+0x134>)
  40102a:	4c26      	ldr	r4, [pc, #152]	; (4010c4 <ssd1306_interface_init+0x138>)
  40102c:	47a0      	blx	r4
		
		spi_disable(SPI0);
  40102e:	4826      	ldr	r0, [pc, #152]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401030:	4b26      	ldr	r3, [pc, #152]	; (4010cc <ssd1306_interface_init+0x140>)
  401032:	4798      	blx	r3
		spi_reset(SPI0);
  401034:	4824      	ldr	r0, [pc, #144]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401036:	4b26      	ldr	r3, [pc, #152]	; (4010d0 <ssd1306_interface_init+0x144>)
  401038:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  40103a:	4823      	ldr	r0, [pc, #140]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40103c:	4b25      	ldr	r3, [pc, #148]	; (4010d4 <ssd1306_interface_init+0x148>)
  40103e:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  401040:	2208      	movs	r2, #8
  401042:	2101      	movs	r1, #1
  401044:	4820      	ldr	r0, [pc, #128]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401046:	4b24      	ldr	r3, [pc, #144]	; (4010d8 <ssd1306_interface_init+0x14c>)
  401048:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  40104a:	2200      	movs	r2, #0
  40104c:	2101      	movs	r1, #1
  40104e:	481e      	ldr	r0, [pc, #120]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401050:	4b22      	ldr	r3, [pc, #136]	; (4010dc <ssd1306_interface_init+0x150>)
  401052:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  401054:	2200      	movs	r2, #0
  401056:	2101      	movs	r1, #1
  401058:	481b      	ldr	r0, [pc, #108]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40105a:	4b21      	ldr	r3, [pc, #132]	; (4010e0 <ssd1306_interface_init+0x154>)
  40105c:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  40105e:	481a      	ldr	r0, [pc, #104]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401060:	4b20      	ldr	r3, [pc, #128]	; (4010e4 <ssd1306_interface_init+0x158>)
  401062:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401064:	2200      	movs	r2, #0
  401066:	2101      	movs	r1, #1
  401068:	4817      	ldr	r0, [pc, #92]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40106a:	4b1f      	ldr	r3, [pc, #124]	; (4010e8 <ssd1306_interface_init+0x15c>)
  40106c:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  40106e:	4816      	ldr	r0, [pc, #88]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401070:	4b1e      	ldr	r3, [pc, #120]	; (4010ec <ssd1306_interface_init+0x160>)
  401072:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  401074:	4814      	ldr	r0, [pc, #80]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401076:	4b1e      	ldr	r3, [pc, #120]	; (4010f0 <ssd1306_interface_init+0x164>)
  401078:	4798      	blx	r3
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  40107a:	4b1e      	ldr	r3, [pc, #120]	; (4010f4 <ssd1306_interface_init+0x168>)
  40107c:	4798      	blx	r3
  40107e:	4603      	mov	r3, r0
  401080:	4619      	mov	r1, r3
  401082:	481d      	ldr	r0, [pc, #116]	; (4010f8 <ssd1306_interface_init+0x16c>)
  401084:	4b1d      	ldr	r3, [pc, #116]	; (4010fc <ssd1306_interface_init+0x170>)
  401086:	4798      	blx	r3
  401088:	4603      	mov	r3, r0
  40108a:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  40108c:	687b      	ldr	r3, [r7, #4]
  40108e:	b2db      	uxtb	r3, r3
  401090:	461a      	mov	r2, r3
  401092:	2101      	movs	r1, #1
  401094:	480c      	ldr	r0, [pc, #48]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401096:	4b1a      	ldr	r3, [pc, #104]	; (401100 <ssd1306_interface_init+0x174>)
  401098:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40109a:	480b      	ldr	r0, [pc, #44]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40109c:	4b19      	ldr	r3, [pc, #100]	; (401104 <ssd1306_interface_init+0x178>)
  40109e:	4798      	blx	r3
		
		spi_enable(SPI0);
  4010a0:	4809      	ldr	r0, [pc, #36]	; (4010c8 <ssd1306_interface_init+0x13c>)
  4010a2:	4b19      	ldr	r3, [pc, #100]	; (401108 <ssd1306_interface_init+0x17c>)
  4010a4:	4798      	blx	r3
}
  4010a6:	bf00      	nop
  4010a8:	370c      	adds	r7, #12
  4010aa:	46bd      	mov	sp, r7
  4010ac:	bd90      	pop	{r4, r7, pc}
  4010ae:	bf00      	nop
  4010b0:	00400d25 	.word	0x00400d25
  4010b4:	00400c09 	.word	0x00400c09
  4010b8:	00400bbd 	.word	0x00400bbd
  4010bc:	00400dad 	.word	0x00400dad
  4010c0:	400e1400 	.word	0x400e1400
  4010c4:	00401da5 	.word	0x00401da5
  4010c8:	40008000 	.word	0x40008000
  4010cc:	00400e4d 	.word	0x00400e4d
  4010d0:	00400e19 	.word	0x00400e19
  4010d4:	00400e67 	.word	0x00400e67
  4010d8:	00400619 	.word	0x00400619
  4010dc:	00400579 	.word	0x00400579
  4010e0:	004005c9 	.word	0x004005c9
  4010e4:	00400e87 	.word	0x00400e87
  4010e8:	004006bf 	.word	0x004006bf
  4010ec:	00400ec7 	.word	0x00400ec7
  4010f0:	00400ea7 	.word	0x00400ea7
  4010f4:	00400ba9 	.word	0x00400ba9
  4010f8:	000f4240 	.word	0x000f4240
  4010fc:	00400709 	.word	0x00400709
  401100:	00400745 	.word	0x00400745
  401104:	00400489 	.word	0x00400489
  401108:	00400e33 	.word	0x00400e33

0040110c <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  40110c:	b580      	push	{r7, lr}
  40110e:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  401110:	4b23      	ldr	r3, [pc, #140]	; (4011a0 <ssd1306_init+0x94>)
  401112:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  401114:	4b23      	ldr	r3, [pc, #140]	; (4011a4 <ssd1306_init+0x98>)
  401116:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  401118:	2101      	movs	r1, #1
  40111a:	2051      	movs	r0, #81	; 0x51
  40111c:	4b22      	ldr	r3, [pc, #136]	; (4011a8 <ssd1306_init+0x9c>)
  40111e:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401120:	20a8      	movs	r0, #168	; 0xa8
  401122:	4b22      	ldr	r3, [pc, #136]	; (4011ac <ssd1306_init+0xa0>)
  401124:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  401126:	201f      	movs	r0, #31
  401128:	4b20      	ldr	r3, [pc, #128]	; (4011ac <ssd1306_init+0xa0>)
  40112a:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40112c:	20d3      	movs	r0, #211	; 0xd3
  40112e:	4b1f      	ldr	r3, [pc, #124]	; (4011ac <ssd1306_init+0xa0>)
  401130:	4798      	blx	r3
	ssd1306_write_command(0x00);
  401132:	2000      	movs	r0, #0
  401134:	4b1d      	ldr	r3, [pc, #116]	; (4011ac <ssd1306_init+0xa0>)
  401136:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401138:	2040      	movs	r0, #64	; 0x40
  40113a:	4b1c      	ldr	r3, [pc, #112]	; (4011ac <ssd1306_init+0xa0>)
  40113c:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40113e:	20a1      	movs	r0, #161	; 0xa1
  401140:	4b1a      	ldr	r3, [pc, #104]	; (4011ac <ssd1306_init+0xa0>)
  401142:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  401144:	20c8      	movs	r0, #200	; 0xc8
  401146:	4b19      	ldr	r3, [pc, #100]	; (4011ac <ssd1306_init+0xa0>)
  401148:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40114a:	20da      	movs	r0, #218	; 0xda
  40114c:	4b17      	ldr	r3, [pc, #92]	; (4011ac <ssd1306_init+0xa0>)
  40114e:	4798      	blx	r3
	ssd1306_write_command(0x02);
  401150:	2002      	movs	r0, #2
  401152:	4b16      	ldr	r3, [pc, #88]	; (4011ac <ssd1306_init+0xa0>)
  401154:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  401156:	208f      	movs	r0, #143	; 0x8f
  401158:	4b15      	ldr	r3, [pc, #84]	; (4011b0 <ssd1306_init+0xa4>)
  40115a:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40115c:	20a4      	movs	r0, #164	; 0xa4
  40115e:	4b13      	ldr	r3, [pc, #76]	; (4011ac <ssd1306_init+0xa0>)
  401160:	4798      	blx	r3

	ssd1306_display_invert_disable();
  401162:	4b14      	ldr	r3, [pc, #80]	; (4011b4 <ssd1306_init+0xa8>)
  401164:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  401166:	20d5      	movs	r0, #213	; 0xd5
  401168:	4b10      	ldr	r3, [pc, #64]	; (4011ac <ssd1306_init+0xa0>)
  40116a:	4798      	blx	r3
	ssd1306_write_command(0x80);
  40116c:	2080      	movs	r0, #128	; 0x80
  40116e:	4b0f      	ldr	r3, [pc, #60]	; (4011ac <ssd1306_init+0xa0>)
  401170:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401172:	208d      	movs	r0, #141	; 0x8d
  401174:	4b0d      	ldr	r3, [pc, #52]	; (4011ac <ssd1306_init+0xa0>)
  401176:	4798      	blx	r3
	ssd1306_write_command(0x14);
  401178:	2014      	movs	r0, #20
  40117a:	4b0c      	ldr	r3, [pc, #48]	; (4011ac <ssd1306_init+0xa0>)
  40117c:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  40117e:	20db      	movs	r0, #219	; 0xdb
  401180:	4b0a      	ldr	r3, [pc, #40]	; (4011ac <ssd1306_init+0xa0>)
  401182:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401184:	2040      	movs	r0, #64	; 0x40
  401186:	4b09      	ldr	r3, [pc, #36]	; (4011ac <ssd1306_init+0xa0>)
  401188:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40118a:	20d9      	movs	r0, #217	; 0xd9
  40118c:	4b07      	ldr	r3, [pc, #28]	; (4011ac <ssd1306_init+0xa0>)
  40118e:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  401190:	20f1      	movs	r0, #241	; 0xf1
  401192:	4b06      	ldr	r3, [pc, #24]	; (4011ac <ssd1306_init+0xa0>)
  401194:	4798      	blx	r3

	
	ssd1306_display_on();
  401196:	4b08      	ldr	r3, [pc, #32]	; (4011b8 <ssd1306_init+0xac>)
  401198:	4798      	blx	r3
}
  40119a:	bf00      	nop
  40119c:	bd80      	pop	{r7, pc}
  40119e:	bf00      	nop
  4011a0:	00400f8d 	.word	0x00400f8d
  4011a4:	00400ee9 	.word	0x00400ee9
  4011a8:	00400dad 	.word	0x00400dad
  4011ac:	004011bd 	.word	0x004011bd
  4011b0:	00400f51 	.word	0x00400f51
  4011b4:	00400f79 	.word	0x00400f79
  4011b8:	00400f3d 	.word	0x00400f3d

004011bc <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4011be:	b083      	sub	sp, #12
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	4603      	mov	r3, r0
  4011c4:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  4011c6:	2100      	movs	r1, #0
  4011c8:	2023      	movs	r0, #35	; 0x23
  4011ca:	4b1c      	ldr	r3, [pc, #112]	; (40123c <ssd1306_write_command+0x80>)
  4011cc:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4011ce:	2101      	movs	r1, #1
  4011d0:	481b      	ldr	r0, [pc, #108]	; (401240 <ssd1306_write_command+0x84>)
  4011d2:	4b1c      	ldr	r3, [pc, #112]	; (401244 <ssd1306_write_command+0x88>)
  4011d4:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4011d6:	79fb      	ldrb	r3, [r7, #7]
  4011d8:	b299      	uxth	r1, r3
  4011da:	2301      	movs	r3, #1
  4011dc:	2201      	movs	r2, #1
  4011de:	4818      	ldr	r0, [pc, #96]	; (401240 <ssd1306_write_command+0x84>)
  4011e0:	4c19      	ldr	r4, [pc, #100]	; (401248 <ssd1306_write_command+0x8c>)
  4011e2:	47a0      	blx	r4
	delay_us(10);
  4011e4:	4b19      	ldr	r3, [pc, #100]	; (40124c <ssd1306_write_command+0x90>)
  4011e6:	4798      	blx	r3
  4011e8:	4603      	mov	r3, r0
  4011ea:	4619      	mov	r1, r3
  4011ec:	f04f 0200 	mov.w	r2, #0
  4011f0:	460b      	mov	r3, r1
  4011f2:	4614      	mov	r4, r2
  4011f4:	00a6      	lsls	r6, r4, #2
  4011f6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4011fa:	009d      	lsls	r5, r3, #2
  4011fc:	462b      	mov	r3, r5
  4011fe:	4634      	mov	r4, r6
  401200:	185b      	adds	r3, r3, r1
  401202:	eb44 0402 	adc.w	r4, r4, r2
  401206:	18db      	adds	r3, r3, r3
  401208:	eb44 0404 	adc.w	r4, r4, r4
  40120c:	4619      	mov	r1, r3
  40120e:	4622      	mov	r2, r4
  401210:	4b0f      	ldr	r3, [pc, #60]	; (401250 <ssd1306_write_command+0x94>)
  401212:	f04f 0400 	mov.w	r4, #0
  401216:	18cd      	adds	r5, r1, r3
  401218:	eb42 0604 	adc.w	r6, r2, r4
  40121c:	4628      	mov	r0, r5
  40121e:	4631      	mov	r1, r6
  401220:	4c0c      	ldr	r4, [pc, #48]	; (401254 <ssd1306_write_command+0x98>)
  401222:	4a0d      	ldr	r2, [pc, #52]	; (401258 <ssd1306_write_command+0x9c>)
  401224:	f04f 0300 	mov.w	r3, #0
  401228:	47a0      	blx	r4
  40122a:	4603      	mov	r3, r0
  40122c:	460c      	mov	r4, r1
  40122e:	4618      	mov	r0, r3
  401230:	4b0a      	ldr	r3, [pc, #40]	; (40125c <ssd1306_write_command+0xa0>)
  401232:	4798      	blx	r3
}
  401234:	bf00      	nop
  401236:	370c      	adds	r7, #12
  401238:	46bd      	mov	sp, r7
  40123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40123c:	00400dad 	.word	0x00400dad
  401240:	40008000 	.word	0x40008000
  401244:	004004c5 	.word	0x004004c5
  401248:	004004f9 	.word	0x004004f9
  40124c:	00400b95 	.word	0x00400b95
  401250:	005a83df 	.word	0x005a83df
  401254:	00402975 	.word	0x00402975
  401258:	005a83e0 	.word	0x005a83e0
  40125c:	20400001 	.word	0x20400001

00401260 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401260:	b5f0      	push	{r4, r5, r6, r7, lr}
  401262:	b083      	sub	sp, #12
  401264:	af00      	add	r7, sp, #0
  401266:	4603      	mov	r3, r0
  401268:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40126a:	2101      	movs	r1, #1
  40126c:	2023      	movs	r0, #35	; 0x23
  40126e:	4b1c      	ldr	r3, [pc, #112]	; (4012e0 <ssd1306_write_data+0x80>)
  401270:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401272:	2101      	movs	r1, #1
  401274:	481b      	ldr	r0, [pc, #108]	; (4012e4 <ssd1306_write_data+0x84>)
  401276:	4b1c      	ldr	r3, [pc, #112]	; (4012e8 <ssd1306_write_data+0x88>)
  401278:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40127a:	79fb      	ldrb	r3, [r7, #7]
  40127c:	b299      	uxth	r1, r3
  40127e:	2301      	movs	r3, #1
  401280:	2201      	movs	r2, #1
  401282:	4818      	ldr	r0, [pc, #96]	; (4012e4 <ssd1306_write_data+0x84>)
  401284:	4c19      	ldr	r4, [pc, #100]	; (4012ec <ssd1306_write_data+0x8c>)
  401286:	47a0      	blx	r4
	delay_us(10);
  401288:	4b19      	ldr	r3, [pc, #100]	; (4012f0 <ssd1306_write_data+0x90>)
  40128a:	4798      	blx	r3
  40128c:	4603      	mov	r3, r0
  40128e:	4619      	mov	r1, r3
  401290:	f04f 0200 	mov.w	r2, #0
  401294:	460b      	mov	r3, r1
  401296:	4614      	mov	r4, r2
  401298:	00a6      	lsls	r6, r4, #2
  40129a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40129e:	009d      	lsls	r5, r3, #2
  4012a0:	462b      	mov	r3, r5
  4012a2:	4634      	mov	r4, r6
  4012a4:	185b      	adds	r3, r3, r1
  4012a6:	eb44 0402 	adc.w	r4, r4, r2
  4012aa:	18db      	adds	r3, r3, r3
  4012ac:	eb44 0404 	adc.w	r4, r4, r4
  4012b0:	4619      	mov	r1, r3
  4012b2:	4622      	mov	r2, r4
  4012b4:	4b0f      	ldr	r3, [pc, #60]	; (4012f4 <ssd1306_write_data+0x94>)
  4012b6:	f04f 0400 	mov.w	r4, #0
  4012ba:	18cd      	adds	r5, r1, r3
  4012bc:	eb42 0604 	adc.w	r6, r2, r4
  4012c0:	4628      	mov	r0, r5
  4012c2:	4631      	mov	r1, r6
  4012c4:	4c0c      	ldr	r4, [pc, #48]	; (4012f8 <ssd1306_write_data+0x98>)
  4012c6:	4a0d      	ldr	r2, [pc, #52]	; (4012fc <ssd1306_write_data+0x9c>)
  4012c8:	f04f 0300 	mov.w	r3, #0
  4012cc:	47a0      	blx	r4
  4012ce:	4603      	mov	r3, r0
  4012d0:	460c      	mov	r4, r1
  4012d2:	4618      	mov	r0, r3
  4012d4:	4b0a      	ldr	r3, [pc, #40]	; (401300 <ssd1306_write_data+0xa0>)
  4012d6:	4798      	blx	r3
}
  4012d8:	bf00      	nop
  4012da:	370c      	adds	r7, #12
  4012dc:	46bd      	mov	sp, r7
  4012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012e0:	00400dad 	.word	0x00400dad
  4012e4:	40008000 	.word	0x40008000
  4012e8:	004004c5 	.word	0x004004c5
  4012ec:	004004f9 	.word	0x004004f9
  4012f0:	00400b95 	.word	0x00400b95
  4012f4:	005a83df 	.word	0x005a83df
  4012f8:	00402975 	.word	0x00402975
  4012fc:	005a83e0 	.word	0x005a83e0
  401300:	20400001 	.word	0x20400001

00401304 <osc_enable>:
{
  401304:	b580      	push	{r7, lr}
  401306:	b082      	sub	sp, #8
  401308:	af00      	add	r7, sp, #0
  40130a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40130c:	687b      	ldr	r3, [r7, #4]
  40130e:	2b07      	cmp	r3, #7
  401310:	d831      	bhi.n	401376 <osc_enable+0x72>
  401312:	a201      	add	r2, pc, #4	; (adr r2, 401318 <osc_enable+0x14>)
  401314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401318:	00401375 	.word	0x00401375
  40131c:	00401339 	.word	0x00401339
  401320:	00401341 	.word	0x00401341
  401324:	00401349 	.word	0x00401349
  401328:	00401351 	.word	0x00401351
  40132c:	00401359 	.word	0x00401359
  401330:	00401361 	.word	0x00401361
  401334:	0040136b 	.word	0x0040136b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401338:	2000      	movs	r0, #0
  40133a:	4b11      	ldr	r3, [pc, #68]	; (401380 <osc_enable+0x7c>)
  40133c:	4798      	blx	r3
		break;
  40133e:	e01a      	b.n	401376 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401340:	2001      	movs	r0, #1
  401342:	4b0f      	ldr	r3, [pc, #60]	; (401380 <osc_enable+0x7c>)
  401344:	4798      	blx	r3
		break;
  401346:	e016      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401348:	2000      	movs	r0, #0
  40134a:	4b0e      	ldr	r3, [pc, #56]	; (401384 <osc_enable+0x80>)
  40134c:	4798      	blx	r3
		break;
  40134e:	e012      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401350:	2010      	movs	r0, #16
  401352:	4b0c      	ldr	r3, [pc, #48]	; (401384 <osc_enable+0x80>)
  401354:	4798      	blx	r3
		break;
  401356:	e00e      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401358:	2020      	movs	r0, #32
  40135a:	4b0a      	ldr	r3, [pc, #40]	; (401384 <osc_enable+0x80>)
  40135c:	4798      	blx	r3
		break;
  40135e:	e00a      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401360:	213e      	movs	r1, #62	; 0x3e
  401362:	2000      	movs	r0, #0
  401364:	4b08      	ldr	r3, [pc, #32]	; (401388 <osc_enable+0x84>)
  401366:	4798      	blx	r3
		break;
  401368:	e005      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40136a:	213e      	movs	r1, #62	; 0x3e
  40136c:	2001      	movs	r0, #1
  40136e:	4b06      	ldr	r3, [pc, #24]	; (401388 <osc_enable+0x84>)
  401370:	4798      	blx	r3
		break;
  401372:	e000      	b.n	401376 <osc_enable+0x72>
		break;
  401374:	bf00      	nop
}
  401376:	bf00      	nop
  401378:	3708      	adds	r7, #8
  40137a:	46bd      	mov	sp, r7
  40137c:	bd80      	pop	{r7, pc}
  40137e:	bf00      	nop
  401380:	00402211 	.word	0x00402211
  401384:	0040227d 	.word	0x0040227d
  401388:	004022ed 	.word	0x004022ed

0040138c <osc_is_ready>:
{
  40138c:	b580      	push	{r7, lr}
  40138e:	b082      	sub	sp, #8
  401390:	af00      	add	r7, sp, #0
  401392:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401394:	687b      	ldr	r3, [r7, #4]
  401396:	2b07      	cmp	r3, #7
  401398:	d826      	bhi.n	4013e8 <osc_is_ready+0x5c>
  40139a:	a201      	add	r2, pc, #4	; (adr r2, 4013a0 <osc_is_ready+0x14>)
  40139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4013a0:	004013c1 	.word	0x004013c1
  4013a4:	004013c5 	.word	0x004013c5
  4013a8:	004013c5 	.word	0x004013c5
  4013ac:	004013d7 	.word	0x004013d7
  4013b0:	004013d7 	.word	0x004013d7
  4013b4:	004013d7 	.word	0x004013d7
  4013b8:	004013d7 	.word	0x004013d7
  4013bc:	004013d7 	.word	0x004013d7
		return 1;
  4013c0:	2301      	movs	r3, #1
  4013c2:	e012      	b.n	4013ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4013c4:	4b0b      	ldr	r3, [pc, #44]	; (4013f4 <osc_is_ready+0x68>)
  4013c6:	4798      	blx	r3
  4013c8:	4603      	mov	r3, r0
  4013ca:	2b00      	cmp	r3, #0
  4013cc:	bf14      	ite	ne
  4013ce:	2301      	movne	r3, #1
  4013d0:	2300      	moveq	r3, #0
  4013d2:	b2db      	uxtb	r3, r3
  4013d4:	e009      	b.n	4013ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4013d6:	4b08      	ldr	r3, [pc, #32]	; (4013f8 <osc_is_ready+0x6c>)
  4013d8:	4798      	blx	r3
  4013da:	4603      	mov	r3, r0
  4013dc:	2b00      	cmp	r3, #0
  4013de:	bf14      	ite	ne
  4013e0:	2301      	movne	r3, #1
  4013e2:	2300      	moveq	r3, #0
  4013e4:	b2db      	uxtb	r3, r3
  4013e6:	e000      	b.n	4013ea <osc_is_ready+0x5e>
	return 0;
  4013e8:	2300      	movs	r3, #0
}
  4013ea:	4618      	mov	r0, r3
  4013ec:	3708      	adds	r7, #8
  4013ee:	46bd      	mov	sp, r7
  4013f0:	bd80      	pop	{r7, pc}
  4013f2:	bf00      	nop
  4013f4:	00402249 	.word	0x00402249
  4013f8:	00402365 	.word	0x00402365

004013fc <osc_get_rate>:
{
  4013fc:	b480      	push	{r7}
  4013fe:	b083      	sub	sp, #12
  401400:	af00      	add	r7, sp, #0
  401402:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	2b07      	cmp	r3, #7
  401408:	d825      	bhi.n	401456 <osc_get_rate+0x5a>
  40140a:	a201      	add	r2, pc, #4	; (adr r2, 401410 <osc_get_rate+0x14>)
  40140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401410:	00401431 	.word	0x00401431
  401414:	00401437 	.word	0x00401437
  401418:	0040143d 	.word	0x0040143d
  40141c:	00401443 	.word	0x00401443
  401420:	00401447 	.word	0x00401447
  401424:	0040144b 	.word	0x0040144b
  401428:	0040144f 	.word	0x0040144f
  40142c:	00401453 	.word	0x00401453
		return OSC_SLCK_32K_RC_HZ;
  401430:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401434:	e010      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40143a:	e00d      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40143c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401440:	e00a      	b.n	401458 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401442:	4b08      	ldr	r3, [pc, #32]	; (401464 <osc_get_rate+0x68>)
  401444:	e008      	b.n	401458 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401446:	4b08      	ldr	r3, [pc, #32]	; (401468 <osc_get_rate+0x6c>)
  401448:	e006      	b.n	401458 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40144a:	4b08      	ldr	r3, [pc, #32]	; (40146c <osc_get_rate+0x70>)
  40144c:	e004      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40144e:	4b07      	ldr	r3, [pc, #28]	; (40146c <osc_get_rate+0x70>)
  401450:	e002      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401452:	4b06      	ldr	r3, [pc, #24]	; (40146c <osc_get_rate+0x70>)
  401454:	e000      	b.n	401458 <osc_get_rate+0x5c>
	return 0;
  401456:	2300      	movs	r3, #0
}
  401458:	4618      	mov	r0, r3
  40145a:	370c      	adds	r7, #12
  40145c:	46bd      	mov	sp, r7
  40145e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401462:	4770      	bx	lr
  401464:	003d0900 	.word	0x003d0900
  401468:	007a1200 	.word	0x007a1200
  40146c:	00b71b00 	.word	0x00b71b00

00401470 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401470:	b580      	push	{r7, lr}
  401472:	b082      	sub	sp, #8
  401474:	af00      	add	r7, sp, #0
  401476:	4603      	mov	r3, r0
  401478:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40147a:	bf00      	nop
  40147c:	79fb      	ldrb	r3, [r7, #7]
  40147e:	4618      	mov	r0, r3
  401480:	4b05      	ldr	r3, [pc, #20]	; (401498 <osc_wait_ready+0x28>)
  401482:	4798      	blx	r3
  401484:	4603      	mov	r3, r0
  401486:	f083 0301 	eor.w	r3, r3, #1
  40148a:	b2db      	uxtb	r3, r3
  40148c:	2b00      	cmp	r3, #0
  40148e:	d1f5      	bne.n	40147c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401490:	bf00      	nop
  401492:	3708      	adds	r7, #8
  401494:	46bd      	mov	sp, r7
  401496:	bd80      	pop	{r7, pc}
  401498:	0040138d 	.word	0x0040138d

0040149c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40149c:	b580      	push	{r7, lr}
  40149e:	b086      	sub	sp, #24
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	60f8      	str	r0, [r7, #12]
  4014a4:	607a      	str	r2, [r7, #4]
  4014a6:	603b      	str	r3, [r7, #0]
  4014a8:	460b      	mov	r3, r1
  4014aa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4014ac:	687b      	ldr	r3, [r7, #4]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d107      	bne.n	4014c2 <pll_config_init+0x26>
  4014b2:	683b      	ldr	r3, [r7, #0]
  4014b4:	2b00      	cmp	r3, #0
  4014b6:	d104      	bne.n	4014c2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4014b8:	68fb      	ldr	r3, [r7, #12]
  4014ba:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  4014be:	601a      	str	r2, [r3, #0]
  4014c0:	e019      	b.n	4014f6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4014c2:	7afb      	ldrb	r3, [r7, #11]
  4014c4:	4618      	mov	r0, r3
  4014c6:	4b0e      	ldr	r3, [pc, #56]	; (401500 <pll_config_init+0x64>)
  4014c8:	4798      	blx	r3
  4014ca:	4602      	mov	r2, r0
  4014cc:	687b      	ldr	r3, [r7, #4]
  4014ce:	fbb2 f3f3 	udiv	r3, r2, r3
  4014d2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4014d4:	697b      	ldr	r3, [r7, #20]
  4014d6:	683a      	ldr	r2, [r7, #0]
  4014d8:	fb02 f303 	mul.w	r3, r2, r3
  4014dc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4014de:	683b      	ldr	r3, [r7, #0]
  4014e0:	3b01      	subs	r3, #1
  4014e2:	041a      	lsls	r2, r3, #16
  4014e4:	4b07      	ldr	r3, [pc, #28]	; (401504 <pll_config_init+0x68>)
  4014e6:	4013      	ands	r3, r2
  4014e8:	687a      	ldr	r2, [r7, #4]
  4014ea:	b2d2      	uxtb	r2, r2
  4014ec:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4014ee:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4014f2:	68fb      	ldr	r3, [r7, #12]
  4014f4:	601a      	str	r2, [r3, #0]
	}
}
  4014f6:	bf00      	nop
  4014f8:	3718      	adds	r7, #24
  4014fa:	46bd      	mov	sp, r7
  4014fc:	bd80      	pop	{r7, pc}
  4014fe:	bf00      	nop
  401500:	004013fd 	.word	0x004013fd
  401504:	07ff0000 	.word	0x07ff0000

00401508 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401508:	b580      	push	{r7, lr}
  40150a:	b082      	sub	sp, #8
  40150c:	af00      	add	r7, sp, #0
  40150e:	6078      	str	r0, [r7, #4]
  401510:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401512:	683b      	ldr	r3, [r7, #0]
  401514:	2b00      	cmp	r3, #0
  401516:	d108      	bne.n	40152a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401518:	4b09      	ldr	r3, [pc, #36]	; (401540 <pll_enable+0x38>)
  40151a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40151c:	4a09      	ldr	r2, [pc, #36]	; (401544 <pll_enable+0x3c>)
  40151e:	687b      	ldr	r3, [r7, #4]
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401526:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  401528:	e005      	b.n	401536 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40152a:	4a06      	ldr	r2, [pc, #24]	; (401544 <pll_enable+0x3c>)
  40152c:	687b      	ldr	r3, [r7, #4]
  40152e:	681b      	ldr	r3, [r3, #0]
  401530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401534:	61d3      	str	r3, [r2, #28]
}
  401536:	bf00      	nop
  401538:	3708      	adds	r7, #8
  40153a:	46bd      	mov	sp, r7
  40153c:	bd80      	pop	{r7, pc}
  40153e:	bf00      	nop
  401540:	00402381 	.word	0x00402381
  401544:	400e0600 	.word	0x400e0600

00401548 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401548:	b580      	push	{r7, lr}
  40154a:	b082      	sub	sp, #8
  40154c:	af00      	add	r7, sp, #0
  40154e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401550:	687b      	ldr	r3, [r7, #4]
  401552:	2b00      	cmp	r3, #0
  401554:	d103      	bne.n	40155e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  401556:	4b05      	ldr	r3, [pc, #20]	; (40156c <pll_is_locked+0x24>)
  401558:	4798      	blx	r3
  40155a:	4603      	mov	r3, r0
  40155c:	e002      	b.n	401564 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40155e:	4b04      	ldr	r3, [pc, #16]	; (401570 <pll_is_locked+0x28>)
  401560:	4798      	blx	r3
  401562:	4603      	mov	r3, r0
	}
}
  401564:	4618      	mov	r0, r3
  401566:	3708      	adds	r7, #8
  401568:	46bd      	mov	sp, r7
  40156a:	bd80      	pop	{r7, pc}
  40156c:	0040239d 	.word	0x0040239d
  401570:	004023b9 	.word	0x004023b9

00401574 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401574:	b580      	push	{r7, lr}
  401576:	b082      	sub	sp, #8
  401578:	af00      	add	r7, sp, #0
  40157a:	4603      	mov	r3, r0
  40157c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40157e:	79fb      	ldrb	r3, [r7, #7]
  401580:	3b03      	subs	r3, #3
  401582:	2b04      	cmp	r3, #4
  401584:	d808      	bhi.n	401598 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401586:	79fb      	ldrb	r3, [r7, #7]
  401588:	4618      	mov	r0, r3
  40158a:	4b06      	ldr	r3, [pc, #24]	; (4015a4 <pll_enable_source+0x30>)
  40158c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40158e:	79fb      	ldrb	r3, [r7, #7]
  401590:	4618      	mov	r0, r3
  401592:	4b05      	ldr	r3, [pc, #20]	; (4015a8 <pll_enable_source+0x34>)
  401594:	4798      	blx	r3
		break;
  401596:	e000      	b.n	40159a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401598:	bf00      	nop
	}
}
  40159a:	bf00      	nop
  40159c:	3708      	adds	r7, #8
  40159e:	46bd      	mov	sp, r7
  4015a0:	bd80      	pop	{r7, pc}
  4015a2:	bf00      	nop
  4015a4:	00401305 	.word	0x00401305
  4015a8:	00401471 	.word	0x00401471

004015ac <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4015ac:	b580      	push	{r7, lr}
  4015ae:	b082      	sub	sp, #8
  4015b0:	af00      	add	r7, sp, #0
  4015b2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4015b4:	bf00      	nop
  4015b6:	6878      	ldr	r0, [r7, #4]
  4015b8:	4b04      	ldr	r3, [pc, #16]	; (4015cc <pll_wait_for_lock+0x20>)
  4015ba:	4798      	blx	r3
  4015bc:	4603      	mov	r3, r0
  4015be:	2b00      	cmp	r3, #0
  4015c0:	d0f9      	beq.n	4015b6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4015c2:	2300      	movs	r3, #0
}
  4015c4:	4618      	mov	r0, r3
  4015c6:	3708      	adds	r7, #8
  4015c8:	46bd      	mov	sp, r7
  4015ca:	bd80      	pop	{r7, pc}
  4015cc:	00401549 	.word	0x00401549

004015d0 <sysclk_get_main_hz>:
{
  4015d0:	b580      	push	{r7, lr}
  4015d2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4015d4:	2006      	movs	r0, #6
  4015d6:	4b05      	ldr	r3, [pc, #20]	; (4015ec <sysclk_get_main_hz+0x1c>)
  4015d8:	4798      	blx	r3
  4015da:	4602      	mov	r2, r0
  4015dc:	4613      	mov	r3, r2
  4015de:	009b      	lsls	r3, r3, #2
  4015e0:	4413      	add	r3, r2
  4015e2:	009a      	lsls	r2, r3, #2
  4015e4:	4413      	add	r3, r2
}
  4015e6:	4618      	mov	r0, r3
  4015e8:	bd80      	pop	{r7, pc}
  4015ea:	bf00      	nop
  4015ec:	004013fd 	.word	0x004013fd

004015f0 <sysclk_get_cpu_hz>:
{
  4015f0:	b580      	push	{r7, lr}
  4015f2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4015f4:	4b02      	ldr	r3, [pc, #8]	; (401600 <sysclk_get_cpu_hz+0x10>)
  4015f6:	4798      	blx	r3
  4015f8:	4603      	mov	r3, r0
}
  4015fa:	4618      	mov	r0, r3
  4015fc:	bd80      	pop	{r7, pc}
  4015fe:	bf00      	nop
  401600:	004015d1 	.word	0x004015d1

00401604 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401604:	b590      	push	{r4, r7, lr}
  401606:	b083      	sub	sp, #12
  401608:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40160a:	4813      	ldr	r0, [pc, #76]	; (401658 <sysclk_init+0x54>)
  40160c:	4b13      	ldr	r3, [pc, #76]	; (40165c <sysclk_init+0x58>)
  40160e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  401610:	2006      	movs	r0, #6
  401612:	4b13      	ldr	r3, [pc, #76]	; (401660 <sysclk_init+0x5c>)
  401614:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401616:	1d38      	adds	r0, r7, #4
  401618:	2319      	movs	r3, #25
  40161a:	2201      	movs	r2, #1
  40161c:	2106      	movs	r1, #6
  40161e:	4c11      	ldr	r4, [pc, #68]	; (401664 <sysclk_init+0x60>)
  401620:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401622:	1d3b      	adds	r3, r7, #4
  401624:	2100      	movs	r1, #0
  401626:	4618      	mov	r0, r3
  401628:	4b0f      	ldr	r3, [pc, #60]	; (401668 <sysclk_init+0x64>)
  40162a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40162c:	2000      	movs	r0, #0
  40162e:	4b0f      	ldr	r3, [pc, #60]	; (40166c <sysclk_init+0x68>)
  401630:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401632:	2002      	movs	r0, #2
  401634:	4b0e      	ldr	r3, [pc, #56]	; (401670 <sysclk_init+0x6c>)
  401636:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401638:	2000      	movs	r0, #0
  40163a:	4b0e      	ldr	r3, [pc, #56]	; (401674 <sysclk_init+0x70>)
  40163c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40163e:	4b0e      	ldr	r3, [pc, #56]	; (401678 <sysclk_init+0x74>)
  401640:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401642:	4b0e      	ldr	r3, [pc, #56]	; (40167c <sysclk_init+0x78>)
  401644:	4798      	blx	r3
  401646:	4603      	mov	r3, r0
  401648:	4618      	mov	r0, r3
  40164a:	4b04      	ldr	r3, [pc, #16]	; (40165c <sysclk_init+0x58>)
  40164c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40164e:	bf00      	nop
  401650:	370c      	adds	r7, #12
  401652:	46bd      	mov	sp, r7
  401654:	bd90      	pop	{r4, r7, pc}
  401656:	bf00      	nop
  401658:	11e1a300 	.word	0x11e1a300
  40165c:	00402701 	.word	0x00402701
  401660:	00401575 	.word	0x00401575
  401664:	0040149d 	.word	0x0040149d
  401668:	00401509 	.word	0x00401509
  40166c:	004015ad 	.word	0x004015ad
  401670:	00402111 	.word	0x00402111
  401674:	0040218d 	.word	0x0040218d
  401678:	00402599 	.word	0x00402599
  40167c:	004015f1 	.word	0x004015f1

00401680 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401680:	b480      	push	{r7}
  401682:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401688:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40168c:	4b09      	ldr	r3, [pc, #36]	; (4016b4 <SCB_EnableICache+0x34>)
  40168e:	2200      	movs	r2, #0
  401690:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401694:	4a07      	ldr	r2, [pc, #28]	; (4016b4 <SCB_EnableICache+0x34>)
  401696:	4b07      	ldr	r3, [pc, #28]	; (4016b4 <SCB_EnableICache+0x34>)
  401698:	695b      	ldr	r3, [r3, #20]
  40169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40169e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  4016a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4016a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  4016a8:	bf00      	nop
  4016aa:	46bd      	mov	sp, r7
  4016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop
  4016b4:	e000ed00 	.word	0xe000ed00

004016b8 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  4016b8:	b480      	push	{r7}
  4016ba:	b08b      	sub	sp, #44	; 0x2c
  4016bc:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4016be:	4b26      	ldr	r3, [pc, #152]	; (401758 <SCB_EnableDCache+0xa0>)
  4016c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4016c4:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  4016c6:	69fb      	ldr	r3, [r7, #28]
  4016c8:	0b5b      	lsrs	r3, r3, #13
  4016ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4016ce:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4016d0:	69fb      	ldr	r3, [r7, #28]
  4016d2:	f003 0307 	and.w	r3, r3, #7
  4016d6:	3304      	adds	r3, #4
  4016d8:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  4016da:	69fb      	ldr	r3, [r7, #28]
  4016dc:	08db      	lsrs	r3, r3, #3
  4016de:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4016e2:	617b      	str	r3, [r7, #20]
  4016e4:	697b      	ldr	r3, [r7, #20]
  4016e6:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4016e8:	68bb      	ldr	r3, [r7, #8]
  4016ea:	fab3 f383 	clz	r3, r3
  4016ee:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  4016f0:	687b      	ldr	r3, [r7, #4]
  4016f2:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  4016f4:	f003 031f 	and.w	r3, r3, #31
  4016f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  4016fa:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4016fe:	697b      	ldr	r3, [r7, #20]
  401700:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401702:	6a3a      	ldr	r2, [r7, #32]
  401704:	693b      	ldr	r3, [r7, #16]
  401706:	fa02 f303 	lsl.w	r3, r2, r3
  40170a:	4619      	mov	r1, r3
  40170c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40170e:	69bb      	ldr	r3, [r7, #24]
  401710:	fa02 f303 	lsl.w	r3, r2, r3
  401714:	430b      	orrs	r3, r1
  401716:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  401718:	4a0f      	ldr	r2, [pc, #60]	; (401758 <SCB_EnableDCache+0xa0>)
  40171a:	68fb      	ldr	r3, [r7, #12]
  40171c:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  401720:	6a3b      	ldr	r3, [r7, #32]
  401722:	1e5a      	subs	r2, r3, #1
  401724:	623a      	str	r2, [r7, #32]
  401726:	2b00      	cmp	r3, #0
  401728:	d1eb      	bne.n	401702 <SCB_EnableDCache+0x4a>
        } while(sets--);
  40172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40172c:	1e5a      	subs	r2, r3, #1
  40172e:	627a      	str	r2, [r7, #36]	; 0x24
  401730:	2b00      	cmp	r3, #0
  401732:	d1e4      	bne.n	4016fe <SCB_EnableDCache+0x46>
  401734:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401738:	4a07      	ldr	r2, [pc, #28]	; (401758 <SCB_EnableDCache+0xa0>)
  40173a:	4b07      	ldr	r3, [pc, #28]	; (401758 <SCB_EnableDCache+0xa0>)
  40173c:	695b      	ldr	r3, [r3, #20]
  40173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401742:	6153      	str	r3, [r2, #20]
  401744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401748:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  40174c:	bf00      	nop
  40174e:	372c      	adds	r7, #44	; 0x2c
  401750:	46bd      	mov	sp, r7
  401752:	f85d 7b04 	ldr.w	r7, [sp], #4
  401756:	4770      	bx	lr
  401758:	e000ed00 	.word	0xe000ed00

0040175c <sysclk_enable_peripheral_clock>:
{
  40175c:	b580      	push	{r7, lr}
  40175e:	b082      	sub	sp, #8
  401760:	af00      	add	r7, sp, #0
  401762:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401764:	6878      	ldr	r0, [r7, #4]
  401766:	4b03      	ldr	r3, [pc, #12]	; (401774 <sysclk_enable_peripheral_clock+0x18>)
  401768:	4798      	blx	r3
}
  40176a:	bf00      	nop
  40176c:	3708      	adds	r7, #8
  40176e:	46bd      	mov	sp, r7
  401770:	bd80      	pop	{r7, pc}
  401772:	bf00      	nop
  401774:	004023d5 	.word	0x004023d5

00401778 <ioport_init>:
{
  401778:	b580      	push	{r7, lr}
  40177a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40177c:	200a      	movs	r0, #10
  40177e:	4b08      	ldr	r3, [pc, #32]	; (4017a0 <ioport_init+0x28>)
  401780:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401782:	200b      	movs	r0, #11
  401784:	4b06      	ldr	r3, [pc, #24]	; (4017a0 <ioport_init+0x28>)
  401786:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  401788:	200c      	movs	r0, #12
  40178a:	4b05      	ldr	r3, [pc, #20]	; (4017a0 <ioport_init+0x28>)
  40178c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  40178e:	2010      	movs	r0, #16
  401790:	4b03      	ldr	r3, [pc, #12]	; (4017a0 <ioport_init+0x28>)
  401792:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401794:	2011      	movs	r0, #17
  401796:	4b02      	ldr	r3, [pc, #8]	; (4017a0 <ioport_init+0x28>)
  401798:	4798      	blx	r3
}
  40179a:	bf00      	nop
  40179c:	bd80      	pop	{r7, pc}
  40179e:	bf00      	nop
  4017a0:	0040175d 	.word	0x0040175d

004017a4 <ioport_set_pin_mode>:
{
  4017a4:	b480      	push	{r7}
  4017a6:	b08d      	sub	sp, #52	; 0x34
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	6078      	str	r0, [r7, #4]
  4017ac:	6039      	str	r1, [r7, #0]
  4017ae:	687b      	ldr	r3, [r7, #4]
  4017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4017b2:	683b      	ldr	r3, [r7, #0]
  4017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  4017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017b8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4017bc:	095a      	lsrs	r2, r3, #5
  4017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017c0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4017c2:	6a3b      	ldr	r3, [r7, #32]
  4017c4:	f003 031f 	and.w	r3, r3, #31
  4017c8:	2101      	movs	r1, #1
  4017ca:	fa01 f303 	lsl.w	r3, r1, r3
  4017ce:	61fa      	str	r2, [r7, #28]
  4017d0:	61bb      	str	r3, [r7, #24]
  4017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4017d4:	617b      	str	r3, [r7, #20]
  4017d6:	69fb      	ldr	r3, [r7, #28]
  4017d8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4017da:	693a      	ldr	r2, [r7, #16]
  4017dc:	4b37      	ldr	r3, [pc, #220]	; (4018bc <ioport_set_pin_mode+0x118>)
  4017de:	4413      	add	r3, r2
  4017e0:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4017e2:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  4017e4:	697b      	ldr	r3, [r7, #20]
  4017e6:	f003 0308 	and.w	r3, r3, #8
  4017ea:	2b00      	cmp	r3, #0
  4017ec:	d003      	beq.n	4017f6 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4017ee:	68fb      	ldr	r3, [r7, #12]
  4017f0:	69ba      	ldr	r2, [r7, #24]
  4017f2:	665a      	str	r2, [r3, #100]	; 0x64
  4017f4:	e002      	b.n	4017fc <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  4017f6:	68fb      	ldr	r3, [r7, #12]
  4017f8:	69ba      	ldr	r2, [r7, #24]
  4017fa:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4017fc:	697b      	ldr	r3, [r7, #20]
  4017fe:	f003 0310 	and.w	r3, r3, #16
  401802:	2b00      	cmp	r3, #0
  401804:	d004      	beq.n	401810 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401806:	68fb      	ldr	r3, [r7, #12]
  401808:	69ba      	ldr	r2, [r7, #24]
  40180a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40180e:	e003      	b.n	401818 <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  401810:	68fb      	ldr	r3, [r7, #12]
  401812:	69ba      	ldr	r2, [r7, #24]
  401814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401818:	697b      	ldr	r3, [r7, #20]
  40181a:	f003 0320 	and.w	r3, r3, #32
  40181e:	2b00      	cmp	r3, #0
  401820:	d003      	beq.n	40182a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  401822:	68fb      	ldr	r3, [r7, #12]
  401824:	69ba      	ldr	r2, [r7, #24]
  401826:	651a      	str	r2, [r3, #80]	; 0x50
  401828:	e002      	b.n	401830 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  40182a:	68fb      	ldr	r3, [r7, #12]
  40182c:	69ba      	ldr	r2, [r7, #24]
  40182e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401830:	697b      	ldr	r3, [r7, #20]
  401832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401836:	2b00      	cmp	r3, #0
  401838:	d003      	beq.n	401842 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40183a:	68fb      	ldr	r3, [r7, #12]
  40183c:	69ba      	ldr	r2, [r7, #24]
  40183e:	621a      	str	r2, [r3, #32]
  401840:	e002      	b.n	401848 <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  401842:	68fb      	ldr	r3, [r7, #12]
  401844:	69ba      	ldr	r2, [r7, #24]
  401846:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401848:	697b      	ldr	r3, [r7, #20]
  40184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40184e:	2b00      	cmp	r3, #0
  401850:	d004      	beq.n	40185c <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  401852:	68fb      	ldr	r3, [r7, #12]
  401854:	69ba      	ldr	r2, [r7, #24]
  401856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40185a:	e003      	b.n	401864 <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  40185c:	68fb      	ldr	r3, [r7, #12]
  40185e:	69ba      	ldr	r2, [r7, #24]
  401860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401864:	697b      	ldr	r3, [r7, #20]
  401866:	f003 0301 	and.w	r3, r3, #1
  40186a:	2b00      	cmp	r3, #0
  40186c:	d006      	beq.n	40187c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40186e:	68fb      	ldr	r3, [r7, #12]
  401870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401872:	69bb      	ldr	r3, [r7, #24]
  401874:	431a      	orrs	r2, r3
  401876:	68fb      	ldr	r3, [r7, #12]
  401878:	671a      	str	r2, [r3, #112]	; 0x70
  40187a:	e006      	b.n	40188a <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  40187c:	68fb      	ldr	r3, [r7, #12]
  40187e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401880:	69bb      	ldr	r3, [r7, #24]
  401882:	43db      	mvns	r3, r3
  401884:	401a      	ands	r2, r3
  401886:	68fb      	ldr	r3, [r7, #12]
  401888:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  40188a:	697b      	ldr	r3, [r7, #20]
  40188c:	f003 0302 	and.w	r3, r3, #2
  401890:	2b00      	cmp	r3, #0
  401892:	d006      	beq.n	4018a2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401894:	68fb      	ldr	r3, [r7, #12]
  401896:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401898:	69bb      	ldr	r3, [r7, #24]
  40189a:	431a      	orrs	r2, r3
  40189c:	68fb      	ldr	r3, [r7, #12]
  40189e:	675a      	str	r2, [r3, #116]	; 0x74
}
  4018a0:	e006      	b.n	4018b0 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  4018a2:	68fb      	ldr	r3, [r7, #12]
  4018a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018a6:	69bb      	ldr	r3, [r7, #24]
  4018a8:	43db      	mvns	r3, r3
  4018aa:	401a      	ands	r2, r3
  4018ac:	68fb      	ldr	r3, [r7, #12]
  4018ae:	675a      	str	r2, [r3, #116]	; 0x74
  4018b0:	bf00      	nop
  4018b2:	3734      	adds	r7, #52	; 0x34
  4018b4:	46bd      	mov	sp, r7
  4018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018ba:	4770      	bx	lr
  4018bc:	00200707 	.word	0x00200707

004018c0 <ioport_set_pin_dir>:
{
  4018c0:	b480      	push	{r7}
  4018c2:	b08d      	sub	sp, #52	; 0x34
  4018c4:	af00      	add	r7, sp, #0
  4018c6:	6078      	str	r0, [r7, #4]
  4018c8:	460b      	mov	r3, r1
  4018ca:	70fb      	strb	r3, [r7, #3]
  4018cc:	687b      	ldr	r3, [r7, #4]
  4018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4018d0:	78fb      	ldrb	r3, [r7, #3]
  4018d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4018d8:	627b      	str	r3, [r7, #36]	; 0x24
  4018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4018dc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4018de:	6a3b      	ldr	r3, [r7, #32]
  4018e0:	095b      	lsrs	r3, r3, #5
  4018e2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4018e4:	69fa      	ldr	r2, [r7, #28]
  4018e6:	4b17      	ldr	r3, [pc, #92]	; (401944 <ioport_set_pin_dir+0x84>)
  4018e8:	4413      	add	r3, r2
  4018ea:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4018ec:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4018ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4018f2:	2b01      	cmp	r3, #1
  4018f4:	d109      	bne.n	40190a <ioport_set_pin_dir+0x4a>
  4018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4018f8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4018fa:	697b      	ldr	r3, [r7, #20]
  4018fc:	f003 031f 	and.w	r3, r3, #31
  401900:	2201      	movs	r2, #1
  401902:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401904:	69bb      	ldr	r3, [r7, #24]
  401906:	611a      	str	r2, [r3, #16]
  401908:	e00c      	b.n	401924 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40190a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40190e:	2b00      	cmp	r3, #0
  401910:	d108      	bne.n	401924 <ioport_set_pin_dir+0x64>
  401912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401914:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401916:	693b      	ldr	r3, [r7, #16]
  401918:	f003 031f 	and.w	r3, r3, #31
  40191c:	2201      	movs	r2, #1
  40191e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401920:	69bb      	ldr	r3, [r7, #24]
  401922:	615a      	str	r2, [r3, #20]
  401924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401926:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401928:	68fb      	ldr	r3, [r7, #12]
  40192a:	f003 031f 	and.w	r3, r3, #31
  40192e:	2201      	movs	r2, #1
  401930:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401932:	69bb      	ldr	r3, [r7, #24]
  401934:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401938:	bf00      	nop
  40193a:	3734      	adds	r7, #52	; 0x34
  40193c:	46bd      	mov	sp, r7
  40193e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401942:	4770      	bx	lr
  401944:	00200707 	.word	0x00200707

00401948 <ioport_set_pin_level>:
{
  401948:	b480      	push	{r7}
  40194a:	b08b      	sub	sp, #44	; 0x2c
  40194c:	af00      	add	r7, sp, #0
  40194e:	6078      	str	r0, [r7, #4]
  401950:	460b      	mov	r3, r1
  401952:	70fb      	strb	r3, [r7, #3]
  401954:	687b      	ldr	r3, [r7, #4]
  401956:	627b      	str	r3, [r7, #36]	; 0x24
  401958:	78fb      	ldrb	r3, [r7, #3]
  40195a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401960:	61fb      	str	r3, [r7, #28]
  401962:	69fb      	ldr	r3, [r7, #28]
  401964:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401966:	69bb      	ldr	r3, [r7, #24]
  401968:	095b      	lsrs	r3, r3, #5
  40196a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40196c:	697a      	ldr	r2, [r7, #20]
  40196e:	4b10      	ldr	r3, [pc, #64]	; (4019b0 <ioport_set_pin_level+0x68>)
  401970:	4413      	add	r3, r2
  401972:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401974:	613b      	str	r3, [r7, #16]
	if (level) {
  401976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40197a:	2b00      	cmp	r3, #0
  40197c:	d009      	beq.n	401992 <ioport_set_pin_level+0x4a>
  40197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401980:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401982:	68fb      	ldr	r3, [r7, #12]
  401984:	f003 031f 	and.w	r3, r3, #31
  401988:	2201      	movs	r2, #1
  40198a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40198c:	693b      	ldr	r3, [r7, #16]
  40198e:	631a      	str	r2, [r3, #48]	; 0x30
}
  401990:	e008      	b.n	4019a4 <ioport_set_pin_level+0x5c>
  401992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401994:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401996:	68bb      	ldr	r3, [r7, #8]
  401998:	f003 031f 	and.w	r3, r3, #31
  40199c:	2201      	movs	r2, #1
  40199e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4019a0:	693b      	ldr	r3, [r7, #16]
  4019a2:	635a      	str	r2, [r3, #52]	; 0x34
  4019a4:	bf00      	nop
  4019a6:	372c      	adds	r7, #44	; 0x2c
  4019a8:	46bd      	mov	sp, r7
  4019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ae:	4770      	bx	lr
  4019b0:	00200707 	.word	0x00200707

004019b4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4019b4:	b480      	push	{r7}
  4019b6:	b08d      	sub	sp, #52	; 0x34
  4019b8:	af00      	add	r7, sp, #0
  4019ba:	6078      	str	r0, [r7, #4]
  4019bc:	460b      	mov	r3, r1
  4019be:	70fb      	strb	r3, [r7, #3]
  4019c0:	687b      	ldr	r3, [r7, #4]
  4019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4019c4:	78fb      	ldrb	r3, [r7, #3]
  4019c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019cc:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019d0:	095a      	lsrs	r2, r3, #5
  4019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019d4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4019d6:	6a3b      	ldr	r3, [r7, #32]
  4019d8:	f003 031f 	and.w	r3, r3, #31
  4019dc:	2101      	movs	r1, #1
  4019de:	fa01 f303 	lsl.w	r3, r1, r3
  4019e2:	61fa      	str	r2, [r7, #28]
  4019e4:	61bb      	str	r3, [r7, #24]
  4019e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4019ea:	75fb      	strb	r3, [r7, #23]
  4019ec:	69fb      	ldr	r3, [r7, #28]
  4019ee:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4019f0:	693a      	ldr	r2, [r7, #16]
  4019f2:	4b23      	ldr	r3, [pc, #140]	; (401a80 <ioport_set_pin_sense_mode+0xcc>)
  4019f4:	4413      	add	r3, r2
  4019f6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4019f8:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4019fa:	7dfb      	ldrb	r3, [r7, #23]
  4019fc:	3b01      	subs	r3, #1
  4019fe:	2b03      	cmp	r3, #3
  401a00:	d82e      	bhi.n	401a60 <ioport_set_pin_sense_mode+0xac>
  401a02:	a201      	add	r2, pc, #4	; (adr r2, 401a08 <ioport_set_pin_sense_mode+0x54>)
  401a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a08:	00401a3d 	.word	0x00401a3d
  401a0c:	00401a4f 	.word	0x00401a4f
  401a10:	00401a19 	.word	0x00401a19
  401a14:	00401a2b 	.word	0x00401a2b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401a18:	68fb      	ldr	r3, [r7, #12]
  401a1a:	69ba      	ldr	r2, [r7, #24]
  401a1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	69ba      	ldr	r2, [r7, #24]
  401a24:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401a28:	e01f      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	69ba      	ldr	r2, [r7, #24]
  401a2e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401a32:	68fb      	ldr	r3, [r7, #12]
  401a34:	69ba      	ldr	r2, [r7, #24]
  401a36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401a3a:	e016      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401a3c:	68fb      	ldr	r3, [r7, #12]
  401a3e:	69ba      	ldr	r2, [r7, #24]
  401a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401a44:	68fb      	ldr	r3, [r7, #12]
  401a46:	69ba      	ldr	r2, [r7, #24]
  401a48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401a4c:	e00d      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401a4e:	68fb      	ldr	r3, [r7, #12]
  401a50:	69ba      	ldr	r2, [r7, #24]
  401a52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401a56:	68fb      	ldr	r3, [r7, #12]
  401a58:	69ba      	ldr	r2, [r7, #24]
  401a5a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401a5e:	e004      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401a60:	68fb      	ldr	r3, [r7, #12]
  401a62:	69ba      	ldr	r2, [r7, #24]
  401a64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401a68:	e003      	b.n	401a72 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401a6a:	68fb      	ldr	r3, [r7, #12]
  401a6c:	69ba      	ldr	r2, [r7, #24]
  401a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401a72:	bf00      	nop
  401a74:	3734      	adds	r7, #52	; 0x34
  401a76:	46bd      	mov	sp, r7
  401a78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop
  401a80:	00200707 	.word	0x00200707

00401a84 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401a84:	b480      	push	{r7}
  401a86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a8c:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401a90:	4a0c      	ldr	r2, [pc, #48]	; (401ac4 <tcm_disable+0x40>)
  401a92:	4b0c      	ldr	r3, [pc, #48]	; (401ac4 <tcm_disable+0x40>)
  401a94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401a98:	f023 0301 	bic.w	r3, r3, #1
  401a9c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401aa0:	4a08      	ldr	r2, [pc, #32]	; (401ac4 <tcm_disable+0x40>)
  401aa2:	4b08      	ldr	r3, [pc, #32]	; (401ac4 <tcm_disable+0x40>)
  401aa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401aa8:	f023 0301 	bic.w	r3, r3, #1
  401aac:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401ab0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ab4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401ab8:	bf00      	nop
  401aba:	46bd      	mov	sp, r7
  401abc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac0:	4770      	bx	lr
  401ac2:	bf00      	nop
  401ac4:	e000ed00 	.word	0xe000ed00

00401ac8 <board_init>:
#endif

void board_init(void)
{
  401ac8:	b580      	push	{r7, lr}
  401aca:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401acc:	4b13      	ldr	r3, [pc, #76]	; (401b1c <board_init+0x54>)
  401ace:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ad2:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401ad4:	4b12      	ldr	r3, [pc, #72]	; (401b20 <board_init+0x58>)
  401ad6:	4798      	blx	r3
	SCB_EnableDCache();
  401ad8:	4b12      	ldr	r3, [pc, #72]	; (401b24 <board_init+0x5c>)
  401ada:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401adc:	4b12      	ldr	r3, [pc, #72]	; (401b28 <board_init+0x60>)
  401ade:	4a13      	ldr	r2, [pc, #76]	; (401b2c <board_init+0x64>)
  401ae0:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401ae2:	4b11      	ldr	r3, [pc, #68]	; (401b28 <board_init+0x60>)
  401ae4:	4a12      	ldr	r2, [pc, #72]	; (401b30 <board_init+0x68>)
  401ae6:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401ae8:	4b12      	ldr	r3, [pc, #72]	; (401b34 <board_init+0x6c>)
  401aea:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401aec:	4b12      	ldr	r3, [pc, #72]	; (401b38 <board_init+0x70>)
  401aee:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401af0:	2101      	movs	r1, #1
  401af2:	2048      	movs	r0, #72	; 0x48
  401af4:	4b11      	ldr	r3, [pc, #68]	; (401b3c <board_init+0x74>)
  401af6:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401af8:	2101      	movs	r1, #1
  401afa:	2048      	movs	r0, #72	; 0x48
  401afc:	4b10      	ldr	r3, [pc, #64]	; (401b40 <board_init+0x78>)
  401afe:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401b00:	2100      	movs	r1, #0
  401b02:	200b      	movs	r0, #11
  401b04:	4b0d      	ldr	r3, [pc, #52]	; (401b3c <board_init+0x74>)
  401b06:	4798      	blx	r3
  401b08:	2188      	movs	r1, #136	; 0x88
  401b0a:	200b      	movs	r0, #11
  401b0c:	4b0d      	ldr	r3, [pc, #52]	; (401b44 <board_init+0x7c>)
  401b0e:	4798      	blx	r3
  401b10:	2102      	movs	r1, #2
  401b12:	200b      	movs	r0, #11
  401b14:	4b0c      	ldr	r3, [pc, #48]	; (401b48 <board_init+0x80>)
  401b16:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401b18:	bf00      	nop
  401b1a:	bd80      	pop	{r7, pc}
  401b1c:	400e1850 	.word	0x400e1850
  401b20:	00401681 	.word	0x00401681
  401b24:	004016b9 	.word	0x004016b9
  401b28:	400e0c00 	.word	0x400e0c00
  401b2c:	5a00080c 	.word	0x5a00080c
  401b30:	5a00070c 	.word	0x5a00070c
  401b34:	00401a85 	.word	0x00401a85
  401b38:	00401779 	.word	0x00401779
  401b3c:	004018c1 	.word	0x004018c1
  401b40:	00401949 	.word	0x00401949
  401b44:	004017a5 	.word	0x004017a5
  401b48:	004019b5 	.word	0x004019b5

00401b4c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401b4c:	b480      	push	{r7}
  401b4e:	b085      	sub	sp, #20
  401b50:	af00      	add	r7, sp, #0
  401b52:	60f8      	str	r0, [r7, #12]
  401b54:	60b9      	str	r1, [r7, #8]
  401b56:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b58:	687b      	ldr	r3, [r7, #4]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d003      	beq.n	401b66 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401b5e:	68fb      	ldr	r3, [r7, #12]
  401b60:	68ba      	ldr	r2, [r7, #8]
  401b62:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401b64:	e002      	b.n	401b6c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401b66:	68fb      	ldr	r3, [r7, #12]
  401b68:	68ba      	ldr	r2, [r7, #8]
  401b6a:	661a      	str	r2, [r3, #96]	; 0x60
}
  401b6c:	bf00      	nop
  401b6e:	3714      	adds	r7, #20
  401b70:	46bd      	mov	sp, r7
  401b72:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b76:	4770      	bx	lr

00401b78 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401b78:	b480      	push	{r7}
  401b7a:	b085      	sub	sp, #20
  401b7c:	af00      	add	r7, sp, #0
  401b7e:	60f8      	str	r0, [r7, #12]
  401b80:	60b9      	str	r1, [r7, #8]
  401b82:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401b84:	68fb      	ldr	r3, [r7, #12]
  401b86:	68ba      	ldr	r2, [r7, #8]
  401b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	005b      	lsls	r3, r3, #1
  401b90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401b94:	fbb2 f3f3 	udiv	r3, r2, r3
  401b98:	3b01      	subs	r3, #1
  401b9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401b9e:	68fb      	ldr	r3, [r7, #12]
  401ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401ba4:	bf00      	nop
  401ba6:	3714      	adds	r7, #20
  401ba8:	46bd      	mov	sp, r7
  401baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bae:	4770      	bx	lr

00401bb0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401bb0:	b480      	push	{r7}
  401bb2:	b087      	sub	sp, #28
  401bb4:	af00      	add	r7, sp, #0
  401bb6:	60f8      	str	r0, [r7, #12]
  401bb8:	60b9      	str	r1, [r7, #8]
  401bba:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401bbc:	68fb      	ldr	r3, [r7, #12]
  401bbe:	687a      	ldr	r2, [r7, #4]
  401bc0:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401bc2:	68bb      	ldr	r3, [r7, #8]
  401bc4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401bc8:	d04a      	beq.n	401c60 <pio_set_peripheral+0xb0>
  401bca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401bce:	d808      	bhi.n	401be2 <pio_set_peripheral+0x32>
  401bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401bd4:	d016      	beq.n	401c04 <pio_set_peripheral+0x54>
  401bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401bda:	d02c      	beq.n	401c36 <pio_set_peripheral+0x86>
  401bdc:	2b00      	cmp	r3, #0
  401bde:	d069      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401be0:	e064      	b.n	401cac <pio_set_peripheral+0xfc>
  401be2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401be6:	d065      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401be8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401bec:	d803      	bhi.n	401bf6 <pio_set_peripheral+0x46>
  401bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401bf2:	d04a      	beq.n	401c8a <pio_set_peripheral+0xda>
  401bf4:	e05a      	b.n	401cac <pio_set_peripheral+0xfc>
  401bf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401bfa:	d05b      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401bfc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401c00:	d058      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401c02:	e053      	b.n	401cac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c08:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c0a:	68fb      	ldr	r3, [r7, #12]
  401c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c0e:	687b      	ldr	r3, [r7, #4]
  401c10:	43d9      	mvns	r1, r3
  401c12:	697b      	ldr	r3, [r7, #20]
  401c14:	400b      	ands	r3, r1
  401c16:	401a      	ands	r2, r3
  401c18:	68fb      	ldr	r3, [r7, #12]
  401c1a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c1c:	68fb      	ldr	r3, [r7, #12]
  401c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c20:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c22:	68fb      	ldr	r3, [r7, #12]
  401c24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401c26:	687b      	ldr	r3, [r7, #4]
  401c28:	43d9      	mvns	r1, r3
  401c2a:	697b      	ldr	r3, [r7, #20]
  401c2c:	400b      	ands	r3, r1
  401c2e:	401a      	ands	r2, r3
  401c30:	68fb      	ldr	r3, [r7, #12]
  401c32:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c34:	e03a      	b.n	401cac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c36:	68fb      	ldr	r3, [r7, #12]
  401c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c3a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c3c:	687a      	ldr	r2, [r7, #4]
  401c3e:	697b      	ldr	r3, [r7, #20]
  401c40:	431a      	orrs	r2, r3
  401c42:	68fb      	ldr	r3, [r7, #12]
  401c44:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c46:	68fb      	ldr	r3, [r7, #12]
  401c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c4a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c4c:	68fb      	ldr	r3, [r7, #12]
  401c4e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401c50:	687b      	ldr	r3, [r7, #4]
  401c52:	43d9      	mvns	r1, r3
  401c54:	697b      	ldr	r3, [r7, #20]
  401c56:	400b      	ands	r3, r1
  401c58:	401a      	ands	r2, r3
  401c5a:	68fb      	ldr	r3, [r7, #12]
  401c5c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c5e:	e025      	b.n	401cac <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c60:	68fb      	ldr	r3, [r7, #12]
  401c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c64:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c66:	68fb      	ldr	r3, [r7, #12]
  401c68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c6a:	687b      	ldr	r3, [r7, #4]
  401c6c:	43d9      	mvns	r1, r3
  401c6e:	697b      	ldr	r3, [r7, #20]
  401c70:	400b      	ands	r3, r1
  401c72:	401a      	ands	r2, r3
  401c74:	68fb      	ldr	r3, [r7, #12]
  401c76:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c78:	68fb      	ldr	r3, [r7, #12]
  401c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c7c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c7e:	687a      	ldr	r2, [r7, #4]
  401c80:	697b      	ldr	r3, [r7, #20]
  401c82:	431a      	orrs	r2, r3
  401c84:	68fb      	ldr	r3, [r7, #12]
  401c86:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c88:	e010      	b.n	401cac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c8a:	68fb      	ldr	r3, [r7, #12]
  401c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c8e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c90:	687a      	ldr	r2, [r7, #4]
  401c92:	697b      	ldr	r3, [r7, #20]
  401c94:	431a      	orrs	r2, r3
  401c96:	68fb      	ldr	r3, [r7, #12]
  401c98:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c9a:	68fb      	ldr	r3, [r7, #12]
  401c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c9e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ca0:	687a      	ldr	r2, [r7, #4]
  401ca2:	697b      	ldr	r3, [r7, #20]
  401ca4:	431a      	orrs	r2, r3
  401ca6:	68fb      	ldr	r3, [r7, #12]
  401ca8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401caa:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401cac:	68fb      	ldr	r3, [r7, #12]
  401cae:	687a      	ldr	r2, [r7, #4]
  401cb0:	605a      	str	r2, [r3, #4]
  401cb2:	e000      	b.n	401cb6 <pio_set_peripheral+0x106>
		return;
  401cb4:	bf00      	nop
}
  401cb6:	371c      	adds	r7, #28
  401cb8:	46bd      	mov	sp, r7
  401cba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cbe:	4770      	bx	lr

00401cc0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401cc0:	b580      	push	{r7, lr}
  401cc2:	b084      	sub	sp, #16
  401cc4:	af00      	add	r7, sp, #0
  401cc6:	60f8      	str	r0, [r7, #12]
  401cc8:	60b9      	str	r1, [r7, #8]
  401cca:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401ccc:	68b9      	ldr	r1, [r7, #8]
  401cce:	68f8      	ldr	r0, [r7, #12]
  401cd0:	4b19      	ldr	r3, [pc, #100]	; (401d38 <pio_set_input+0x78>)
  401cd2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401cd4:	687b      	ldr	r3, [r7, #4]
  401cd6:	f003 0301 	and.w	r3, r3, #1
  401cda:	461a      	mov	r2, r3
  401cdc:	68b9      	ldr	r1, [r7, #8]
  401cde:	68f8      	ldr	r0, [r7, #12]
  401ce0:	4b16      	ldr	r3, [pc, #88]	; (401d3c <pio_set_input+0x7c>)
  401ce2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ce4:	687b      	ldr	r3, [r7, #4]
  401ce6:	f003 030a 	and.w	r3, r3, #10
  401cea:	2b00      	cmp	r3, #0
  401cec:	d003      	beq.n	401cf6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401cee:	68fb      	ldr	r3, [r7, #12]
  401cf0:	68ba      	ldr	r2, [r7, #8]
  401cf2:	621a      	str	r2, [r3, #32]
  401cf4:	e002      	b.n	401cfc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401cf6:	68fb      	ldr	r3, [r7, #12]
  401cf8:	68ba      	ldr	r2, [r7, #8]
  401cfa:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	f003 0302 	and.w	r3, r3, #2
  401d02:	2b00      	cmp	r3, #0
  401d04:	d004      	beq.n	401d10 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	68ba      	ldr	r2, [r7, #8]
  401d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401d0e:	e008      	b.n	401d22 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401d10:	687b      	ldr	r3, [r7, #4]
  401d12:	f003 0308 	and.w	r3, r3, #8
  401d16:	2b00      	cmp	r3, #0
  401d18:	d003      	beq.n	401d22 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401d1a:	68fb      	ldr	r3, [r7, #12]
  401d1c:	68ba      	ldr	r2, [r7, #8]
  401d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401d22:	68fb      	ldr	r3, [r7, #12]
  401d24:	68ba      	ldr	r2, [r7, #8]
  401d26:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401d28:	68fb      	ldr	r3, [r7, #12]
  401d2a:	68ba      	ldr	r2, [r7, #8]
  401d2c:	601a      	str	r2, [r3, #0]
}
  401d2e:	bf00      	nop
  401d30:	3710      	adds	r7, #16
  401d32:	46bd      	mov	sp, r7
  401d34:	bd80      	pop	{r7, pc}
  401d36:	bf00      	nop
  401d38:	00401ef9 	.word	0x00401ef9
  401d3c:	00401b4d 	.word	0x00401b4d

00401d40 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401d40:	b580      	push	{r7, lr}
  401d42:	b084      	sub	sp, #16
  401d44:	af00      	add	r7, sp, #0
  401d46:	60f8      	str	r0, [r7, #12]
  401d48:	60b9      	str	r1, [r7, #8]
  401d4a:	607a      	str	r2, [r7, #4]
  401d4c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401d4e:	68b9      	ldr	r1, [r7, #8]
  401d50:	68f8      	ldr	r0, [r7, #12]
  401d52:	4b12      	ldr	r3, [pc, #72]	; (401d9c <pio_set_output+0x5c>)
  401d54:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401d56:	69ba      	ldr	r2, [r7, #24]
  401d58:	68b9      	ldr	r1, [r7, #8]
  401d5a:	68f8      	ldr	r0, [r7, #12]
  401d5c:	4b10      	ldr	r3, [pc, #64]	; (401da0 <pio_set_output+0x60>)
  401d5e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d60:	683b      	ldr	r3, [r7, #0]
  401d62:	2b00      	cmp	r3, #0
  401d64:	d003      	beq.n	401d6e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	68ba      	ldr	r2, [r7, #8]
  401d6a:	651a      	str	r2, [r3, #80]	; 0x50
  401d6c:	e002      	b.n	401d74 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d6e:	68fb      	ldr	r3, [r7, #12]
  401d70:	68ba      	ldr	r2, [r7, #8]
  401d72:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d74:	687b      	ldr	r3, [r7, #4]
  401d76:	2b00      	cmp	r3, #0
  401d78:	d003      	beq.n	401d82 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401d7a:	68fb      	ldr	r3, [r7, #12]
  401d7c:	68ba      	ldr	r2, [r7, #8]
  401d7e:	631a      	str	r2, [r3, #48]	; 0x30
  401d80:	e002      	b.n	401d88 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d82:	68fb      	ldr	r3, [r7, #12]
  401d84:	68ba      	ldr	r2, [r7, #8]
  401d86:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d88:	68fb      	ldr	r3, [r7, #12]
  401d8a:	68ba      	ldr	r2, [r7, #8]
  401d8c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401d8e:	68fb      	ldr	r3, [r7, #12]
  401d90:	68ba      	ldr	r2, [r7, #8]
  401d92:	601a      	str	r2, [r3, #0]
}
  401d94:	bf00      	nop
  401d96:	3710      	adds	r7, #16
  401d98:	46bd      	mov	sp, r7
  401d9a:	bd80      	pop	{r7, pc}
  401d9c:	00401ef9 	.word	0x00401ef9
  401da0:	00401b4d 	.word	0x00401b4d

00401da4 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  401da4:	b590      	push	{r4, r7, lr}
  401da6:	b087      	sub	sp, #28
  401da8:	af02      	add	r7, sp, #8
  401daa:	60f8      	str	r0, [r7, #12]
  401dac:	60b9      	str	r1, [r7, #8]
  401dae:	607a      	str	r2, [r7, #4]
  401db0:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  401db2:	68bb      	ldr	r3, [r7, #8]
  401db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401db8:	d016      	beq.n	401de8 <pio_configure+0x44>
  401dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dbe:	d809      	bhi.n	401dd4 <pio_configure+0x30>
  401dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401dc4:	d010      	beq.n	401de8 <pio_configure+0x44>
  401dc6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401dca:	d00d      	beq.n	401de8 <pio_configure+0x44>
  401dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401dd0:	d00a      	beq.n	401de8 <pio_configure+0x44>
  401dd2:	e03d      	b.n	401e50 <pio_configure+0xac>
  401dd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401dd8:	d01a      	beq.n	401e10 <pio_configure+0x6c>
  401dda:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401dde:	d017      	beq.n	401e10 <pio_configure+0x6c>
  401de0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401de4:	d00e      	beq.n	401e04 <pio_configure+0x60>
  401de6:	e033      	b.n	401e50 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401de8:	687a      	ldr	r2, [r7, #4]
  401dea:	68b9      	ldr	r1, [r7, #8]
  401dec:	68f8      	ldr	r0, [r7, #12]
  401dee:	4b1c      	ldr	r3, [pc, #112]	; (401e60 <pio_configure+0xbc>)
  401df0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  401df2:	683b      	ldr	r3, [r7, #0]
  401df4:	f003 0301 	and.w	r3, r3, #1
  401df8:	461a      	mov	r2, r3
  401dfa:	6879      	ldr	r1, [r7, #4]
  401dfc:	68f8      	ldr	r0, [r7, #12]
  401dfe:	4b19      	ldr	r3, [pc, #100]	; (401e64 <pio_configure+0xc0>)
  401e00:	4798      	blx	r3
		break;
  401e02:	e027      	b.n	401e54 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401e04:	683a      	ldr	r2, [r7, #0]
  401e06:	6879      	ldr	r1, [r7, #4]
  401e08:	68f8      	ldr	r0, [r7, #12]
  401e0a:	4b17      	ldr	r3, [pc, #92]	; (401e68 <pio_configure+0xc4>)
  401e0c:	4798      	blx	r3
		break;
  401e0e:	e021      	b.n	401e54 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401e10:	68bb      	ldr	r3, [r7, #8]
  401e12:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e16:	bf0c      	ite	eq
  401e18:	2301      	moveq	r3, #1
  401e1a:	2300      	movne	r3, #0
  401e1c:	b2db      	uxtb	r3, r3
  401e1e:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401e20:	683b      	ldr	r3, [r7, #0]
  401e22:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401e26:	2b00      	cmp	r3, #0
  401e28:	bf14      	ite	ne
  401e2a:	2301      	movne	r3, #1
  401e2c:	2300      	moveq	r3, #0
  401e2e:	b2db      	uxtb	r3, r3
  401e30:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  401e32:	683b      	ldr	r3, [r7, #0]
  401e34:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401e38:	2b00      	cmp	r3, #0
  401e3a:	bf14      	ite	ne
  401e3c:	2301      	movne	r3, #1
  401e3e:	2300      	moveq	r3, #0
  401e40:	b2db      	uxtb	r3, r3
  401e42:	9300      	str	r3, [sp, #0]
  401e44:	460b      	mov	r3, r1
  401e46:	6879      	ldr	r1, [r7, #4]
  401e48:	68f8      	ldr	r0, [r7, #12]
  401e4a:	4c08      	ldr	r4, [pc, #32]	; (401e6c <pio_configure+0xc8>)
  401e4c:	47a0      	blx	r4
		break;
  401e4e:	e001      	b.n	401e54 <pio_configure+0xb0>

	default:
		return 0;
  401e50:	2300      	movs	r3, #0
  401e52:	e000      	b.n	401e56 <pio_configure+0xb2>
	}

	return 1;
  401e54:	2301      	movs	r3, #1
}
  401e56:	4618      	mov	r0, r3
  401e58:	3714      	adds	r7, #20
  401e5a:	46bd      	mov	sp, r7
  401e5c:	bd90      	pop	{r4, r7, pc}
  401e5e:	bf00      	nop
  401e60:	00401bb1 	.word	0x00401bb1
  401e64:	00401b4d 	.word	0x00401b4d
  401e68:	00401cc1 	.word	0x00401cc1
  401e6c:	00401d41 	.word	0x00401d41

00401e70 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401e70:	b480      	push	{r7}
  401e72:	b085      	sub	sp, #20
  401e74:	af00      	add	r7, sp, #0
  401e76:	60f8      	str	r0, [r7, #12]
  401e78:	60b9      	str	r1, [r7, #8]
  401e7a:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401e7c:	687b      	ldr	r3, [r7, #4]
  401e7e:	f003 0310 	and.w	r3, r3, #16
  401e82:	2b00      	cmp	r3, #0
  401e84:	d020      	beq.n	401ec8 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401e86:	68fb      	ldr	r3, [r7, #12]
  401e88:	68ba      	ldr	r2, [r7, #8]
  401e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401e8e:	687b      	ldr	r3, [r7, #4]
  401e90:	f003 0320 	and.w	r3, r3, #32
  401e94:	2b00      	cmp	r3, #0
  401e96:	d004      	beq.n	401ea2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401e98:	68fb      	ldr	r3, [r7, #12]
  401e9a:	68ba      	ldr	r2, [r7, #8]
  401e9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401ea0:	e003      	b.n	401eaa <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401ea2:	68fb      	ldr	r3, [r7, #12]
  401ea4:	68ba      	ldr	r2, [r7, #8]
  401ea6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401eaa:	687b      	ldr	r3, [r7, #4]
  401eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401eb0:	2b00      	cmp	r3, #0
  401eb2:	d004      	beq.n	401ebe <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401eb4:	68fb      	ldr	r3, [r7, #12]
  401eb6:	68ba      	ldr	r2, [r7, #8]
  401eb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401ebc:	e008      	b.n	401ed0 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401ebe:	68fb      	ldr	r3, [r7, #12]
  401ec0:	68ba      	ldr	r2, [r7, #8]
  401ec2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401ec6:	e003      	b.n	401ed0 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401ec8:	68fb      	ldr	r3, [r7, #12]
  401eca:	68ba      	ldr	r2, [r7, #8]
  401ecc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401ed0:	bf00      	nop
  401ed2:	3714      	adds	r7, #20
  401ed4:	46bd      	mov	sp, r7
  401ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eda:	4770      	bx	lr

00401edc <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401edc:	b480      	push	{r7}
  401ede:	b083      	sub	sp, #12
  401ee0:	af00      	add	r7, sp, #0
  401ee2:	6078      	str	r0, [r7, #4]
  401ee4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401ee6:	687b      	ldr	r3, [r7, #4]
  401ee8:	683a      	ldr	r2, [r7, #0]
  401eea:	641a      	str	r2, [r3, #64]	; 0x40
}
  401eec:	bf00      	nop
  401eee:	370c      	adds	r7, #12
  401ef0:	46bd      	mov	sp, r7
  401ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ef6:	4770      	bx	lr

00401ef8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401ef8:	b480      	push	{r7}
  401efa:	b083      	sub	sp, #12
  401efc:	af00      	add	r7, sp, #0
  401efe:	6078      	str	r0, [r7, #4]
  401f00:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	683a      	ldr	r2, [r7, #0]
  401f06:	645a      	str	r2, [r3, #68]	; 0x44
}
  401f08:	bf00      	nop
  401f0a:	370c      	adds	r7, #12
  401f0c:	46bd      	mov	sp, r7
  401f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f12:	4770      	bx	lr

00401f14 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401f14:	b480      	push	{r7}
  401f16:	b083      	sub	sp, #12
  401f18:	af00      	add	r7, sp, #0
  401f1a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401f1c:	687b      	ldr	r3, [r7, #4]
  401f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401f20:	4618      	mov	r0, r3
  401f22:	370c      	adds	r7, #12
  401f24:	46bd      	mov	sp, r7
  401f26:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f2a:	4770      	bx	lr

00401f2c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401f2c:	b480      	push	{r7}
  401f2e:	b083      	sub	sp, #12
  401f30:	af00      	add	r7, sp, #0
  401f32:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401f34:	687b      	ldr	r3, [r7, #4]
  401f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401f38:	4618      	mov	r0, r3
  401f3a:	370c      	adds	r7, #12
  401f3c:	46bd      	mov	sp, r7
  401f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f42:	4770      	bx	lr

00401f44 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f44:	b580      	push	{r7, lr}
  401f46:	b084      	sub	sp, #16
  401f48:	af00      	add	r7, sp, #0
  401f4a:	6078      	str	r0, [r7, #4]
  401f4c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f4e:	6878      	ldr	r0, [r7, #4]
  401f50:	4b26      	ldr	r3, [pc, #152]	; (401fec <pio_handler_process+0xa8>)
  401f52:	4798      	blx	r3
  401f54:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401f56:	6878      	ldr	r0, [r7, #4]
  401f58:	4b25      	ldr	r3, [pc, #148]	; (401ff0 <pio_handler_process+0xac>)
  401f5a:	4798      	blx	r3
  401f5c:	4602      	mov	r2, r0
  401f5e:	68fb      	ldr	r3, [r7, #12]
  401f60:	4013      	ands	r3, r2
  401f62:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401f64:	68fb      	ldr	r3, [r7, #12]
  401f66:	2b00      	cmp	r3, #0
  401f68:	d03c      	beq.n	401fe4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  401f6a:	2300      	movs	r3, #0
  401f6c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401f6e:	e034      	b.n	401fda <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401f70:	4a20      	ldr	r2, [pc, #128]	; (401ff4 <pio_handler_process+0xb0>)
  401f72:	68bb      	ldr	r3, [r7, #8]
  401f74:	011b      	lsls	r3, r3, #4
  401f76:	4413      	add	r3, r2
  401f78:	681a      	ldr	r2, [r3, #0]
  401f7a:	683b      	ldr	r3, [r7, #0]
  401f7c:	429a      	cmp	r2, r3
  401f7e:	d126      	bne.n	401fce <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f80:	4a1c      	ldr	r2, [pc, #112]	; (401ff4 <pio_handler_process+0xb0>)
  401f82:	68bb      	ldr	r3, [r7, #8]
  401f84:	011b      	lsls	r3, r3, #4
  401f86:	4413      	add	r3, r2
  401f88:	3304      	adds	r3, #4
  401f8a:	681a      	ldr	r2, [r3, #0]
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	4013      	ands	r3, r2
  401f90:	2b00      	cmp	r3, #0
  401f92:	d01c      	beq.n	401fce <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f94:	4a17      	ldr	r2, [pc, #92]	; (401ff4 <pio_handler_process+0xb0>)
  401f96:	68bb      	ldr	r3, [r7, #8]
  401f98:	011b      	lsls	r3, r3, #4
  401f9a:	4413      	add	r3, r2
  401f9c:	330c      	adds	r3, #12
  401f9e:	681b      	ldr	r3, [r3, #0]
  401fa0:	4914      	ldr	r1, [pc, #80]	; (401ff4 <pio_handler_process+0xb0>)
  401fa2:	68ba      	ldr	r2, [r7, #8]
  401fa4:	0112      	lsls	r2, r2, #4
  401fa6:	440a      	add	r2, r1
  401fa8:	6810      	ldr	r0, [r2, #0]
  401faa:	4912      	ldr	r1, [pc, #72]	; (401ff4 <pio_handler_process+0xb0>)
  401fac:	68ba      	ldr	r2, [r7, #8]
  401fae:	0112      	lsls	r2, r2, #4
  401fb0:	440a      	add	r2, r1
  401fb2:	3204      	adds	r2, #4
  401fb4:	6812      	ldr	r2, [r2, #0]
  401fb6:	4611      	mov	r1, r2
  401fb8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401fba:	4a0e      	ldr	r2, [pc, #56]	; (401ff4 <pio_handler_process+0xb0>)
  401fbc:	68bb      	ldr	r3, [r7, #8]
  401fbe:	011b      	lsls	r3, r3, #4
  401fc0:	4413      	add	r3, r2
  401fc2:	3304      	adds	r3, #4
  401fc4:	681b      	ldr	r3, [r3, #0]
  401fc6:	43db      	mvns	r3, r3
  401fc8:	68fa      	ldr	r2, [r7, #12]
  401fca:	4013      	ands	r3, r2
  401fcc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401fce:	68bb      	ldr	r3, [r7, #8]
  401fd0:	3301      	adds	r3, #1
  401fd2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  401fd4:	68bb      	ldr	r3, [r7, #8]
  401fd6:	2b06      	cmp	r3, #6
  401fd8:	d803      	bhi.n	401fe2 <pio_handler_process+0x9e>
		while (status != 0) {
  401fda:	68fb      	ldr	r3, [r7, #12]
  401fdc:	2b00      	cmp	r3, #0
  401fde:	d1c7      	bne.n	401f70 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401fe0:	e000      	b.n	401fe4 <pio_handler_process+0xa0>
				break;
  401fe2:	bf00      	nop
}
  401fe4:	bf00      	nop
  401fe6:	3710      	adds	r7, #16
  401fe8:	46bd      	mov	sp, r7
  401fea:	bd80      	pop	{r7, pc}
  401fec:	00401f15 	.word	0x00401f15
  401ff0:	00401f2d 	.word	0x00401f2d
  401ff4:	2040065c 	.word	0x2040065c

00401ff8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401ff8:	b580      	push	{r7, lr}
  401ffa:	b086      	sub	sp, #24
  401ffc:	af00      	add	r7, sp, #0
  401ffe:	60f8      	str	r0, [r7, #12]
  402000:	60b9      	str	r1, [r7, #8]
  402002:	607a      	str	r2, [r7, #4]
  402004:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402006:	4b21      	ldr	r3, [pc, #132]	; (40208c <pio_handler_set+0x94>)
  402008:	681b      	ldr	r3, [r3, #0]
  40200a:	2b06      	cmp	r3, #6
  40200c:	d901      	bls.n	402012 <pio_handler_set+0x1a>
		return 1;
  40200e:	2301      	movs	r3, #1
  402010:	e038      	b.n	402084 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402012:	2300      	movs	r3, #0
  402014:	75fb      	strb	r3, [r7, #23]
  402016:	e011      	b.n	40203c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  402018:	7dfb      	ldrb	r3, [r7, #23]
  40201a:	011b      	lsls	r3, r3, #4
  40201c:	4a1c      	ldr	r2, [pc, #112]	; (402090 <pio_handler_set+0x98>)
  40201e:	4413      	add	r3, r2
  402020:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402022:	693b      	ldr	r3, [r7, #16]
  402024:	681a      	ldr	r2, [r3, #0]
  402026:	68bb      	ldr	r3, [r7, #8]
  402028:	429a      	cmp	r2, r3
  40202a:	d104      	bne.n	402036 <pio_handler_set+0x3e>
  40202c:	693b      	ldr	r3, [r7, #16]
  40202e:	685a      	ldr	r2, [r3, #4]
  402030:	687b      	ldr	r3, [r7, #4]
  402032:	429a      	cmp	r2, r3
  402034:	d008      	beq.n	402048 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402036:	7dfb      	ldrb	r3, [r7, #23]
  402038:	3301      	adds	r3, #1
  40203a:	75fb      	strb	r3, [r7, #23]
  40203c:	7dfa      	ldrb	r2, [r7, #23]
  40203e:	4b13      	ldr	r3, [pc, #76]	; (40208c <pio_handler_set+0x94>)
  402040:	681b      	ldr	r3, [r3, #0]
  402042:	429a      	cmp	r2, r3
  402044:	d9e8      	bls.n	402018 <pio_handler_set+0x20>
  402046:	e000      	b.n	40204a <pio_handler_set+0x52>
			break;
  402048:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40204a:	693b      	ldr	r3, [r7, #16]
  40204c:	68ba      	ldr	r2, [r7, #8]
  40204e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  402050:	693b      	ldr	r3, [r7, #16]
  402052:	687a      	ldr	r2, [r7, #4]
  402054:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  402056:	693b      	ldr	r3, [r7, #16]
  402058:	683a      	ldr	r2, [r7, #0]
  40205a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40205c:	693b      	ldr	r3, [r7, #16]
  40205e:	6a3a      	ldr	r2, [r7, #32]
  402060:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  402062:	7dfa      	ldrb	r2, [r7, #23]
  402064:	4b09      	ldr	r3, [pc, #36]	; (40208c <pio_handler_set+0x94>)
  402066:	681b      	ldr	r3, [r3, #0]
  402068:	3301      	adds	r3, #1
  40206a:	429a      	cmp	r2, r3
  40206c:	d104      	bne.n	402078 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40206e:	4b07      	ldr	r3, [pc, #28]	; (40208c <pio_handler_set+0x94>)
  402070:	681b      	ldr	r3, [r3, #0]
  402072:	3301      	adds	r3, #1
  402074:	4a05      	ldr	r2, [pc, #20]	; (40208c <pio_handler_set+0x94>)
  402076:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402078:	683a      	ldr	r2, [r7, #0]
  40207a:	6879      	ldr	r1, [r7, #4]
  40207c:	68f8      	ldr	r0, [r7, #12]
  40207e:	4b05      	ldr	r3, [pc, #20]	; (402094 <pio_handler_set+0x9c>)
  402080:	4798      	blx	r3

	return 0;
  402082:	2300      	movs	r3, #0
}
  402084:	4618      	mov	r0, r3
  402086:	3718      	adds	r7, #24
  402088:	46bd      	mov	sp, r7
  40208a:	bd80      	pop	{r7, pc}
  40208c:	204006cc 	.word	0x204006cc
  402090:	2040065c 	.word	0x2040065c
  402094:	00401e71 	.word	0x00401e71

00402098 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402098:	b580      	push	{r7, lr}
  40209a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40209c:	210a      	movs	r1, #10
  40209e:	4802      	ldr	r0, [pc, #8]	; (4020a8 <PIOA_Handler+0x10>)
  4020a0:	4b02      	ldr	r3, [pc, #8]	; (4020ac <PIOA_Handler+0x14>)
  4020a2:	4798      	blx	r3
}
  4020a4:	bf00      	nop
  4020a6:	bd80      	pop	{r7, pc}
  4020a8:	400e0e00 	.word	0x400e0e00
  4020ac:	00401f45 	.word	0x00401f45

004020b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4020b0:	b580      	push	{r7, lr}
  4020b2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4020b4:	210b      	movs	r1, #11
  4020b6:	4802      	ldr	r0, [pc, #8]	; (4020c0 <PIOB_Handler+0x10>)
  4020b8:	4b02      	ldr	r3, [pc, #8]	; (4020c4 <PIOB_Handler+0x14>)
  4020ba:	4798      	blx	r3
}
  4020bc:	bf00      	nop
  4020be:	bd80      	pop	{r7, pc}
  4020c0:	400e1000 	.word	0x400e1000
  4020c4:	00401f45 	.word	0x00401f45

004020c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4020c8:	b580      	push	{r7, lr}
  4020ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4020cc:	210c      	movs	r1, #12
  4020ce:	4802      	ldr	r0, [pc, #8]	; (4020d8 <PIOC_Handler+0x10>)
  4020d0:	4b02      	ldr	r3, [pc, #8]	; (4020dc <PIOC_Handler+0x14>)
  4020d2:	4798      	blx	r3
}
  4020d4:	bf00      	nop
  4020d6:	bd80      	pop	{r7, pc}
  4020d8:	400e1200 	.word	0x400e1200
  4020dc:	00401f45 	.word	0x00401f45

004020e0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4020e0:	b580      	push	{r7, lr}
  4020e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4020e4:	2110      	movs	r1, #16
  4020e6:	4802      	ldr	r0, [pc, #8]	; (4020f0 <PIOD_Handler+0x10>)
  4020e8:	4b02      	ldr	r3, [pc, #8]	; (4020f4 <PIOD_Handler+0x14>)
  4020ea:	4798      	blx	r3
}
  4020ec:	bf00      	nop
  4020ee:	bd80      	pop	{r7, pc}
  4020f0:	400e1400 	.word	0x400e1400
  4020f4:	00401f45 	.word	0x00401f45

004020f8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4020f8:	b580      	push	{r7, lr}
  4020fa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4020fc:	2111      	movs	r1, #17
  4020fe:	4802      	ldr	r0, [pc, #8]	; (402108 <PIOE_Handler+0x10>)
  402100:	4b02      	ldr	r3, [pc, #8]	; (40210c <PIOE_Handler+0x14>)
  402102:	4798      	blx	r3
}
  402104:	bf00      	nop
  402106:	bd80      	pop	{r7, pc}
  402108:	400e1600 	.word	0x400e1600
  40210c:	00401f45 	.word	0x00401f45

00402110 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  402110:	b480      	push	{r7}
  402112:	b083      	sub	sp, #12
  402114:	af00      	add	r7, sp, #0
  402116:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  402118:	687b      	ldr	r3, [r7, #4]
  40211a:	3b01      	subs	r3, #1
  40211c:	2b03      	cmp	r3, #3
  40211e:	d81a      	bhi.n	402156 <pmc_mck_set_division+0x46>
  402120:	a201      	add	r2, pc, #4	; (adr r2, 402128 <pmc_mck_set_division+0x18>)
  402122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402126:	bf00      	nop
  402128:	00402139 	.word	0x00402139
  40212c:	0040213f 	.word	0x0040213f
  402130:	00402147 	.word	0x00402147
  402134:	0040214f 	.word	0x0040214f
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402138:	2300      	movs	r3, #0
  40213a:	607b      	str	r3, [r7, #4]
			break;
  40213c:	e00e      	b.n	40215c <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40213e:	f44f 7380 	mov.w	r3, #256	; 0x100
  402142:	607b      	str	r3, [r7, #4]
			break;
  402144:	e00a      	b.n	40215c <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402146:	f44f 7340 	mov.w	r3, #768	; 0x300
  40214a:	607b      	str	r3, [r7, #4]
			break;
  40214c:	e006      	b.n	40215c <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40214e:	f44f 7300 	mov.w	r3, #512	; 0x200
  402152:	607b      	str	r3, [r7, #4]
			break;
  402154:	e002      	b.n	40215c <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402156:	2300      	movs	r3, #0
  402158:	607b      	str	r3, [r7, #4]
			break;
  40215a:	bf00      	nop
	}
	PMC->PMC_MCKR =
  40215c:	490a      	ldr	r1, [pc, #40]	; (402188 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40215e:	4b0a      	ldr	r3, [pc, #40]	; (402188 <pmc_mck_set_division+0x78>)
  402160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  402166:	687b      	ldr	r3, [r7, #4]
  402168:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40216a:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40216c:	bf00      	nop
  40216e:	4b06      	ldr	r3, [pc, #24]	; (402188 <pmc_mck_set_division+0x78>)
  402170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402172:	f003 0308 	and.w	r3, r3, #8
  402176:	2b00      	cmp	r3, #0
  402178:	d0f9      	beq.n	40216e <pmc_mck_set_division+0x5e>
}
  40217a:	bf00      	nop
  40217c:	370c      	adds	r7, #12
  40217e:	46bd      	mov	sp, r7
  402180:	f85d 7b04 	ldr.w	r7, [sp], #4
  402184:	4770      	bx	lr
  402186:	bf00      	nop
  402188:	400e0600 	.word	0x400e0600

0040218c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40218c:	b480      	push	{r7}
  40218e:	b085      	sub	sp, #20
  402190:	af00      	add	r7, sp, #0
  402192:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402194:	491d      	ldr	r1, [pc, #116]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  402196:	4b1d      	ldr	r3, [pc, #116]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  402198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40219a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40219e:	687b      	ldr	r3, [r7, #4]
  4021a0:	4313      	orrs	r3, r2
  4021a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4021a8:	60fb      	str	r3, [r7, #12]
  4021aa:	e007      	b.n	4021bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4021ac:	68fb      	ldr	r3, [r7, #12]
  4021ae:	2b00      	cmp	r3, #0
  4021b0:	d101      	bne.n	4021b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4021b2:	2301      	movs	r3, #1
  4021b4:	e023      	b.n	4021fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4021b6:	68fb      	ldr	r3, [r7, #12]
  4021b8:	3b01      	subs	r3, #1
  4021ba:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021bc:	4b13      	ldr	r3, [pc, #76]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021c0:	f003 0308 	and.w	r3, r3, #8
  4021c4:	2b00      	cmp	r3, #0
  4021c6:	d0f1      	beq.n	4021ac <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4021c8:	4a10      	ldr	r2, [pc, #64]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021ca:	4b10      	ldr	r3, [pc, #64]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021ce:	f023 0303 	bic.w	r3, r3, #3
  4021d2:	f043 0302 	orr.w	r3, r3, #2
  4021d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4021dc:	60fb      	str	r3, [r7, #12]
  4021de:	e007      	b.n	4021f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4021e0:	68fb      	ldr	r3, [r7, #12]
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	d101      	bne.n	4021ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4021e6:	2301      	movs	r3, #1
  4021e8:	e009      	b.n	4021fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4021ea:	68fb      	ldr	r3, [r7, #12]
  4021ec:	3b01      	subs	r3, #1
  4021ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021f0:	4b06      	ldr	r3, [pc, #24]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021f4:	f003 0308 	and.w	r3, r3, #8
  4021f8:	2b00      	cmp	r3, #0
  4021fa:	d0f1      	beq.n	4021e0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4021fc:	2300      	movs	r3, #0
}
  4021fe:	4618      	mov	r0, r3
  402200:	3714      	adds	r7, #20
  402202:	46bd      	mov	sp, r7
  402204:	f85d 7b04 	ldr.w	r7, [sp], #4
  402208:	4770      	bx	lr
  40220a:	bf00      	nop
  40220c:	400e0600 	.word	0x400e0600

00402210 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402210:	b480      	push	{r7}
  402212:	b083      	sub	sp, #12
  402214:	af00      	add	r7, sp, #0
  402216:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402218:	687b      	ldr	r3, [r7, #4]
  40221a:	2b01      	cmp	r3, #1
  40221c:	d105      	bne.n	40222a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40221e:	4907      	ldr	r1, [pc, #28]	; (40223c <pmc_switch_sclk_to_32kxtal+0x2c>)
  402220:	4b06      	ldr	r3, [pc, #24]	; (40223c <pmc_switch_sclk_to_32kxtal+0x2c>)
  402222:	689a      	ldr	r2, [r3, #8]
  402224:	4b06      	ldr	r3, [pc, #24]	; (402240 <pmc_switch_sclk_to_32kxtal+0x30>)
  402226:	4313      	orrs	r3, r2
  402228:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40222a:	4b04      	ldr	r3, [pc, #16]	; (40223c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40222c:	4a05      	ldr	r2, [pc, #20]	; (402244 <pmc_switch_sclk_to_32kxtal+0x34>)
  40222e:	601a      	str	r2, [r3, #0]
}
  402230:	bf00      	nop
  402232:	370c      	adds	r7, #12
  402234:	46bd      	mov	sp, r7
  402236:	f85d 7b04 	ldr.w	r7, [sp], #4
  40223a:	4770      	bx	lr
  40223c:	400e1810 	.word	0x400e1810
  402240:	a5100000 	.word	0xa5100000
  402244:	a5000008 	.word	0xa5000008

00402248 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402248:	b480      	push	{r7}
  40224a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40224c:	4b09      	ldr	r3, [pc, #36]	; (402274 <pmc_osc_is_ready_32kxtal+0x2c>)
  40224e:	695b      	ldr	r3, [r3, #20]
  402250:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402254:	2b00      	cmp	r3, #0
  402256:	d007      	beq.n	402268 <pmc_osc_is_ready_32kxtal+0x20>
  402258:	4b07      	ldr	r3, [pc, #28]	; (402278 <pmc_osc_is_ready_32kxtal+0x30>)
  40225a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402260:	2b00      	cmp	r3, #0
  402262:	d001      	beq.n	402268 <pmc_osc_is_ready_32kxtal+0x20>
  402264:	2301      	movs	r3, #1
  402266:	e000      	b.n	40226a <pmc_osc_is_ready_32kxtal+0x22>
  402268:	2300      	movs	r3, #0
}
  40226a:	4618      	mov	r0, r3
  40226c:	46bd      	mov	sp, r7
  40226e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402272:	4770      	bx	lr
  402274:	400e1810 	.word	0x400e1810
  402278:	400e0600 	.word	0x400e0600

0040227c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40227c:	b480      	push	{r7}
  40227e:	b083      	sub	sp, #12
  402280:	af00      	add	r7, sp, #0
  402282:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402284:	4915      	ldr	r1, [pc, #84]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  402286:	4b15      	ldr	r3, [pc, #84]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  402288:	6a1a      	ldr	r2, [r3, #32]
  40228a:	4b15      	ldr	r3, [pc, #84]	; (4022e0 <pmc_switch_mainck_to_fastrc+0x64>)
  40228c:	4313      	orrs	r3, r2
  40228e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402290:	bf00      	nop
  402292:	4b12      	ldr	r3, [pc, #72]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  402294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40229a:	2b00      	cmp	r3, #0
  40229c:	d0f9      	beq.n	402292 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40229e:	490f      	ldr	r1, [pc, #60]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022a0:	4b0e      	ldr	r3, [pc, #56]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022a2:	6a1a      	ldr	r2, [r3, #32]
  4022a4:	4b0f      	ldr	r3, [pc, #60]	; (4022e4 <pmc_switch_mainck_to_fastrc+0x68>)
  4022a6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4022a8:	687a      	ldr	r2, [r7, #4]
  4022aa:	4313      	orrs	r3, r2
  4022ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4022b0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4022b2:	bf00      	nop
  4022b4:	4b09      	ldr	r3, [pc, #36]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4022bc:	2b00      	cmp	r3, #0
  4022be:	d0f9      	beq.n	4022b4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4022c0:	4906      	ldr	r1, [pc, #24]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022c2:	4b06      	ldr	r3, [pc, #24]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022c4:	6a1a      	ldr	r2, [r3, #32]
  4022c6:	4b08      	ldr	r3, [pc, #32]	; (4022e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022c8:	4013      	ands	r3, r2
  4022ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4022ce:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4022d0:	bf00      	nop
  4022d2:	370c      	adds	r7, #12
  4022d4:	46bd      	mov	sp, r7
  4022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022da:	4770      	bx	lr
  4022dc:	400e0600 	.word	0x400e0600
  4022e0:	00370008 	.word	0x00370008
  4022e4:	ffc8ff8f 	.word	0xffc8ff8f
  4022e8:	fec8ffff 	.word	0xfec8ffff

004022ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4022ec:	b480      	push	{r7}
  4022ee:	b083      	sub	sp, #12
  4022f0:	af00      	add	r7, sp, #0
  4022f2:	6078      	str	r0, [r7, #4]
  4022f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4022f6:	687b      	ldr	r3, [r7, #4]
  4022f8:	2b00      	cmp	r3, #0
  4022fa:	d008      	beq.n	40230e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022fc:	4913      	ldr	r1, [pc, #76]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  4022fe:	4b13      	ldr	r3, [pc, #76]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402300:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402302:	4a13      	ldr	r2, [pc, #76]	; (402350 <pmc_switch_mainck_to_xtal+0x64>)
  402304:	401a      	ands	r2, r3
  402306:	4b13      	ldr	r3, [pc, #76]	; (402354 <pmc_switch_mainck_to_xtal+0x68>)
  402308:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40230a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40230c:	e018      	b.n	402340 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40230e:	490f      	ldr	r1, [pc, #60]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402310:	4b0e      	ldr	r3, [pc, #56]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402312:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402314:	4b10      	ldr	r3, [pc, #64]	; (402358 <pmc_switch_mainck_to_xtal+0x6c>)
  402316:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402318:	683a      	ldr	r2, [r7, #0]
  40231a:	0212      	lsls	r2, r2, #8
  40231c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40231e:	431a      	orrs	r2, r3
  402320:	4b0e      	ldr	r3, [pc, #56]	; (40235c <pmc_switch_mainck_to_xtal+0x70>)
  402322:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402324:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402326:	bf00      	nop
  402328:	4b08      	ldr	r3, [pc, #32]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  40232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40232c:	f003 0301 	and.w	r3, r3, #1
  402330:	2b00      	cmp	r3, #0
  402332:	d0f9      	beq.n	402328 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402334:	4905      	ldr	r1, [pc, #20]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402336:	4b05      	ldr	r3, [pc, #20]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402338:	6a1a      	ldr	r2, [r3, #32]
  40233a:	4b09      	ldr	r3, [pc, #36]	; (402360 <pmc_switch_mainck_to_xtal+0x74>)
  40233c:	4313      	orrs	r3, r2
  40233e:	620b      	str	r3, [r1, #32]
}
  402340:	bf00      	nop
  402342:	370c      	adds	r7, #12
  402344:	46bd      	mov	sp, r7
  402346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40234a:	4770      	bx	lr
  40234c:	400e0600 	.word	0x400e0600
  402350:	fec8fffc 	.word	0xfec8fffc
  402354:	01370002 	.word	0x01370002
  402358:	ffc8fffc 	.word	0xffc8fffc
  40235c:	00370001 	.word	0x00370001
  402360:	01370000 	.word	0x01370000

00402364 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402364:	b480      	push	{r7}
  402366:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402368:	4b04      	ldr	r3, [pc, #16]	; (40237c <pmc_osc_is_ready_mainck+0x18>)
  40236a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402370:	4618      	mov	r0, r3
  402372:	46bd      	mov	sp, r7
  402374:	f85d 7b04 	ldr.w	r7, [sp], #4
  402378:	4770      	bx	lr
  40237a:	bf00      	nop
  40237c:	400e0600 	.word	0x400e0600

00402380 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402380:	b480      	push	{r7}
  402382:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402384:	4b04      	ldr	r3, [pc, #16]	; (402398 <pmc_disable_pllack+0x18>)
  402386:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40238a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40238c:	bf00      	nop
  40238e:	46bd      	mov	sp, r7
  402390:	f85d 7b04 	ldr.w	r7, [sp], #4
  402394:	4770      	bx	lr
  402396:	bf00      	nop
  402398:	400e0600 	.word	0x400e0600

0040239c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40239c:	b480      	push	{r7}
  40239e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4023a0:	4b04      	ldr	r3, [pc, #16]	; (4023b4 <pmc_is_locked_pllack+0x18>)
  4023a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023a4:	f003 0302 	and.w	r3, r3, #2
}
  4023a8:	4618      	mov	r0, r3
  4023aa:	46bd      	mov	sp, r7
  4023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023b0:	4770      	bx	lr
  4023b2:	bf00      	nop
  4023b4:	400e0600 	.word	0x400e0600

004023b8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4023b8:	b480      	push	{r7}
  4023ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4023bc:	4b04      	ldr	r3, [pc, #16]	; (4023d0 <pmc_is_locked_upll+0x18>)
  4023be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4023c4:	4618      	mov	r0, r3
  4023c6:	46bd      	mov	sp, r7
  4023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023cc:	4770      	bx	lr
  4023ce:	bf00      	nop
  4023d0:	400e0600 	.word	0x400e0600

004023d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4023d4:	b480      	push	{r7}
  4023d6:	b083      	sub	sp, #12
  4023d8:	af00      	add	r7, sp, #0
  4023da:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4023dc:	687b      	ldr	r3, [r7, #4]
  4023de:	2b3f      	cmp	r3, #63	; 0x3f
  4023e0:	d901      	bls.n	4023e6 <pmc_enable_periph_clk+0x12>
		return 1;
  4023e2:	2301      	movs	r3, #1
  4023e4:	e02f      	b.n	402446 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4023e6:	687b      	ldr	r3, [r7, #4]
  4023e8:	2b1f      	cmp	r3, #31
  4023ea:	d813      	bhi.n	402414 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4023ec:	4b19      	ldr	r3, [pc, #100]	; (402454 <pmc_enable_periph_clk+0x80>)
  4023ee:	699a      	ldr	r2, [r3, #24]
  4023f0:	2101      	movs	r1, #1
  4023f2:	687b      	ldr	r3, [r7, #4]
  4023f4:	fa01 f303 	lsl.w	r3, r1, r3
  4023f8:	401a      	ands	r2, r3
  4023fa:	2101      	movs	r1, #1
  4023fc:	687b      	ldr	r3, [r7, #4]
  4023fe:	fa01 f303 	lsl.w	r3, r1, r3
  402402:	429a      	cmp	r2, r3
  402404:	d01e      	beq.n	402444 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402406:	4a13      	ldr	r2, [pc, #76]	; (402454 <pmc_enable_periph_clk+0x80>)
  402408:	2101      	movs	r1, #1
  40240a:	687b      	ldr	r3, [r7, #4]
  40240c:	fa01 f303 	lsl.w	r3, r1, r3
  402410:	6113      	str	r3, [r2, #16]
  402412:	e017      	b.n	402444 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402414:	687b      	ldr	r3, [r7, #4]
  402416:	3b20      	subs	r3, #32
  402418:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40241a:	4b0e      	ldr	r3, [pc, #56]	; (402454 <pmc_enable_periph_clk+0x80>)
  40241c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402420:	2101      	movs	r1, #1
  402422:	687b      	ldr	r3, [r7, #4]
  402424:	fa01 f303 	lsl.w	r3, r1, r3
  402428:	401a      	ands	r2, r3
  40242a:	2101      	movs	r1, #1
  40242c:	687b      	ldr	r3, [r7, #4]
  40242e:	fa01 f303 	lsl.w	r3, r1, r3
  402432:	429a      	cmp	r2, r3
  402434:	d006      	beq.n	402444 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  402436:	4a07      	ldr	r2, [pc, #28]	; (402454 <pmc_enable_periph_clk+0x80>)
  402438:	2101      	movs	r1, #1
  40243a:	687b      	ldr	r3, [r7, #4]
  40243c:	fa01 f303 	lsl.w	r3, r1, r3
  402440:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402444:	2300      	movs	r3, #0
}
  402446:	4618      	mov	r0, r3
  402448:	370c      	adds	r7, #12
  40244a:	46bd      	mov	sp, r7
  40244c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402450:	4770      	bx	lr
  402452:	bf00      	nop
  402454:	400e0600 	.word	0x400e0600

00402458 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  402458:	b480      	push	{r7}
  40245a:	b083      	sub	sp, #12
  40245c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40245e:	f3ef 8310 	mrs	r3, PRIMASK
  402462:	607b      	str	r3, [r7, #4]
  return(result);
  402464:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402466:	2b00      	cmp	r3, #0
  402468:	bf0c      	ite	eq
  40246a:	2301      	moveq	r3, #1
  40246c:	2300      	movne	r3, #0
  40246e:	b2db      	uxtb	r3, r3
  402470:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402472:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402474:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402478:	4b04      	ldr	r3, [pc, #16]	; (40248c <cpu_irq_save+0x34>)
  40247a:	2200      	movs	r2, #0
  40247c:	701a      	strb	r2, [r3, #0]
	return flags;
  40247e:	683b      	ldr	r3, [r7, #0]
}
  402480:	4618      	mov	r0, r3
  402482:	370c      	adds	r7, #12
  402484:	46bd      	mov	sp, r7
  402486:	f85d 7b04 	ldr.w	r7, [sp], #4
  40248a:	4770      	bx	lr
  40248c:	2040000a 	.word	0x2040000a

00402490 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402490:	b480      	push	{r7}
  402492:	b083      	sub	sp, #12
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
	return (flags);
  402498:	687b      	ldr	r3, [r7, #4]
  40249a:	2b00      	cmp	r3, #0
  40249c:	bf14      	ite	ne
  40249e:	2301      	movne	r3, #1
  4024a0:	2300      	moveq	r3, #0
  4024a2:	b2db      	uxtb	r3, r3
}
  4024a4:	4618      	mov	r0, r3
  4024a6:	370c      	adds	r7, #12
  4024a8:	46bd      	mov	sp, r7
  4024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024ae:	4770      	bx	lr

004024b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4024b0:	b580      	push	{r7, lr}
  4024b2:	b082      	sub	sp, #8
  4024b4:	af00      	add	r7, sp, #0
  4024b6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4024b8:	6878      	ldr	r0, [r7, #4]
  4024ba:	4b07      	ldr	r3, [pc, #28]	; (4024d8 <cpu_irq_restore+0x28>)
  4024bc:	4798      	blx	r3
  4024be:	4603      	mov	r3, r0
  4024c0:	2b00      	cmp	r3, #0
  4024c2:	d005      	beq.n	4024d0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4024c4:	4b05      	ldr	r3, [pc, #20]	; (4024dc <cpu_irq_restore+0x2c>)
  4024c6:	2201      	movs	r2, #1
  4024c8:	701a      	strb	r2, [r3, #0]
  4024ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024ce:	b662      	cpsie	i
}
  4024d0:	bf00      	nop
  4024d2:	3708      	adds	r7, #8
  4024d4:	46bd      	mov	sp, r7
  4024d6:	bd80      	pop	{r7, pc}
  4024d8:	00402491 	.word	0x00402491
  4024dc:	2040000a 	.word	0x2040000a

004024e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4024e0:	b580      	push	{r7, lr}
  4024e2:	b084      	sub	sp, #16
  4024e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4024e6:	4b1e      	ldr	r3, [pc, #120]	; (402560 <Reset_Handler+0x80>)
  4024e8:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  4024ea:	4b1e      	ldr	r3, [pc, #120]	; (402564 <Reset_Handler+0x84>)
  4024ec:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  4024ee:	68fa      	ldr	r2, [r7, #12]
  4024f0:	68bb      	ldr	r3, [r7, #8]
  4024f2:	429a      	cmp	r2, r3
  4024f4:	d00c      	beq.n	402510 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4024f6:	e007      	b.n	402508 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4024f8:	68bb      	ldr	r3, [r7, #8]
  4024fa:	1d1a      	adds	r2, r3, #4
  4024fc:	60ba      	str	r2, [r7, #8]
  4024fe:	68fa      	ldr	r2, [r7, #12]
  402500:	1d11      	adds	r1, r2, #4
  402502:	60f9      	str	r1, [r7, #12]
  402504:	6812      	ldr	r2, [r2, #0]
  402506:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  402508:	68bb      	ldr	r3, [r7, #8]
  40250a:	4a17      	ldr	r2, [pc, #92]	; (402568 <Reset_Handler+0x88>)
  40250c:	4293      	cmp	r3, r2
  40250e:	d3f3      	bcc.n	4024f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402510:	4b16      	ldr	r3, [pc, #88]	; (40256c <Reset_Handler+0x8c>)
  402512:	60bb      	str	r3, [r7, #8]
  402514:	e004      	b.n	402520 <Reset_Handler+0x40>
                *pDest++ = 0;
  402516:	68bb      	ldr	r3, [r7, #8]
  402518:	1d1a      	adds	r2, r3, #4
  40251a:	60ba      	str	r2, [r7, #8]
  40251c:	2200      	movs	r2, #0
  40251e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  402520:	68bb      	ldr	r3, [r7, #8]
  402522:	4a13      	ldr	r2, [pc, #76]	; (402570 <Reset_Handler+0x90>)
  402524:	4293      	cmp	r3, r2
  402526:	d3f6      	bcc.n	402516 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  402528:	4b12      	ldr	r3, [pc, #72]	; (402574 <Reset_Handler+0x94>)
  40252a:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40252c:	4a12      	ldr	r2, [pc, #72]	; (402578 <Reset_Handler+0x98>)
  40252e:	68fb      	ldr	r3, [r7, #12]
  402530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402534:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  402536:	4b11      	ldr	r3, [pc, #68]	; (40257c <Reset_Handler+0x9c>)
  402538:	4798      	blx	r3
  40253a:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  40253c:	4a10      	ldr	r2, [pc, #64]	; (402580 <Reset_Handler+0xa0>)
  40253e:	4b10      	ldr	r3, [pc, #64]	; (402580 <Reset_Handler+0xa0>)
  402540:	681b      	ldr	r3, [r3, #0]
  402542:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402546:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40254c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  402550:	6878      	ldr	r0, [r7, #4]
  402552:	4b0c      	ldr	r3, [pc, #48]	; (402584 <Reset_Handler+0xa4>)
  402554:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  402556:	4b0c      	ldr	r3, [pc, #48]	; (402588 <Reset_Handler+0xa8>)
  402558:	4798      	blx	r3

        /* Branch to main function */
        main();
  40255a:	4b0c      	ldr	r3, [pc, #48]	; (40258c <Reset_Handler+0xac>)
  40255c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40255e:	e7fe      	b.n	40255e <Reset_Handler+0x7e>
  402560:	00402e24 	.word	0x00402e24
  402564:	20400000 	.word	0x20400000
  402568:	2040043c 	.word	0x2040043c
  40256c:	2040043c 	.word	0x2040043c
  402570:	204006f8 	.word	0x204006f8
  402574:	00400000 	.word	0x00400000
  402578:	e000ed00 	.word	0xe000ed00
  40257c:	00402459 	.word	0x00402459
  402580:	e000ed88 	.word	0xe000ed88
  402584:	004024b1 	.word	0x004024b1
  402588:	00402c85 	.word	0x00402c85
  40258c:	0040292d 	.word	0x0040292d

00402590 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402590:	b480      	push	{r7}
  402592:	af00      	add	r7, sp, #0
        while (1) {
  402594:	e7fe      	b.n	402594 <Dummy_Handler+0x4>
	...

00402598 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402598:	b480      	push	{r7}
  40259a:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40259c:	4b52      	ldr	r3, [pc, #328]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  40259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025a0:	f003 0303 	and.w	r3, r3, #3
  4025a4:	2b01      	cmp	r3, #1
  4025a6:	d014      	beq.n	4025d2 <SystemCoreClockUpdate+0x3a>
  4025a8:	2b01      	cmp	r3, #1
  4025aa:	d302      	bcc.n	4025b2 <SystemCoreClockUpdate+0x1a>
  4025ac:	2b02      	cmp	r3, #2
  4025ae:	d038      	beq.n	402622 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4025b0:	e07a      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4025b2:	4b4e      	ldr	r3, [pc, #312]	; (4026ec <SystemCoreClockUpdate+0x154>)
  4025b4:	695b      	ldr	r3, [r3, #20]
  4025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4025ba:	2b00      	cmp	r3, #0
  4025bc:	d004      	beq.n	4025c8 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4025be:	4b4c      	ldr	r3, [pc, #304]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4025c4:	601a      	str	r2, [r3, #0]
    break;
  4025c6:	e06f      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4025c8:	4b49      	ldr	r3, [pc, #292]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025ca:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4025ce:	601a      	str	r2, [r3, #0]
    break;
  4025d0:	e06a      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4025d2:	4b45      	ldr	r3, [pc, #276]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4025d4:	6a1b      	ldr	r3, [r3, #32]
  4025d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4025da:	2b00      	cmp	r3, #0
  4025dc:	d003      	beq.n	4025e6 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4025de:	4b44      	ldr	r3, [pc, #272]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025e0:	4a44      	ldr	r2, [pc, #272]	; (4026f4 <SystemCoreClockUpdate+0x15c>)
  4025e2:	601a      	str	r2, [r3, #0]
    break;
  4025e4:	e060      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025e6:	4b42      	ldr	r3, [pc, #264]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025e8:	4a43      	ldr	r2, [pc, #268]	; (4026f8 <SystemCoreClockUpdate+0x160>)
  4025ea:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025ec:	4b3e      	ldr	r3, [pc, #248]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4025ee:	6a1b      	ldr	r3, [r3, #32]
  4025f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4025f4:	2b10      	cmp	r3, #16
  4025f6:	d004      	beq.n	402602 <SystemCoreClockUpdate+0x6a>
  4025f8:	2b20      	cmp	r3, #32
  4025fa:	d008      	beq.n	40260e <SystemCoreClockUpdate+0x76>
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d00e      	beq.n	40261e <SystemCoreClockUpdate+0x86>
          break;
  402600:	e00e      	b.n	402620 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402602:	4b3b      	ldr	r3, [pc, #236]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402604:	681b      	ldr	r3, [r3, #0]
  402606:	005b      	lsls	r3, r3, #1
  402608:	4a39      	ldr	r2, [pc, #228]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40260a:	6013      	str	r3, [r2, #0]
          break;
  40260c:	e008      	b.n	402620 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  40260e:	4b38      	ldr	r3, [pc, #224]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402610:	681a      	ldr	r2, [r3, #0]
  402612:	4613      	mov	r3, r2
  402614:	005b      	lsls	r3, r3, #1
  402616:	4413      	add	r3, r2
  402618:	4a35      	ldr	r2, [pc, #212]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40261a:	6013      	str	r3, [r2, #0]
          break;
  40261c:	e000      	b.n	402620 <SystemCoreClockUpdate+0x88>
          break;
  40261e:	bf00      	nop
    break;
  402620:	e042      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402622:	4b31      	ldr	r3, [pc, #196]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  402624:	6a1b      	ldr	r3, [r3, #32]
  402626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40262a:	2b00      	cmp	r3, #0
  40262c:	d003      	beq.n	402636 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40262e:	4b30      	ldr	r3, [pc, #192]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402630:	4a30      	ldr	r2, [pc, #192]	; (4026f4 <SystemCoreClockUpdate+0x15c>)
  402632:	601a      	str	r2, [r3, #0]
  402634:	e01c      	b.n	402670 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402636:	4b2e      	ldr	r3, [pc, #184]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402638:	4a2f      	ldr	r2, [pc, #188]	; (4026f8 <SystemCoreClockUpdate+0x160>)
  40263a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40263c:	4b2a      	ldr	r3, [pc, #168]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  40263e:	6a1b      	ldr	r3, [r3, #32]
  402640:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402644:	2b10      	cmp	r3, #16
  402646:	d004      	beq.n	402652 <SystemCoreClockUpdate+0xba>
  402648:	2b20      	cmp	r3, #32
  40264a:	d008      	beq.n	40265e <SystemCoreClockUpdate+0xc6>
  40264c:	2b00      	cmp	r3, #0
  40264e:	d00e      	beq.n	40266e <SystemCoreClockUpdate+0xd6>
          break;
  402650:	e00e      	b.n	402670 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402652:	4b27      	ldr	r3, [pc, #156]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402654:	681b      	ldr	r3, [r3, #0]
  402656:	005b      	lsls	r3, r3, #1
  402658:	4a25      	ldr	r2, [pc, #148]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40265a:	6013      	str	r3, [r2, #0]
          break;
  40265c:	e008      	b.n	402670 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  40265e:	4b24      	ldr	r3, [pc, #144]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402660:	681a      	ldr	r2, [r3, #0]
  402662:	4613      	mov	r3, r2
  402664:	005b      	lsls	r3, r3, #1
  402666:	4413      	add	r3, r2
  402668:	4a21      	ldr	r2, [pc, #132]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40266a:	6013      	str	r3, [r2, #0]
          break;
  40266c:	e000      	b.n	402670 <SystemCoreClockUpdate+0xd8>
          break;
  40266e:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402670:	4b1d      	ldr	r3, [pc, #116]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  402672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402674:	f003 0303 	and.w	r3, r3, #3
  402678:	2b02      	cmp	r3, #2
  40267a:	d114      	bne.n	4026a6 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40267c:	4b1a      	ldr	r3, [pc, #104]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  40267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402680:	0c1b      	lsrs	r3, r3, #16
  402682:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402686:	3301      	adds	r3, #1
  402688:	4a19      	ldr	r2, [pc, #100]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40268a:	6812      	ldr	r2, [r2, #0]
  40268c:	fb02 f303 	mul.w	r3, r2, r3
  402690:	4a17      	ldr	r2, [pc, #92]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402692:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402694:	4b14      	ldr	r3, [pc, #80]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  402696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402698:	b2db      	uxtb	r3, r3
  40269a:	4a15      	ldr	r2, [pc, #84]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40269c:	6812      	ldr	r2, [r2, #0]
  40269e:	fbb2 f3f3 	udiv	r3, r2, r3
  4026a2:	4a13      	ldr	r2, [pc, #76]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026a4:	6013      	str	r3, [r2, #0]
    break;
  4026a6:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4026a8:	4b0f      	ldr	r3, [pc, #60]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026b0:	2b70      	cmp	r3, #112	; 0x70
  4026b2:	d108      	bne.n	4026c6 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  4026b4:	4b0e      	ldr	r3, [pc, #56]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026b6:	681b      	ldr	r3, [r3, #0]
  4026b8:	4a10      	ldr	r2, [pc, #64]	; (4026fc <SystemCoreClockUpdate+0x164>)
  4026ba:	fba2 2303 	umull	r2, r3, r2, r3
  4026be:	085b      	lsrs	r3, r3, #1
  4026c0:	4a0b      	ldr	r2, [pc, #44]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026c2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4026c4:	e00a      	b.n	4026dc <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4026c6:	4b08      	ldr	r3, [pc, #32]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026ca:	091b      	lsrs	r3, r3, #4
  4026cc:	f003 0307 	and.w	r3, r3, #7
  4026d0:	4a07      	ldr	r2, [pc, #28]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026d2:	6812      	ldr	r2, [r2, #0]
  4026d4:	fa22 f303 	lsr.w	r3, r2, r3
  4026d8:	4a05      	ldr	r2, [pc, #20]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026da:	6013      	str	r3, [r2, #0]
}
  4026dc:	bf00      	nop
  4026de:	46bd      	mov	sp, r7
  4026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026e4:	4770      	bx	lr
  4026e6:	bf00      	nop
  4026e8:	400e0600 	.word	0x400e0600
  4026ec:	400e1810 	.word	0x400e1810
  4026f0:	2040000c 	.word	0x2040000c
  4026f4:	00b71b00 	.word	0x00b71b00
  4026f8:	003d0900 	.word	0x003d0900
  4026fc:	aaaaaaab 	.word	0xaaaaaaab

00402700 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402700:	b480      	push	{r7}
  402702:	b083      	sub	sp, #12
  402704:	af00      	add	r7, sp, #0
  402706:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402708:	687b      	ldr	r3, [r7, #4]
  40270a:	4a1d      	ldr	r2, [pc, #116]	; (402780 <system_init_flash+0x80>)
  40270c:	4293      	cmp	r3, r2
  40270e:	d804      	bhi.n	40271a <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402710:	4b1c      	ldr	r3, [pc, #112]	; (402784 <system_init_flash+0x84>)
  402712:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402716:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402718:	e02b      	b.n	402772 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  40271a:	687b      	ldr	r3, [r7, #4]
  40271c:	4a1a      	ldr	r2, [pc, #104]	; (402788 <system_init_flash+0x88>)
  40271e:	4293      	cmp	r3, r2
  402720:	d803      	bhi.n	40272a <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402722:	4b18      	ldr	r3, [pc, #96]	; (402784 <system_init_flash+0x84>)
  402724:	4a19      	ldr	r2, [pc, #100]	; (40278c <system_init_flash+0x8c>)
  402726:	601a      	str	r2, [r3, #0]
}
  402728:	e023      	b.n	402772 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  40272a:	687b      	ldr	r3, [r7, #4]
  40272c:	4a18      	ldr	r2, [pc, #96]	; (402790 <system_init_flash+0x90>)
  40272e:	4293      	cmp	r3, r2
  402730:	d803      	bhi.n	40273a <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402732:	4b14      	ldr	r3, [pc, #80]	; (402784 <system_init_flash+0x84>)
  402734:	4a17      	ldr	r2, [pc, #92]	; (402794 <system_init_flash+0x94>)
  402736:	601a      	str	r2, [r3, #0]
}
  402738:	e01b      	b.n	402772 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40273a:	687b      	ldr	r3, [r7, #4]
  40273c:	4a16      	ldr	r2, [pc, #88]	; (402798 <system_init_flash+0x98>)
  40273e:	4293      	cmp	r3, r2
  402740:	d803      	bhi.n	40274a <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402742:	4b10      	ldr	r3, [pc, #64]	; (402784 <system_init_flash+0x84>)
  402744:	4a15      	ldr	r2, [pc, #84]	; (40279c <system_init_flash+0x9c>)
  402746:	601a      	str	r2, [r3, #0]
}
  402748:	e013      	b.n	402772 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40274a:	687b      	ldr	r3, [r7, #4]
  40274c:	4a14      	ldr	r2, [pc, #80]	; (4027a0 <system_init_flash+0xa0>)
  40274e:	4293      	cmp	r3, r2
  402750:	d804      	bhi.n	40275c <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402752:	4b0c      	ldr	r3, [pc, #48]	; (402784 <system_init_flash+0x84>)
  402754:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402758:	601a      	str	r2, [r3, #0]
}
  40275a:	e00a      	b.n	402772 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40275c:	687b      	ldr	r3, [r7, #4]
  40275e:	4a11      	ldr	r2, [pc, #68]	; (4027a4 <system_init_flash+0xa4>)
  402760:	4293      	cmp	r3, r2
  402762:	d803      	bhi.n	40276c <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402764:	4b07      	ldr	r3, [pc, #28]	; (402784 <system_init_flash+0x84>)
  402766:	4a10      	ldr	r2, [pc, #64]	; (4027a8 <system_init_flash+0xa8>)
  402768:	601a      	str	r2, [r3, #0]
}
  40276a:	e002      	b.n	402772 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40276c:	4b05      	ldr	r3, [pc, #20]	; (402784 <system_init_flash+0x84>)
  40276e:	4a0f      	ldr	r2, [pc, #60]	; (4027ac <system_init_flash+0xac>)
  402770:	601a      	str	r2, [r3, #0]
}
  402772:	bf00      	nop
  402774:	370c      	adds	r7, #12
  402776:	46bd      	mov	sp, r7
  402778:	f85d 7b04 	ldr.w	r7, [sp], #4
  40277c:	4770      	bx	lr
  40277e:	bf00      	nop
  402780:	015ef3bf 	.word	0x015ef3bf
  402784:	400e0c00 	.word	0x400e0c00
  402788:	02bde77f 	.word	0x02bde77f
  40278c:	04000100 	.word	0x04000100
  402790:	041cdb3f 	.word	0x041cdb3f
  402794:	04000200 	.word	0x04000200
  402798:	057bceff 	.word	0x057bceff
  40279c:	04000300 	.word	0x04000300
  4027a0:	06dac2bf 	.word	0x06dac2bf
  4027a4:	0839b67f 	.word	0x0839b67f
  4027a8:	04000500 	.word	0x04000500
  4027ac:	04000600 	.word	0x04000600

004027b0 <but1_callback>:
	but1_flag = 0;
	but2_flag = 0;
	but3_flag = 0;
}

void but1_callback(void) {
  4027b0:	b480      	push	{r7}
  4027b2:	af00      	add	r7, sp, #0
	but1_flag = 1;
  4027b4:	4b03      	ldr	r3, [pc, #12]	; (4027c4 <but1_callback+0x14>)
  4027b6:	2201      	movs	r2, #1
  4027b8:	701a      	strb	r2, [r3, #0]
}
  4027ba:	bf00      	nop
  4027bc:	46bd      	mov	sp, r7
  4027be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027c2:	4770      	bx	lr
  4027c4:	204006d1 	.word	0x204006d1

004027c8 <but2_callback>:

void but2_callback(void) {
  4027c8:	b480      	push	{r7}
  4027ca:	af00      	add	r7, sp, #0
	but2_flag = 1;
  4027cc:	4b03      	ldr	r3, [pc, #12]	; (4027dc <but2_callback+0x14>)
  4027ce:	2201      	movs	r2, #1
  4027d0:	701a      	strb	r2, [r3, #0]
}
  4027d2:	bf00      	nop
  4027d4:	46bd      	mov	sp, r7
  4027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027da:	4770      	bx	lr
  4027dc:	204006d3 	.word	0x204006d3

004027e0 <but3_callback>:

void but3_callback(void) {
  4027e0:	b480      	push	{r7}
  4027e2:	af00      	add	r7, sp, #0
	but3_flag = 1;
  4027e4:	4b03      	ldr	r3, [pc, #12]	; (4027f4 <but3_callback+0x14>)
  4027e6:	2201      	movs	r2, #1
  4027e8:	701a      	strb	r2, [r3, #0]
}
  4027ea:	bf00      	nop
  4027ec:	46bd      	mov	sp, r7
  4027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027f2:	4770      	bx	lr
  4027f4:	204006d2 	.word	0x204006d2

004027f8 <RTT_Handler>:

/************************************************************************/
/* handlers                                                              */
/************************************************************************/

void RTT_Handler(void) {
  4027f8:	b580      	push	{r7, lr}
  4027fa:	b082      	sub	sp, #8
  4027fc:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = rtt_get_status(RTT);
  4027fe:	4808      	ldr	r0, [pc, #32]	; (402820 <RTT_Handler+0x28>)
  402800:	4b08      	ldr	r3, [pc, #32]	; (402824 <RTT_Handler+0x2c>)
  402802:	4798      	blx	r3
  402804:	6078      	str	r0, [r7, #4]
	
	//alarm
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  402806:	687b      	ldr	r3, [r7, #4]
  402808:	f003 0301 	and.w	r3, r3, #1
  40280c:	2b00      	cmp	r3, #0
  40280e:	d002      	beq.n	402816 <RTT_Handler+0x1e>
		alarm_rtt = 1;
  402810:	4b05      	ldr	r3, [pc, #20]	; (402828 <RTT_Handler+0x30>)
  402812:	2201      	movs	r2, #1
  402814:	701a      	strb	r2, [r3, #0]
	//time
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
		//TODO
	}

}
  402816:	bf00      	nop
  402818:	3708      	adds	r7, #8
  40281a:	46bd      	mov	sp, r7
  40281c:	bd80      	pop	{r7, pc}
  40281e:	bf00      	nop
  402820:	400e1830 	.word	0x400e1830
  402824:	0040042d 	.word	0x0040042d
  402828:	204006d0 	.word	0x204006d0

0040282c <TC0_Handler>:

void TC0_Handler(void) {
  40282c:	b580      	push	{r7, lr}
  40282e:	b082      	sub	sp, #8
  402830:	af00      	add	r7, sp, #0
	
	volatile uint32_t status = tc_get_status(TC0, 0);
  402832:	2100      	movs	r1, #0
  402834:	4804      	ldr	r0, [pc, #16]	; (402848 <TC0_Handler+0x1c>)
  402836:	4b05      	ldr	r3, [pc, #20]	; (40284c <TC0_Handler+0x20>)
  402838:	4798      	blx	r3
  40283a:	4603      	mov	r3, r0
  40283c:	607b      	str	r3, [r7, #4]
	//TODO
}
  40283e:	bf00      	nop
  402840:	3708      	adds	r7, #8
  402842:	46bd      	mov	sp, r7
  402844:	bd80      	pop	{r7, pc}
  402846:	bf00      	nop
  402848:	4000c000 	.word	0x4000c000
  40284c:	0040082b 	.word	0x0040082b

00402850 <TC1_Handler>:

void TC1_Handler(void) {
  402850:	b580      	push	{r7, lr}
  402852:	b082      	sub	sp, #8
  402854:	af00      	add	r7, sp, #0
	
	volatile uint32_t status = tc_get_status(TC0, 1);
  402856:	2101      	movs	r1, #1
  402858:	4804      	ldr	r0, [pc, #16]	; (40286c <TC1_Handler+0x1c>)
  40285a:	4b05      	ldr	r3, [pc, #20]	; (402870 <TC1_Handler+0x20>)
  40285c:	4798      	blx	r3
  40285e:	4603      	mov	r3, r0
  402860:	607b      	str	r3, [r7, #4]
	//TODO
}
  402862:	bf00      	nop
  402864:	3708      	adds	r7, #8
  402866:	46bd      	mov	sp, r7
  402868:	bd80      	pop	{r7, pc}
  40286a:	bf00      	nop
  40286c:	4000c000 	.word	0x4000c000
  402870:	0040082b 	.word	0x0040082b

00402874 <io_init>:

/************************************************************************/
/* init                                                              */
/************************************************************************/

void io_init(void) {
  402874:	b590      	push	{r4, r7, lr}
  402876:	b083      	sub	sp, #12
  402878:	af02      	add	r7, sp, #8
	pmc_enable_periph_clk(LED1_PIO_ID);
  40287a:	200a      	movs	r0, #10
  40287c:	4b21      	ldr	r3, [pc, #132]	; (402904 <io_init+0x90>)
  40287e:	4798      	blx	r3
	pmc_enable_periph_clk(LED2_PIO_ID);
  402880:	200c      	movs	r0, #12
  402882:	4b20      	ldr	r3, [pc, #128]	; (402904 <io_init+0x90>)
  402884:	4798      	blx	r3
	pmc_enable_periph_clk(LED3_PIO_ID);
  402886:	200b      	movs	r0, #11
  402888:	4b1e      	ldr	r3, [pc, #120]	; (402904 <io_init+0x90>)
  40288a:	4798      	blx	r3
	pio_configure(LED1_PIO, PIO_OUTPUT_1, LED1_IDX_MASK, PIO_DEFAULT);
  40288c:	2300      	movs	r3, #0
  40288e:	2201      	movs	r2, #1
  402890:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402894:	481c      	ldr	r0, [pc, #112]	; (402908 <io_init+0x94>)
  402896:	4c1d      	ldr	r4, [pc, #116]	; (40290c <io_init+0x98>)
  402898:	47a0      	blx	r4
	pio_configure(LED2_PIO, PIO_OUTPUT_1, LED2_IDX_MASK, PIO_DEFAULT);
  40289a:	2300      	movs	r3, #0
  40289c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4028a0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4028a4:	481a      	ldr	r0, [pc, #104]	; (402910 <io_init+0x9c>)
  4028a6:	4c19      	ldr	r4, [pc, #100]	; (40290c <io_init+0x98>)
  4028a8:	47a0      	blx	r4
	pio_configure(LED3_PIO, PIO_OUTPUT_1, LED3_IDX_MASK, PIO_DEFAULT);
  4028aa:	2300      	movs	r3, #0
  4028ac:	2204      	movs	r2, #4
  4028ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4028b2:	4818      	ldr	r0, [pc, #96]	; (402914 <io_init+0xa0>)
  4028b4:	4c15      	ldr	r4, [pc, #84]	; (40290c <io_init+0x98>)
  4028b6:	47a0      	blx	r4
	
	config_button(BUT1_PIO, BUT1_IDX_MASK, BUT1_PIO_ID, but1_callback, 1, 1);
  4028b8:	2301      	movs	r3, #1
  4028ba:	9301      	str	r3, [sp, #4]
  4028bc:	2301      	movs	r3, #1
  4028be:	9300      	str	r3, [sp, #0]
  4028c0:	4b15      	ldr	r3, [pc, #84]	; (402918 <io_init+0xa4>)
  4028c2:	2210      	movs	r2, #16
  4028c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028c8:	4814      	ldr	r0, [pc, #80]	; (40291c <io_init+0xa8>)
  4028ca:	4c15      	ldr	r4, [pc, #84]	; (402920 <io_init+0xac>)
  4028cc:	47a0      	blx	r4
	config_button(BUT2_PIO, BUT2_IDX_MASK, BUT2_PIO_ID, but2_callback, 1, 1);
  4028ce:	2301      	movs	r3, #1
  4028d0:	9301      	str	r3, [sp, #4]
  4028d2:	2301      	movs	r3, #1
  4028d4:	9300      	str	r3, [sp, #0]
  4028d6:	4b13      	ldr	r3, [pc, #76]	; (402924 <io_init+0xb0>)
  4028d8:	220c      	movs	r2, #12
  4028da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4028de:	480c      	ldr	r0, [pc, #48]	; (402910 <io_init+0x9c>)
  4028e0:	4c0f      	ldr	r4, [pc, #60]	; (402920 <io_init+0xac>)
  4028e2:	47a0      	blx	r4
	config_button(BUT3_PIO, BUT3_IDX_MASK, BUT3_PIO_ID, but3_callback, 1, 1);
  4028e4:	2301      	movs	r3, #1
  4028e6:	9301      	str	r3, [sp, #4]
  4028e8:	2301      	movs	r3, #1
  4028ea:	9300      	str	r3, [sp, #0]
  4028ec:	4b0e      	ldr	r3, [pc, #56]	; (402928 <io_init+0xb4>)
  4028ee:	220a      	movs	r2, #10
  4028f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4028f4:	4804      	ldr	r0, [pc, #16]	; (402908 <io_init+0x94>)
  4028f6:	4c0a      	ldr	r4, [pc, #40]	; (402920 <io_init+0xac>)
  4028f8:	47a0      	blx	r4
}
  4028fa:	bf00      	nop
  4028fc:	3704      	adds	r7, #4
  4028fe:	46bd      	mov	sp, r7
  402900:	bd90      	pop	{r4, r7, pc}
  402902:	bf00      	nop
  402904:	004023d5 	.word	0x004023d5
  402908:	400e0e00 	.word	0x400e0e00
  40290c:	00401da5 	.word	0x00401da5
  402910:	400e1200 	.word	0x400e1200
  402914:	400e1000 	.word	0x400e1000
  402918:	004027b1 	.word	0x004027b1
  40291c:	400e1400 	.word	0x400e1400
  402920:	00400381 	.word	0x00400381
  402924:	004027c9 	.word	0x004027c9
  402928:	004027e1 	.word	0x004027e1

0040292c <main>:

int main(void) {
  40292c:	b598      	push	{r3, r4, r7, lr}
  40292e:	af00      	add	r7, sp, #0
	
  board_init();
  402930:	4b0a      	ldr	r3, [pc, #40]	; (40295c <main+0x30>)
  402932:	4798      	blx	r3
  sysclk_init();
  402934:	4b0a      	ldr	r3, [pc, #40]	; (402960 <main+0x34>)
  402936:	4798      	blx	r3
  delay_init();
  io_init();
  402938:	4b0a      	ldr	r3, [pc, #40]	; (402964 <main+0x38>)
  40293a:	4798      	blx	r3
  gfx_mono_ssd1306_init();
  40293c:	4b0a      	ldr	r3, [pc, #40]	; (402968 <main+0x3c>)
  40293e:	4798      	blx	r3
	
	TC_init(TC0, ID_TC0, 0, 5);
  402940:	2305      	movs	r3, #5
  402942:	2200      	movs	r2, #0
  402944:	2117      	movs	r1, #23
  402946:	4809      	ldr	r0, [pc, #36]	; (40296c <main+0x40>)
  402948:	4c09      	ldr	r4, [pc, #36]	; (402970 <main+0x44>)
  40294a:	47a0      	blx	r4
	TC_init(TC0, ID_TC1, 1, 2);
  40294c:	2302      	movs	r3, #2
  40294e:	2201      	movs	r2, #1
  402950:	2118      	movs	r1, #24
  402952:	4806      	ldr	r0, [pc, #24]	; (40296c <main+0x40>)
  402954:	4c06      	ldr	r4, [pc, #24]	; (402970 <main+0x44>)
  402956:	47a0      	blx	r4

  
  while (1) {
  402958:	e7fe      	b.n	402958 <main+0x2c>
  40295a:	bf00      	nop
  40295c:	00401ac9 	.word	0x00401ac9
  402960:	00401605 	.word	0x00401605
  402964:	00402875 	.word	0x00402875
  402968:	00400a19 	.word	0x00400a19
  40296c:	4000c000 	.word	0x4000c000
  402970:	004002dd 	.word	0x004002dd

00402974 <__aeabi_uldivmod>:
  402974:	b953      	cbnz	r3, 40298c <__aeabi_uldivmod+0x18>
  402976:	b94a      	cbnz	r2, 40298c <__aeabi_uldivmod+0x18>
  402978:	2900      	cmp	r1, #0
  40297a:	bf08      	it	eq
  40297c:	2800      	cmpeq	r0, #0
  40297e:	bf1c      	itt	ne
  402980:	f04f 31ff 	movne.w	r1, #4294967295
  402984:	f04f 30ff 	movne.w	r0, #4294967295
  402988:	f000 b97a 	b.w	402c80 <__aeabi_idiv0>
  40298c:	f1ad 0c08 	sub.w	ip, sp, #8
  402990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402994:	f000 f806 	bl	4029a4 <__udivmoddi4>
  402998:	f8dd e004 	ldr.w	lr, [sp, #4]
  40299c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4029a0:	b004      	add	sp, #16
  4029a2:	4770      	bx	lr

004029a4 <__udivmoddi4>:
  4029a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029a8:	468c      	mov	ip, r1
  4029aa:	460d      	mov	r5, r1
  4029ac:	4604      	mov	r4, r0
  4029ae:	9e08      	ldr	r6, [sp, #32]
  4029b0:	2b00      	cmp	r3, #0
  4029b2:	d151      	bne.n	402a58 <__udivmoddi4+0xb4>
  4029b4:	428a      	cmp	r2, r1
  4029b6:	4617      	mov	r7, r2
  4029b8:	d96d      	bls.n	402a96 <__udivmoddi4+0xf2>
  4029ba:	fab2 fe82 	clz	lr, r2
  4029be:	f1be 0f00 	cmp.w	lr, #0
  4029c2:	d00b      	beq.n	4029dc <__udivmoddi4+0x38>
  4029c4:	f1ce 0c20 	rsb	ip, lr, #32
  4029c8:	fa01 f50e 	lsl.w	r5, r1, lr
  4029cc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4029d0:	fa02 f70e 	lsl.w	r7, r2, lr
  4029d4:	ea4c 0c05 	orr.w	ip, ip, r5
  4029d8:	fa00 f40e 	lsl.w	r4, r0, lr
  4029dc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4029e0:	0c25      	lsrs	r5, r4, #16
  4029e2:	fbbc f8fa 	udiv	r8, ip, sl
  4029e6:	fa1f f987 	uxth.w	r9, r7
  4029ea:	fb0a cc18 	mls	ip, sl, r8, ip
  4029ee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4029f2:	fb08 f309 	mul.w	r3, r8, r9
  4029f6:	42ab      	cmp	r3, r5
  4029f8:	d90a      	bls.n	402a10 <__udivmoddi4+0x6c>
  4029fa:	19ed      	adds	r5, r5, r7
  4029fc:	f108 32ff 	add.w	r2, r8, #4294967295
  402a00:	f080 8123 	bcs.w	402c4a <__udivmoddi4+0x2a6>
  402a04:	42ab      	cmp	r3, r5
  402a06:	f240 8120 	bls.w	402c4a <__udivmoddi4+0x2a6>
  402a0a:	f1a8 0802 	sub.w	r8, r8, #2
  402a0e:	443d      	add	r5, r7
  402a10:	1aed      	subs	r5, r5, r3
  402a12:	b2a4      	uxth	r4, r4
  402a14:	fbb5 f0fa 	udiv	r0, r5, sl
  402a18:	fb0a 5510 	mls	r5, sl, r0, r5
  402a1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402a20:	fb00 f909 	mul.w	r9, r0, r9
  402a24:	45a1      	cmp	r9, r4
  402a26:	d909      	bls.n	402a3c <__udivmoddi4+0x98>
  402a28:	19e4      	adds	r4, r4, r7
  402a2a:	f100 33ff 	add.w	r3, r0, #4294967295
  402a2e:	f080 810a 	bcs.w	402c46 <__udivmoddi4+0x2a2>
  402a32:	45a1      	cmp	r9, r4
  402a34:	f240 8107 	bls.w	402c46 <__udivmoddi4+0x2a2>
  402a38:	3802      	subs	r0, #2
  402a3a:	443c      	add	r4, r7
  402a3c:	eba4 0409 	sub.w	r4, r4, r9
  402a40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402a44:	2100      	movs	r1, #0
  402a46:	2e00      	cmp	r6, #0
  402a48:	d061      	beq.n	402b0e <__udivmoddi4+0x16a>
  402a4a:	fa24 f40e 	lsr.w	r4, r4, lr
  402a4e:	2300      	movs	r3, #0
  402a50:	6034      	str	r4, [r6, #0]
  402a52:	6073      	str	r3, [r6, #4]
  402a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a58:	428b      	cmp	r3, r1
  402a5a:	d907      	bls.n	402a6c <__udivmoddi4+0xc8>
  402a5c:	2e00      	cmp	r6, #0
  402a5e:	d054      	beq.n	402b0a <__udivmoddi4+0x166>
  402a60:	2100      	movs	r1, #0
  402a62:	e886 0021 	stmia.w	r6, {r0, r5}
  402a66:	4608      	mov	r0, r1
  402a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a6c:	fab3 f183 	clz	r1, r3
  402a70:	2900      	cmp	r1, #0
  402a72:	f040 808e 	bne.w	402b92 <__udivmoddi4+0x1ee>
  402a76:	42ab      	cmp	r3, r5
  402a78:	d302      	bcc.n	402a80 <__udivmoddi4+0xdc>
  402a7a:	4282      	cmp	r2, r0
  402a7c:	f200 80fa 	bhi.w	402c74 <__udivmoddi4+0x2d0>
  402a80:	1a84      	subs	r4, r0, r2
  402a82:	eb65 0503 	sbc.w	r5, r5, r3
  402a86:	2001      	movs	r0, #1
  402a88:	46ac      	mov	ip, r5
  402a8a:	2e00      	cmp	r6, #0
  402a8c:	d03f      	beq.n	402b0e <__udivmoddi4+0x16a>
  402a8e:	e886 1010 	stmia.w	r6, {r4, ip}
  402a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a96:	b912      	cbnz	r2, 402a9e <__udivmoddi4+0xfa>
  402a98:	2701      	movs	r7, #1
  402a9a:	fbb7 f7f2 	udiv	r7, r7, r2
  402a9e:	fab7 fe87 	clz	lr, r7
  402aa2:	f1be 0f00 	cmp.w	lr, #0
  402aa6:	d134      	bne.n	402b12 <__udivmoddi4+0x16e>
  402aa8:	1beb      	subs	r3, r5, r7
  402aaa:	0c3a      	lsrs	r2, r7, #16
  402aac:	fa1f fc87 	uxth.w	ip, r7
  402ab0:	2101      	movs	r1, #1
  402ab2:	fbb3 f8f2 	udiv	r8, r3, r2
  402ab6:	0c25      	lsrs	r5, r4, #16
  402ab8:	fb02 3318 	mls	r3, r2, r8, r3
  402abc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402ac0:	fb0c f308 	mul.w	r3, ip, r8
  402ac4:	42ab      	cmp	r3, r5
  402ac6:	d907      	bls.n	402ad8 <__udivmoddi4+0x134>
  402ac8:	19ed      	adds	r5, r5, r7
  402aca:	f108 30ff 	add.w	r0, r8, #4294967295
  402ace:	d202      	bcs.n	402ad6 <__udivmoddi4+0x132>
  402ad0:	42ab      	cmp	r3, r5
  402ad2:	f200 80d1 	bhi.w	402c78 <__udivmoddi4+0x2d4>
  402ad6:	4680      	mov	r8, r0
  402ad8:	1aed      	subs	r5, r5, r3
  402ada:	b2a3      	uxth	r3, r4
  402adc:	fbb5 f0f2 	udiv	r0, r5, r2
  402ae0:	fb02 5510 	mls	r5, r2, r0, r5
  402ae4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402ae8:	fb0c fc00 	mul.w	ip, ip, r0
  402aec:	45a4      	cmp	ip, r4
  402aee:	d907      	bls.n	402b00 <__udivmoddi4+0x15c>
  402af0:	19e4      	adds	r4, r4, r7
  402af2:	f100 33ff 	add.w	r3, r0, #4294967295
  402af6:	d202      	bcs.n	402afe <__udivmoddi4+0x15a>
  402af8:	45a4      	cmp	ip, r4
  402afa:	f200 80b8 	bhi.w	402c6e <__udivmoddi4+0x2ca>
  402afe:	4618      	mov	r0, r3
  402b00:	eba4 040c 	sub.w	r4, r4, ip
  402b04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402b08:	e79d      	b.n	402a46 <__udivmoddi4+0xa2>
  402b0a:	4631      	mov	r1, r6
  402b0c:	4630      	mov	r0, r6
  402b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b12:	f1ce 0420 	rsb	r4, lr, #32
  402b16:	fa05 f30e 	lsl.w	r3, r5, lr
  402b1a:	fa07 f70e 	lsl.w	r7, r7, lr
  402b1e:	fa20 f804 	lsr.w	r8, r0, r4
  402b22:	0c3a      	lsrs	r2, r7, #16
  402b24:	fa25 f404 	lsr.w	r4, r5, r4
  402b28:	ea48 0803 	orr.w	r8, r8, r3
  402b2c:	fbb4 f1f2 	udiv	r1, r4, r2
  402b30:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402b34:	fb02 4411 	mls	r4, r2, r1, r4
  402b38:	fa1f fc87 	uxth.w	ip, r7
  402b3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402b40:	fb01 f30c 	mul.w	r3, r1, ip
  402b44:	42ab      	cmp	r3, r5
  402b46:	fa00 f40e 	lsl.w	r4, r0, lr
  402b4a:	d909      	bls.n	402b60 <__udivmoddi4+0x1bc>
  402b4c:	19ed      	adds	r5, r5, r7
  402b4e:	f101 30ff 	add.w	r0, r1, #4294967295
  402b52:	f080 808a 	bcs.w	402c6a <__udivmoddi4+0x2c6>
  402b56:	42ab      	cmp	r3, r5
  402b58:	f240 8087 	bls.w	402c6a <__udivmoddi4+0x2c6>
  402b5c:	3902      	subs	r1, #2
  402b5e:	443d      	add	r5, r7
  402b60:	1aeb      	subs	r3, r5, r3
  402b62:	fa1f f588 	uxth.w	r5, r8
  402b66:	fbb3 f0f2 	udiv	r0, r3, r2
  402b6a:	fb02 3310 	mls	r3, r2, r0, r3
  402b6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402b72:	fb00 f30c 	mul.w	r3, r0, ip
  402b76:	42ab      	cmp	r3, r5
  402b78:	d907      	bls.n	402b8a <__udivmoddi4+0x1e6>
  402b7a:	19ed      	adds	r5, r5, r7
  402b7c:	f100 38ff 	add.w	r8, r0, #4294967295
  402b80:	d26f      	bcs.n	402c62 <__udivmoddi4+0x2be>
  402b82:	42ab      	cmp	r3, r5
  402b84:	d96d      	bls.n	402c62 <__udivmoddi4+0x2be>
  402b86:	3802      	subs	r0, #2
  402b88:	443d      	add	r5, r7
  402b8a:	1aeb      	subs	r3, r5, r3
  402b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402b90:	e78f      	b.n	402ab2 <__udivmoddi4+0x10e>
  402b92:	f1c1 0720 	rsb	r7, r1, #32
  402b96:	fa22 f807 	lsr.w	r8, r2, r7
  402b9a:	408b      	lsls	r3, r1
  402b9c:	fa05 f401 	lsl.w	r4, r5, r1
  402ba0:	ea48 0303 	orr.w	r3, r8, r3
  402ba4:	fa20 fe07 	lsr.w	lr, r0, r7
  402ba8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402bac:	40fd      	lsrs	r5, r7
  402bae:	ea4e 0e04 	orr.w	lr, lr, r4
  402bb2:	fbb5 f9fc 	udiv	r9, r5, ip
  402bb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402bba:	fb0c 5519 	mls	r5, ip, r9, r5
  402bbe:	fa1f f883 	uxth.w	r8, r3
  402bc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402bc6:	fb09 f408 	mul.w	r4, r9, r8
  402bca:	42ac      	cmp	r4, r5
  402bcc:	fa02 f201 	lsl.w	r2, r2, r1
  402bd0:	fa00 fa01 	lsl.w	sl, r0, r1
  402bd4:	d908      	bls.n	402be8 <__udivmoddi4+0x244>
  402bd6:	18ed      	adds	r5, r5, r3
  402bd8:	f109 30ff 	add.w	r0, r9, #4294967295
  402bdc:	d243      	bcs.n	402c66 <__udivmoddi4+0x2c2>
  402bde:	42ac      	cmp	r4, r5
  402be0:	d941      	bls.n	402c66 <__udivmoddi4+0x2c2>
  402be2:	f1a9 0902 	sub.w	r9, r9, #2
  402be6:	441d      	add	r5, r3
  402be8:	1b2d      	subs	r5, r5, r4
  402bea:	fa1f fe8e 	uxth.w	lr, lr
  402bee:	fbb5 f0fc 	udiv	r0, r5, ip
  402bf2:	fb0c 5510 	mls	r5, ip, r0, r5
  402bf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402bfa:	fb00 f808 	mul.w	r8, r0, r8
  402bfe:	45a0      	cmp	r8, r4
  402c00:	d907      	bls.n	402c12 <__udivmoddi4+0x26e>
  402c02:	18e4      	adds	r4, r4, r3
  402c04:	f100 35ff 	add.w	r5, r0, #4294967295
  402c08:	d229      	bcs.n	402c5e <__udivmoddi4+0x2ba>
  402c0a:	45a0      	cmp	r8, r4
  402c0c:	d927      	bls.n	402c5e <__udivmoddi4+0x2ba>
  402c0e:	3802      	subs	r0, #2
  402c10:	441c      	add	r4, r3
  402c12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402c16:	eba4 0408 	sub.w	r4, r4, r8
  402c1a:	fba0 8902 	umull	r8, r9, r0, r2
  402c1e:	454c      	cmp	r4, r9
  402c20:	46c6      	mov	lr, r8
  402c22:	464d      	mov	r5, r9
  402c24:	d315      	bcc.n	402c52 <__udivmoddi4+0x2ae>
  402c26:	d012      	beq.n	402c4e <__udivmoddi4+0x2aa>
  402c28:	b156      	cbz	r6, 402c40 <__udivmoddi4+0x29c>
  402c2a:	ebba 030e 	subs.w	r3, sl, lr
  402c2e:	eb64 0405 	sbc.w	r4, r4, r5
  402c32:	fa04 f707 	lsl.w	r7, r4, r7
  402c36:	40cb      	lsrs	r3, r1
  402c38:	431f      	orrs	r7, r3
  402c3a:	40cc      	lsrs	r4, r1
  402c3c:	6037      	str	r7, [r6, #0]
  402c3e:	6074      	str	r4, [r6, #4]
  402c40:	2100      	movs	r1, #0
  402c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c46:	4618      	mov	r0, r3
  402c48:	e6f8      	b.n	402a3c <__udivmoddi4+0x98>
  402c4a:	4690      	mov	r8, r2
  402c4c:	e6e0      	b.n	402a10 <__udivmoddi4+0x6c>
  402c4e:	45c2      	cmp	sl, r8
  402c50:	d2ea      	bcs.n	402c28 <__udivmoddi4+0x284>
  402c52:	ebb8 0e02 	subs.w	lr, r8, r2
  402c56:	eb69 0503 	sbc.w	r5, r9, r3
  402c5a:	3801      	subs	r0, #1
  402c5c:	e7e4      	b.n	402c28 <__udivmoddi4+0x284>
  402c5e:	4628      	mov	r0, r5
  402c60:	e7d7      	b.n	402c12 <__udivmoddi4+0x26e>
  402c62:	4640      	mov	r0, r8
  402c64:	e791      	b.n	402b8a <__udivmoddi4+0x1e6>
  402c66:	4681      	mov	r9, r0
  402c68:	e7be      	b.n	402be8 <__udivmoddi4+0x244>
  402c6a:	4601      	mov	r1, r0
  402c6c:	e778      	b.n	402b60 <__udivmoddi4+0x1bc>
  402c6e:	3802      	subs	r0, #2
  402c70:	443c      	add	r4, r7
  402c72:	e745      	b.n	402b00 <__udivmoddi4+0x15c>
  402c74:	4608      	mov	r0, r1
  402c76:	e708      	b.n	402a8a <__udivmoddi4+0xe6>
  402c78:	f1a8 0802 	sub.w	r8, r8, #2
  402c7c:	443d      	add	r5, r7
  402c7e:	e72b      	b.n	402ad8 <__udivmoddi4+0x134>

00402c80 <__aeabi_idiv0>:
  402c80:	4770      	bx	lr
  402c82:	bf00      	nop

00402c84 <__libc_init_array>:
  402c84:	b570      	push	{r4, r5, r6, lr}
  402c86:	4e0f      	ldr	r6, [pc, #60]	; (402cc4 <__libc_init_array+0x40>)
  402c88:	4d0f      	ldr	r5, [pc, #60]	; (402cc8 <__libc_init_array+0x44>)
  402c8a:	1b76      	subs	r6, r6, r5
  402c8c:	10b6      	asrs	r6, r6, #2
  402c8e:	bf18      	it	ne
  402c90:	2400      	movne	r4, #0
  402c92:	d005      	beq.n	402ca0 <__libc_init_array+0x1c>
  402c94:	3401      	adds	r4, #1
  402c96:	f855 3b04 	ldr.w	r3, [r5], #4
  402c9a:	4798      	blx	r3
  402c9c:	42a6      	cmp	r6, r4
  402c9e:	d1f9      	bne.n	402c94 <__libc_init_array+0x10>
  402ca0:	4e0a      	ldr	r6, [pc, #40]	; (402ccc <__libc_init_array+0x48>)
  402ca2:	4d0b      	ldr	r5, [pc, #44]	; (402cd0 <__libc_init_array+0x4c>)
  402ca4:	1b76      	subs	r6, r6, r5
  402ca6:	f000 f8a7 	bl	402df8 <_init>
  402caa:	10b6      	asrs	r6, r6, #2
  402cac:	bf18      	it	ne
  402cae:	2400      	movne	r4, #0
  402cb0:	d006      	beq.n	402cc0 <__libc_init_array+0x3c>
  402cb2:	3401      	adds	r4, #1
  402cb4:	f855 3b04 	ldr.w	r3, [r5], #4
  402cb8:	4798      	blx	r3
  402cba:	42a6      	cmp	r6, r4
  402cbc:	d1f9      	bne.n	402cb2 <__libc_init_array+0x2e>
  402cbe:	bd70      	pop	{r4, r5, r6, pc}
  402cc0:	bd70      	pop	{r4, r5, r6, pc}
  402cc2:	bf00      	nop
  402cc4:	00402e04 	.word	0x00402e04
  402cc8:	00402e04 	.word	0x00402e04
  402ccc:	00402e0c 	.word	0x00402e0c
  402cd0:	00402e04 	.word	0x00402e04

00402cd4 <register_fini>:
  402cd4:	4b02      	ldr	r3, [pc, #8]	; (402ce0 <register_fini+0xc>)
  402cd6:	b113      	cbz	r3, 402cde <register_fini+0xa>
  402cd8:	4802      	ldr	r0, [pc, #8]	; (402ce4 <register_fini+0x10>)
  402cda:	f000 b805 	b.w	402ce8 <atexit>
  402cde:	4770      	bx	lr
  402ce0:	00000000 	.word	0x00000000
  402ce4:	00402cf5 	.word	0x00402cf5

00402ce8 <atexit>:
  402ce8:	2300      	movs	r3, #0
  402cea:	4601      	mov	r1, r0
  402cec:	461a      	mov	r2, r3
  402cee:	4618      	mov	r0, r3
  402cf0:	f000 b81e 	b.w	402d30 <__register_exitproc>

00402cf4 <__libc_fini_array>:
  402cf4:	b538      	push	{r3, r4, r5, lr}
  402cf6:	4c0a      	ldr	r4, [pc, #40]	; (402d20 <__libc_fini_array+0x2c>)
  402cf8:	4d0a      	ldr	r5, [pc, #40]	; (402d24 <__libc_fini_array+0x30>)
  402cfa:	1b64      	subs	r4, r4, r5
  402cfc:	10a4      	asrs	r4, r4, #2
  402cfe:	d00a      	beq.n	402d16 <__libc_fini_array+0x22>
  402d00:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402d04:	3b01      	subs	r3, #1
  402d06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402d0a:	3c01      	subs	r4, #1
  402d0c:	f855 3904 	ldr.w	r3, [r5], #-4
  402d10:	4798      	blx	r3
  402d12:	2c00      	cmp	r4, #0
  402d14:	d1f9      	bne.n	402d0a <__libc_fini_array+0x16>
  402d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402d1a:	f000 b877 	b.w	402e0c <_fini>
  402d1e:	bf00      	nop
  402d20:	00402e1c 	.word	0x00402e1c
  402d24:	00402e18 	.word	0x00402e18

00402d28 <__retarget_lock_acquire_recursive>:
  402d28:	4770      	bx	lr
  402d2a:	bf00      	nop

00402d2c <__retarget_lock_release_recursive>:
  402d2c:	4770      	bx	lr
  402d2e:	bf00      	nop

00402d30 <__register_exitproc>:
  402d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d34:	4d2c      	ldr	r5, [pc, #176]	; (402de8 <__register_exitproc+0xb8>)
  402d36:	4606      	mov	r6, r0
  402d38:	6828      	ldr	r0, [r5, #0]
  402d3a:	4698      	mov	r8, r3
  402d3c:	460f      	mov	r7, r1
  402d3e:	4691      	mov	r9, r2
  402d40:	f7ff fff2 	bl	402d28 <__retarget_lock_acquire_recursive>
  402d44:	4b29      	ldr	r3, [pc, #164]	; (402dec <__register_exitproc+0xbc>)
  402d46:	681c      	ldr	r4, [r3, #0]
  402d48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402d4c:	2b00      	cmp	r3, #0
  402d4e:	d03e      	beq.n	402dce <__register_exitproc+0x9e>
  402d50:	685a      	ldr	r2, [r3, #4]
  402d52:	2a1f      	cmp	r2, #31
  402d54:	dc1c      	bgt.n	402d90 <__register_exitproc+0x60>
  402d56:	f102 0e01 	add.w	lr, r2, #1
  402d5a:	b176      	cbz	r6, 402d7a <__register_exitproc+0x4a>
  402d5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402d60:	2401      	movs	r4, #1
  402d62:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402d66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402d6a:	4094      	lsls	r4, r2
  402d6c:	4320      	orrs	r0, r4
  402d6e:	2e02      	cmp	r6, #2
  402d70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402d74:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402d78:	d023      	beq.n	402dc2 <__register_exitproc+0x92>
  402d7a:	3202      	adds	r2, #2
  402d7c:	f8c3 e004 	str.w	lr, [r3, #4]
  402d80:	6828      	ldr	r0, [r5, #0]
  402d82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402d86:	f7ff ffd1 	bl	402d2c <__retarget_lock_release_recursive>
  402d8a:	2000      	movs	r0, #0
  402d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d90:	4b17      	ldr	r3, [pc, #92]	; (402df0 <__register_exitproc+0xc0>)
  402d92:	b30b      	cbz	r3, 402dd8 <__register_exitproc+0xa8>
  402d94:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402d98:	f3af 8000 	nop.w
  402d9c:	4603      	mov	r3, r0
  402d9e:	b1d8      	cbz	r0, 402dd8 <__register_exitproc+0xa8>
  402da0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402da4:	6002      	str	r2, [r0, #0]
  402da6:	2100      	movs	r1, #0
  402da8:	6041      	str	r1, [r0, #4]
  402daa:	460a      	mov	r2, r1
  402dac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402db0:	f04f 0e01 	mov.w	lr, #1
  402db4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402db8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402dbc:	2e00      	cmp	r6, #0
  402dbe:	d0dc      	beq.n	402d7a <__register_exitproc+0x4a>
  402dc0:	e7cc      	b.n	402d5c <__register_exitproc+0x2c>
  402dc2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402dc6:	430c      	orrs	r4, r1
  402dc8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402dcc:	e7d5      	b.n	402d7a <__register_exitproc+0x4a>
  402dce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402dd2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402dd6:	e7bb      	b.n	402d50 <__register_exitproc+0x20>
  402dd8:	6828      	ldr	r0, [r5, #0]
  402dda:	f7ff ffa7 	bl	402d2c <__retarget_lock_release_recursive>
  402dde:	f04f 30ff 	mov.w	r0, #4294967295
  402de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402de6:	bf00      	nop
  402de8:	20400438 	.word	0x20400438
  402dec:	00402df4 	.word	0x00402df4
  402df0:	00000000 	.word	0x00000000

00402df4 <_global_impure_ptr>:
  402df4:	20400010                                ..@ 

00402df8 <_init>:
  402df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dfa:	bf00      	nop
  402dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402dfe:	bc08      	pop	{r3}
  402e00:	469e      	mov	lr, r3
  402e02:	4770      	bx	lr

00402e04 <__init_array_start>:
  402e04:	00402cd5 	.word	0x00402cd5

00402e08 <__frame_dummy_init_array_entry>:
  402e08:	00400165                                e.@.

00402e0c <_fini>:
  402e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e0e:	bf00      	nop
  402e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e12:	bc08      	pop	{r3}
  402e14:	469e      	mov	lr, r3
  402e16:	4770      	bx	lr

00402e18 <__fini_array_start>:
  402e18:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <impure_data>:
20400010:	0000 0000 02fc 2040 0364 2040 03cc 2040     ......@ d.@ ..@ 
	...
204000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400438 <__atexit_recursive_mutex>:
20400438:	06d4 2040                                   ..@ 
